#!/bin/bash
# shellcheck source=/dev/null

### project ###

PROGNAME="SteamTinkerLaunch"
PROGVERS="v2.7.0"
PROGCMD="$(basename "$0")"
PROJECTPAGE="https://github.com/frostworx/steamtinkerlaunch"

### internal dependencies ###
#STARTINTDEPS
GIT="git"
PGREP="pgrep"
PIDOF="pidof"
PKILL="pkill"
TAR="tar"
UNZIP="unzip"
WGET="wget"
WHICH="which"
WMCTRL="wmctrl"
XDO="xdotool"
XPROP="xprop"
XRANDR="xrandr"
XWININFO="xwininfo"
YAD="yad"
ZENITY="zenity"
#ENDINTDEPS

### (optionally) used programs ###
GAMEMODERUN="gamemoderun"
GAMESCOPE="gamescope"
NYRNA="nyrna"
STEAM="steam"
STRACE="strace"
WINECFG="winecfg"
WINETRICKS="winetricks"
REPLAY="replay-sorcery"
CABEXTRACT="cabextract"
LSUSB="lsusb"
JQ="jq"

ZENBIN=""
CHECKHMD=1 # will be set to 0 if $LSUSB is not found. Then the hmd presence check is skipped

# autotweak platforms
LU="lutris"
PF="protonfixes"
AUTOTWEAKPLATFORMS="$PF $LU"
LUATDEBUG=0
FORCEOVERRIDEPROTON=0

# this variable is filled with the last Auto Tweak variable accepted and is the only Auto Tweak config which is finally loaded
LOADAUTOCFG=""
DSHM="/dev/shm"
STLSHM="$DSHM/$PROGCMD"
STLICON="$STLSHM/stl-steam-checked.png"
NOICON="$STLSHM/empty.png"
DFDIR="$STLSHM/desktopfiles"
CLOSETMP="$STLSHM/${PROGCMD}-closing.tmp"
TEMPLOG="$STLSHM/${PROGCMD}.log"
TEMPWINNAME="$STLSHM/windowname.txt"
GWIDFILE="$STLSHM/${PROGCMD}-sbsgwid"

### default vars ###

if [ -z "$XDG_CONFIG_HOME" ]; then
	STLCFGDIR="$HOME/.config/$PROGCMD"														# either hardcoded config dir
else
	STLCFGDIR="$XDG_CONFIG_HOME/$PROGCMD"													# or in XDG_CONFIG_HOME if the user set the variable
fi

SYSTEMSTLCFGDIR="/usr/share/$PROGCMD"														# systemwide config dir
LOGDIR="$STLCFGDIR/logs"																	# default logfile dir
STLGAMEDIR="$STLCFGDIR/gamecfgs"															# default basedir for game the gamespecific configs
STLCATEGORYDIR="$STLCFGDIR/categories"														# the directory holding config files with preconfigured settings for games in specific steamcategories
STLREGDIR="$STLCFGDIR/regs"																	# the directory holding registry files
STLDLDIR="$STLCFGDIR/downloads"																# the directory holding optional downloads
STLSHADDIR="$STLDLDIR/shaders"
TWEAKDIR="$STLCFGDIR/tweaks"																# the parent directory for all user tweakfiles
USERTWEAKDIR="$TWEAKDIR/user"																# the place for the users own main tweakfiles - tweaks in here override all other ones!
AUTOTWEAKDIR="$TWEAKDIR/auto"																# parent dir for all (upcoming) autoimport tweak files. every source will have an own subdirectory
PFTWEAKDIR="$AUTOTWEAKDIR/$PF"																# $PF tweakdir
LUTWEAKDIR="$AUTOTWEAKDIR/$LU"																# $LU tweakdir
TWEAKCMDDIR="$TWEAKDIR/cmd"																	# dir for scriptfiles used by tweakfiles
TWEAKTEMPLATEDIR="$TWEAKDIR/templates"														# dir where template tweakfiles are stored when CREATETWEAKS is enabled
SBSTWEAKDIR="$TWEAKDIR/sbs"																	# directory for optional config overrides for easier side-by-side VR gaming
ATDLDIR="$STLDLDIR/autotweak"																# main autotweak download dir
STLVORTEXDIR="$STLCFGDIR/vortex"															# stl vortex dir
PLACEHOLDERAID="31337"
PLACEHOLDERGN="Placeholder"
GHURL="https://github.com"

STLGAMES="$STLCFGDIR/games"
STLGDESKD="$STLGAMES/desktop"
STLGHEADD="$STLGAMES/header"
STLPATH="/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games"

#STLGSCPTD="$STLGAMES/scripts"
NOGAMES=",70_2260196511,228980,858280,961940,1054830,1070560,1113280,1245040,1391110,1420170,"

#PROTON37="858280"
#PROTON316="961940"
#PROTON42="1054830"
#PROTON411="1113280"
#PROTON50="1245040"
#PROTON513="1420170"

function setAID {
# shellcheck disable=SC2154		# SteamAppId comes from Steam
	if [ -z "$SteamAppId" ];then
		AID="$PLACEHOLDERAID"
	else
		AID="$SteamAppId"
	fi
}

setAID

#STARTEDITORCFGLIST
STLDEFGLOBALCFG="$STLCFGDIR/global.conf"													# global config
STLDEFGAMECFG="$STLCFGDIR/default_template.conf"											# the default config template used to create new per game configs - will be auto created if not found

function setAIDCfgs {
STLGAMECFG="$STLGAMEDIR/$AID.conf"															# the game specific config file which is used by the launched game - created from $STLDEFGAMECFG if not found
TWEAKCFG="$USERTWEAKDIR/$AID.conf"															# the game specific shareable config tweak overrides
SBSTWEAKCFG="$SBSTWEAKDIR/$AID.conf"														# the game specific shareable config sbs tweak overrides
LOGFILE="$LOGDIR/$AID.log"																	
TWEAKTEMPLATECFG="$TWEAKTEMPLATEDIR/$AID.conf"												# Tweak Template autowritten when CREATETWEAKS is set
PFTWEAKCFG="$PFTWEAKDIR/$AID.conf"
LUTWEAKCFG="$LUTWEAKDIR/$AID.conf"	
}
STLVORTEXCFG="$STLVORTEXDIR/vortex.conf"													# vortex config
STLURLCFG="$STLCFGDIR/url.conf"																# url config
CUSTOMPROTONLIST="$STLCFGDIR/protonlist.txt"												# plain textfile with additional user proton versions
VORTEXSTAGELIST="$STLVORTEXDIR/stages.txt"													# plain textfile with Vortex Stage directories - one per Steam Library partition
#ENDEDITORCFGLIST
STLGUICFG="$STLCFGDIR/gui.conf"																# gui config

setAIDCfgs

# optional global config replacement dirs, which can be pulled using DLGLOBAL:
GLDLSTLDIR="$STLDLDIR/$PROGNAME"
GLDLSTLTXT="${GLDLSTLDIR}.txt"
GLDLTWEAKDIR="$GLDLSTLDIR/tweaks"
GLDLUSERTWEAKDIR="$GLDLTWEAKDIR/user"
GLDLSBSTWEAKDIR="$GLDLTWEAKDIR/sbs"
GLDLTWEAKCMDDIR="$GLDLTWEAKDIR/cmd"
GLDLCATEGORYDIR="$GLDLSTLDIR/categories"
GLDLMISCDIR="$GLDLSTLDIR/misc"
GLDLREGDIR="$GLDLSTLDIR/regs"
GLDLSTLLANGDIR="$GLDLSTLDIR/lang"

STLLANGDIR="$STLCFGDIR/lang"
STLDEFLANG="english"

STLDXVKDIR="$STLCFGDIR/dxvk"																# base dxvk config dir from where default per game configs are automatically parsed
ISGAME=0																					# 1=game was launched, 2=windows game, 3=linux game
WFEAR="waitforexitandrun"
SA="steamapps"
SAC="$SA/common"
CTD="compatibilitytools.d"
USS="/usr/share/steam"
SYSSTEAMCOMPATOOLS="$USS/$CTD"
SLR="SteamLinuxRuntime"
DBW="dist/bin/wine"
PROCU="proton/custom"
CTVDF="compatibilitytool.vdf"
SCV="sharedconfig.vdf"
SRSCV="7/remote/$SCV"
LASTRUN="$LOGDIR/lastrun.txt"																# some variables from the last run which might be reused
RS_D3D47_DEST="d3dcompiler_47.dll"
RS_DX_DEST="dxgi.dll"
RS_D9_DEST="d3d9.dll"
RSENABLED="ReShade-${PROGCMD}-enabled.txt"
RSDISABLED="ReShade-${PROGCMD}-disabled.txt"

YADKEY="$PLACEHOLDERAID"
# currently hardcoded borders used in yad:
YADSETBORD=8
YADBORDER=34

################

function setSteamPath {
	HSR="$HOME/.steam/root"
	HSS="$HOME/.steam/steam"

	if [ -z "${!1}" ]; then
		if [ -e "${HSR}/${2}" ]; then
			STPA="${HSR}/${2}"
			export "$1"="$STPA"
			writelog "INFO" "${FUNCNAME[0]} - set '$1' to '$STPA'"
		elif [ -e "${HSS}/${2}" ];then
			STPA="${HSS}/${2}"
			export "$1"="$STPA"
			writelog "INFO" "${FUNCNAME[0]} - set '$1' to '$STPA'"
		else
			writelog "ERROR" "${FUNCNAME[0]} - '$2' not found for variable '$1' in '$HSR' or '$HSS'!" "E"
		fi	
	else
		writelog "SKIP" "${FUNCNAME[0]} - '$1' already defined as '${!1}'"
	fi
}

function setSteamPaths {
	setSteamPath "SROOT"
	setSteamPath "SUSDA" "userdata"
	setSteamPath "DEFSTEAMAPPS" "$SA"
	setSteamPath "DEFSTEAMAPPSCOMMON" "$SAC"
	setSteamPath "STEAMCOMPATOOLS" "$CTD"
	setSteamPath "CFGVDF" "config/config.vdf"
}

function getGamePic {
	if [ "$DLGAMEDATA" -eq 1 ]; then
		DLPIC="$1"
		if [ ! -f "$DLPIC" ]; then
			writelog "INFO" "${FUNCNAME[0]} - Downloading picture for game '$(basename "${1//.jpg/}")'"
			"$WGET" -q "$2" -O "$DLPIC"
		fi
	fi
}

function getGameName {
	if [ -n "$GN" ]; then
		writelog "INFO" "${FUNCNAME[0]} - using 'GN' as Game Name: '$GN'"
		GNRAW="$GN"
	elif [ -f "$STLGAMEDIR/$1.conf" ]; then
		GNRAW="$(grep "#GAMENAME" "$STLGAMEDIR/$1.conf" | cut -d '=' -f2)"
		writelog "INFO" "${FUNCNAME[0]} - found Game Name '$GNRAW' in '$STLGAMEDIR/$1.conf'"
	elif grep -q "_${1}\." <<< "$(listAppManifests)" ; then
		APPMA="$(grep "_${1}\." <<< "$(listAppManifests)")"
		if [ -n "$APPMA" ]; then
			GNRAW1="$(grep "\"name\"" "$APPMA" | awk -F '"name"' '{print $NF}')"
			GNRAW="$(awk '{$1=$1};1' <<< "$GNRAW1")"
			writelog "INFO" "${FUNCNAME[0]} - found Game Name '$GNRAW' in '$APPMA'"
		fi
	else
		if [ "$DLGAMEDATA" -eq 1 ]; then
			APIURL="https://api.steampowered.com/ISteamApps/GetAppList/v2"
			APIDL="$STLDLDIR/SteamApps.json"
			MAXAGE=1440
			if [ ! -f "$APIDL" ] || test "$(find "$APIDL" -mmin +"$MAXAGE")"; then
				writelog "INFO" "${FUNCNAME[0]} - downloading $APIDL"
				"$WGET" -q "$APIURL" -O "$APIDL"
			fi
		fi

		if [ -f "$APIDL" ]; then
			if  [ ! -x "$(command -v "$("$WHICH" "$JQ" 2>/dev/null)" 2>/dev/null)" ]; then
				writelog "WARN" "${FUNCNAME[0]} - can't get data from '$APIDL' because '$JQ' is not installed"
			else
				writelog "INFO" "${FUNCNAME[0]} - searching Game Name for '$1' in $APIDL"
				GNRAW="$("$JQ" ".applist.apps[] | select (.appid==$1) | .name" "$APIDL")"
				
				if [ -n "$GNRAW" ]; then
					writelog "INFO" "${FUNCNAME[0]} - found Game Name '$GNRAW' in $APIDL"
				fi
			fi
		fi
	fi
	GAMENAME="${GNRAW//\"/}"
}

function writeDesktopFile {
	if [ -f "$STLGDESKD/$1.desktop" ]; then
		writelog "SKIP" "${FUNCNAME[0]} - $STLGDESKD/$1.desktop already exists"
	else
		getGameName "$1"
	
		if [ -n "$GAMENAME" ]; then
			writelog "INFO" "${FUNCNAME[0]} - creating $STLGDESKD/$1.desktop" "E"

			{
				echo "[Desktop Entry]"
				echo "Name=${GAMENAME//\"/}"
				echo "Comment=$DF_COMMENT"
				echo "Exec=steam steam://rungameid/$1"
				echo "Icon=$STLGHEADD/$1.jpg"
				echo "Terminal=false"
				echo "Type=Application"
				echo "Categories=Game;"
			} >> "$STLGDESKD/$1.desktop"
		fi
	fi
}

function getGameData {
	if  ! grep -q ",${1}," <<< "$NOGAMES" ; then
		getGamePic "$STLGHEADD/$1.jpg" "$STASSURL/$1/header.jpg"
		writeDesktopFile "$1"
	fi
}

function getParsableGameList {
	if [ -d "$SUSDA" ]; then
		STEAMUSERID="$(find "$SUSDA" -maxdepth 1 -type d -name "[1-9]*")"
		SC="$STEAMUSERID/$SRSCV"
		APPI="Apps"
		APPO="StartMenuShortcutCheck"
		awk "/$APPI/,/$APPO/" "$SC" | grep -v "$APPI\|$APPO" | awk '{printf "%s+",$0} END {print ""}' |  sed 's/"[0-9][0-9]/\n&/g'
	else
		writelog "SKIP" "${FUNCNAME[0]} - '$SUSDA' not found - this should not happen! - skipping"
	fi
}

function getInstalledGamesFromCategory {
	if [ -n "$1" ]; then
		CAT="$1"
	else
		CAT="installed"
	fi

	if [ -n "$CAT" ]; then
		while read -r CATAID; do
		echo "$CATAID"
		done <<< "$(getParsableGameList | grep "\"installed\"" | grep "\"$CAT\"" | sed "s:\"::g" | sort -n | cut -d '+' -f1)"
	fi
}

function getGameDataForInstalledGames {
	while read -r CATAID; do
		getGameData "$CATAID"
	done <  <(getInstalledGamesFromCategory "installed")
}

function getDataForAllGamesinSharedConfig {
	while read -r CATAID; do
		getGameData "$CATAID"
	done <<< "$(getParsableGameList | cut -d '+' -f1 | sed "s:\"::g" | grep "[0-9]" | sort -n)"
}

function getActiveSteamCategories {
	getParsableGameList | grep "\"installed\"" | grep "\"tags\"" | awk -F '"tags"+' '{print $NF}' | sed  's/\t/\n/g' | grep -v "^\"[0-9]\"\|^+\|^{+\|^}+" | sed "s:\"+$::g" | sed "s:^\"::g" | sort -u | sed '/^[[:space:]]*$/d'
}

function createCategoryMenus {
	mkdir -p "$DFDIR" 2>/dev/null

	if [ -n "$1" ] && [ "$1" == "update" ] && [ "$(find "$DFDIR" -name "*.desktop" | wc -l)" -gt 0 ]; then
		find "$DFDIR" -name "*.desktop" -exec rm {} \;
	fi
	
	if  [ "$(find "$DFDIR" -name "*.desktop" | wc -l)" -eq 0 ]; then
		while read -r CAT; do
			DFCDIR="$DFDIR/$CAT"
			mkdir -p "$DFCDIR" 2>/dev/null
			while read -r CATGAME; do
				if [ -f "$STLGDESKD/$CATGAME.desktop" ]; then
					if [ ! -h "$DFCDIR/$CATGAME.desktop" ]; then
						ln -s "$STLGDESKD/$CATGAME.desktop" "$DFCDIR"
					fi
				fi
			done <<< "$(getInstalledGamesFromCategory "$CAT")"
		done < <(getActiveSteamCategories)
	fi
}

function listAppManifests {
	function findAppMa {
		find "$1" -mindepth 1 -maxdepth 1 -type f -name "appmanifest_*.acf"
	}
	
	if [ -d "$DEFSTEAMAPPS" ]; then
		findAppMa "$DEFSTEAMAPPS"
	else
		writelog "SKIP" "${FUNCNAME[0]} - '$DEFSTEAMAPPS' not found - this should not happen! - skipping"
	fi

	if [ -f "$CFGVDF" ]; then
		while read -r BIF; do
			findAppMa "${BIF//\"/}/$SA"
		done <<< "$(grep "BaseInstallFolder" "$CFGVDF" | awk '{print $2}')"
	else
		writelog "SKIP" "${FUNCNAME[0]} - '$CFGVDF' not found - this should not happen! - skipping"
	fi
}

function openGameLauncher {
	function GLgui {
		"$YAD" --icons  --window-icon="$STLICON" --read-dir="$DFDIR/$1" "$WINDECO" --title="$TITLE" --single-click --keep-icon-size --center --compact --sort-by-name --geometry="$LAUNCHERWIDTH"x"$LAUNCHERHEIGHT"+0+0
	}

	if grep -q "update"  <<< "$@"; then
		createCategoryMenus "update"
	else
		createCategoryMenus "dummy"
	fi

	if  [ "$(find "$DFDIR" -name "*.desktop" | wc -l)" -eq 0 ]; then
		writelog "INFO" "${FUNCNAME[0]} - no desktop file found in '$DFDIR'" "E"
		if [ "$1" == "auto" ]; then
			writelog "INFO" "${FUNCNAME[0]} - found arument 'auto'. Automatically creating/downloading required data for all installed games found" "E"
			getGameDataForInstalledGames
			if [ -n "$2" ] && [ "$2" == "update" ]; then
				createCategoryMenus "$2"
			else
				createCategoryMenus "dummy"
			fi
		else
			writelog "INFO" "${FUNCNAME[0]} - either add argument 'auto' to automatically create/download required data or check '$PROGCMD --help'" "E"
			exit
		fi
	fi

	TITLE="${PROGNAME}-Launcher"
	loadCfg "$STLGUICFG" X
	updateWinRes "$TITLE" "$STLGUICFG" "LAUNCHERWIDTH" "LAUNCHERHEIGHT" &

	if [ -z "$1" ] || [ "$1" == "auto" ] || [ "$1" == "update" ]; then
		GLgui "installed"
	else
		if [ "$1" == "menu" ]; then

			while read -r CATMENU; do
				mapfile -t -O "${#CATCSV[@]}" CATCSV <<< "$CATMENU"
			done <<< "$(printf "%s\n" "$(ls "$DFDIR")")"
			CATLIST="$(printf "!%s\n" "${CATCSV[@]//\"/}" | sort -u | cut -d ';' -f1 | tr -d '\n' ;printf "\n")"
			CATMENU="$(LC_ALL="" "$YAD" --window-icon="$STLICON" --borders="$YADBORDER" --center "$WINDECO" --form --scroll --separator="\n" --quoted-output \
			--text="<span font_weight='bold'>$GUI_CHOOSECAT</span>" \
			--field="$GUI_CHOOSECATS":CB "installed!$CATLIST" \
			--title="$TITLE" \
			--geometry="$LAUNCHERWIDTH"x"$LAUNCHERHEIGHT"+0+0)"
			
			if [ -n "${CATMENU//\'}" ]; then
				GLgui "${CATMENU//\'}"
			fi
		elif [ "$1" == "last" ]; then
			if [ -f "$LASTRUN" ]; then
				PREVAID="$(grep "^PREVAID" "$LASTRUN" | cut -d '=' -f2)"
				if [ -n "$PREVAID" ]; then
					AID="${PREVAID//\"}"
					if [ -f "$STLGDESKD/$AID.desktop" ]; then
						writelog "INFO" "${FUNCNAME[0]} - '$1' selected, so opening splash for '$STLGDESKD/$AID.desktop'" "E"
						DFCDIR="$DFDIR/last"
						mkdir -p "$DFCDIR" 2>/dev/null
						cp "$STLGDESKD/$AID.desktop" "$DFCDIR"
						GLgui "$1"
					else
						writelog "SKIP" "${FUNCNAME[0]} - '$1' selected, but file '$STLGDESKD/$AID.desktop' not found" "E"
					fi
				fi
			fi
		elif [ -d "$DFDIR/$1" ]; then
			GLgui "$1"
		else
			writelog "SKIP" "${FUNCNAME[0]} - Steam Category '$1' not found in '$DFDIR'" "E"
			writelog "SKIP" "${FUNCNAME[0]} - only found '$(ls "$DFDIR")'" "E"
		fi
	fi
}


function DBGMS {
	echo "$(date) - $1" >> "$STLSHM/DBGMS.txt"
}

function resetAID {
	if [ -n "$1" ]; then
		if [ -n "${1##*[!0-9]*}" ]; then
			AID="$1"
		else
			if [ "$1" == "last" ]; then
				if [ -f "$LASTRUN" ]; then
					PREVAID="$(grep "^PREVAID" "$LASTRUN" | cut -d '=' -f2)"
					if [ -n "$PREVAID" ]; then
						AID="${PREVAID//\"}"
						PREVGAME="$(grep "^PREVGAME" "$LASTRUN" | cut -d '=' -f2)"
						if [ -n "$PREVGAME" ]; then
							GN="(last game started) ${PREVGAME//\"}"
						fi
					fi
				else
					AID="$PLACEHOLDERAID"
				fi
			fi
		fi
	fi

	# should not happen, but just in case it still is empty, set the placeholders
	if [ -z "$AID" ]; then
		AID="$PLACEHOLDERAID"
	fi

	if [ "$AID" == "$PLACEHOLDERAID" ]; then
		GN="$PLACEHOLDERGN"
	fi
	setAIDCfgs
}

function setGlobalAIDCfgs {
	if [ "$(USEDLGLOBAL)" -ge 1 ]; then
		GLOBALSBSTWEAKCFG="$GLDLSBSTWEAKDIR/$AID.conf"
		GLOBALTWEAKCFG="$GLDLUSERTWEAKDIR/$AID.conf"
		AIDREG="$GLDLREGDIR/$AID.reg"
	else
		GLOBALSBSTWEAKCFG="$GLOBALSBSTWEAKDIR/$AID.conf"
		GLOBALTWEAKCFG="$GLOBALUSERTWEAKDIR/$AID.conf" #X
		AIDREG="$GLOBALREGDIR/$AID.reg"
	fi
}

function setGameVars {
	if [ -n "$STEAM_COMPAT_DATA_PATH" ]; then
	# win game
		GPFX="$STEAM_COMPAT_DATA_PATH/pfx"														# currently used WINEPREFIX
		GP="$(printf "%s\n" "$@" | grep -v "proton\|$SLR" | grep -m1 "$SAC")"					# the absolute game path of the windows game exe
		GE="$(basename "$GP" | awk -F '.exe' '{print $1}')"										# just the windows game exe name
		EFD="$(dirname "$GP")"																	# the absolute directory where the game exe lives - for optional custom program
	else
	# linux game
		GPRAW="$(printf "%s\n" "$@" | grep -m1 "$SAC")"											# the absolute game path of the game exe
		if grep -q "/./" <<< "$GPRAW"; then
			GP="${GPRAW//\/.\//\/}"
		else
			GP="$GPRAW"
		fi
		
		GE="$(basename "$GP")"																	# the game executable
#		EFD="${GP//$GE/}"																		# the absolute directory where the game exe lives - for optional custom program # dirname fails at least with 206420
		EFD="$(dirname "$GP")"

	fi

	# common
	GFD="$(awk -F 'common' '{print $1}' <<< "$EFD")common/$(awk -F 'common' '{print $NF}' <<< "$EFD" | cut -d'/' -f2)" # f.e. used for vortex symlinks
	GN="$(grep -oE 'common/[^\/]+' <<< "$EFD" | awk -F 'common/' '{print $NF}')"				# THIS is hopefully the proper game name

	# SLR
	if grep -q "$SLR" <<< "$@"; then
		FOUNDSLR=0
		while read -r ORGARG; do
			if [ "$FOUNDSLR" -eq 0 ]; then
				mapfile -t -O "${#RUNSLR[@]}" RUNSLR <<< "$ORGARG"
				if [ "$ORGARG" == "--" ]; then
					FOUNDSLR=1
				fi
			else
				mapfile -t -O "${#ORGGCMD[@]}" ORGGCMD <<< "$ORGARG"
			fi
		done <<< "$(printf "%s\n" "$@")"
	else
		while read -r ORGARG; do
			mapfile -t -O "${#ORGGCMD[@]}" ORGGCMD <<< "$ORGARG"
		done <<< "$(printf "%s\n" "$@")"	
	fi
}

function checkZenity {
	if [ "$USEGUI" == "$ZENITY" ]; then
		if [ -x "$(command -v "$("$WHICH" "$ZENITY" 2>/dev/null)" 2>/dev/null)" ]; then
				ZENBIN="$("$WHICH" "$ZENITY" 2>/dev/null)"
			writelog "INFO" "${FUNCNAME[0]} - using '$ZENBIN' for the GUI"
		elif [ -x "$(command -v "$("$WHICH" "$YAD" 2>/dev/null)" 2>/dev/null)" ]; then
				writelog "WARN" "${FUNCNAME[0]} - '$USEGUI' is set to '$ZENITY', but it is not available - falling back to '$YAD'"
				ZENBIN="$("$WHICH" "$YAD" 2>/dev/null)"
		fi

		if [ -z "$ZENBIN" ]; then
			writelog "ERROR" "${FUNCNAME[0]} - no usable binary found for '$ZENITY' - this should not happen! Either install '$ZENITY' or '$YAD'"
			exit
		fi
	fi
}

function prepareGUI {
	if [ -n "$USEGUI" ]; then
		if [ "$USEGUI" == "$YAD" ]; then
			if [ -x "$(command -v "$YAD" 2>/dev/null)" ]; then
				writelog "INFO" "${FUNCNAME[0]} - using '$YAD' for the GUI"
			else
				writelog "WARN" "${FUNCNAME[0]} - USEGUI is set to '$USEGUI' but '$YAD' was not found - retrying with using '$ZENITY' instead - you should update your config"
				USEGUI="$ZENITY"
				"${FUNCNAME[0]}"
			fi
		elif [ "$USEGUI" == "$ZENITY" ]; then
			checkZenity
			writelog "INFO" "${FUNCNAME[0]} - using '$ZENBIN' for '$ZENITY'"
		else
			writelog "WARN" "${FUNCNAME[0]} - USEGUI '$USEGUI' is neither '$YAD' nor '$ZENITY' - make sure your config is correct"
			USEGUI="$YAD"
			"${FUNCNAME[0]}"
		fi
	fi

	WINDECO="--undecorated"

	if [ -n "$USEWINDECO" ]; then
		if [ "$USEWINDECO" -eq 1 ]; then
			WINDECO="--decorated"
		else
			WINDECO="--undecorated"
		fi
	fi
}

function createLanguageList {
	if [ "$(USEDLGLOBAL)" -ge 1 ]; then
		GLOBLANG="$GLDLSTLLANGDIR"
	else
		GLOBLANG="$GLOBALSTLLANGDIR"
	fi

	while read -r LANGPATH; do
		LANGFILE="$(basename "$LANGPATH")"
		mapfile -t -O "${#LangList[@]}" LangList <<< "$LANGFILE"
	done < <(find "$STLLANGDIR" -name "*.txt")

	if [ -d "$GLOBLANG" ]; then
	 	while read -r LANGPATH; do
			LANGFILE="$(basename "$LANGPATH")"
			mapfile -t -O "${#LangList[@]}" LangList <<< "$LANGFILE"
		done <  <(find "$GLOBLANG" -name "*.txt")
	fi
	
	LANGYADLIST="$(printf "!%s\n" "${LangList[@]//.txt/}" | sort -u | tr -d '\n' ;printf "\n")"
}

function gitPullStl {
	writelog "INFO" "${FUNCNAME[0]} - updating '$GLDLSTLDIR' from '$PROJECTPAGE'" "E"
	gitUpdate "$GLDLSTLDIR" "$PROJECTPAGE"
}

function loadLangFile {
	if [ -n "$1" ]; then
		LANGFILENAME="$1"
		if [ "$(USEDLGLOBAL)" -ge 1 ]; then
			GLOBLANG="$GLDLSTLLANGDIR"
		else
			if [ -z "$GLOBALSTLLANGDIR" ]; then
				GLOBLANG="$SYSTEMSTLCFGDIR/lang/"
			else
				GLOBLANG="$GLOBALSTLLANGDIR"
			fi
		fi

		if [ -f "$LANGFILENAME" ]; then
			writelog "INFO" "${FUNCNAME[0]} - loading commandline langfile"
			source "$LANGFILENAME"
			STLLANG="$(basename "$LANGFILENAME" | cut -d '.' -f1)"
			LAFI="$STLLANGDIR/${STLLANG}.txt"
			if [ ! -f "$LAFI" ]; then
				mkProjDir "$STLLANGDIR" 1
				cp "$LANGFILENAME" "$LAFI"
			fi
		else
			LAFI="$STLLANGDIR/${LANGFILENAME}.txt"

			if [ -f "$LAFI" ]; then
				writelog "INFO" "${FUNCNAME[0]} - loading user-installed $LAFI"
				source "$LAFI"
			else
				LAFI="$GLOBLANG/${LANGFILENAME}.txt"

				if [ -f "$LAFI" ]; then
					writelog "INFO" "${FUNCNAME[0]} - loading system wide $LAFI"
					source "$LAFI"
				else
					writelog "ERROR" "${FUNCNAME[0]} - language file '$LAFI' missing"
					echo "ERROR" "${FUNCNAME[0]} - language file '$LAFI' missing - downloading ' $PROJECTPAGE' and trying again"
					gitPullStl
					${FUNCNAME[0]}
				fi
			fi
		fi
	fi
}

function loadLanguage {
	writelog "INFO" "${FUNCNAME[0]} - first load the default language to make sure all variables are filled"
	loadLangFile "$STLDEFLANG"

	if [ -f "$STLDEFGLOBALCFG" ]; then
		STLLRAW="$(grep "^STLLANG" "$STLDEFGLOBALCFG" | cut -d '=' -f2)"
		STLLANG="${STLLRAW//\"/}"
	else
		ARGSLANG="$(awk -F 'lang=' '{print $2}' <<< "$@" | cut -d ' ' -f1)"
		if [ -n "$ARGSLANG" ]; then
			STLLANG="$ARGSLANG"
		fi
	fi
	if [ -n "$STLLANG" ]; then 
		if [ "$STLDEFLANG" != "$STLLANG" ]; then
			writelog "INFO" "${FUNCNAME[0]} - now load the language defined by the user"
			loadLangFile "$STLLANG"
		else
			writelog "SKIP" "${FUNCNAME[0]} - user defined language is the same as the default language - no need to load it again"
		fi
	fi
	
	if [ -z "$DESC_STLLANG" ]; then 
		echo "###############################"
		echo "ERROR - no language file could be loaded! For the initial setup at least one file (default english) is required"
		echo "ERROR - You can ether copy a valid file to '$STLLANGDIR' or '$SYSTEMSTLCFGDIR/lang' or provide an absolute path via command line using the lang= option" 
		echo "###############################"

		exit
	fi
}

function OVPROT {
	if [ -n "$OVERRIDEPROTON" ] && [ "$OVERRIDEPROTON" -eq 1 ]; then
		echo 1
	elif [ -n "$FORCEOVERRIDEPROTON" ] && [ "$FORCEOVERRIDEPROTON" -eq 1 ]; then
		echo 1
	else
		echo 0
	fi
}

function setProtonPathVersion {
	if [ -n "$1" ]; then
		PROTPATH="$1"
		CTVDF="$(dirname "$PROTPATH")/$CTVDF"
		PPV="$(dirname "$PROTPATH")/version"
		if [ -f "$CTVDF" ]; then
			PROTVOUT="$(grep "display_name" "$CTVDF" | grep -v "e.g." | sed "s:\" \":\";\":g" | cut -d ';' -f2)"
		elif [ -f "$PPV" ]; then
			PROTVOUT="$(awk '{print $2}' < "$PPV")"
		fi

		if [ -z "$PROTVOUT" ]; then
			# if no useful version was provided - hardcode it here:
			if grep -q "Proton 3.7" <<<"$PROTPATH"; then
				PROTVOUT="proton-3.7-8"
			else
			# fallback if everything fails - in the rare cases where this unknown proton version is used this might cause problems
			# if you need it open an issue and it will get a hardcoded entry as well
				PROTVOUT="proton-unknown-$((900 + RANDOM % 100))"
			fi
		fi

		writelog "INFO" "${FUNCNAME[0]} Setting the Proton Version for '$1' to '$PROTVOUT'"

		echo "$PROTVOUT"
	fi
}

function fillProtonCSV {
	if [ -n "$1" ];then
		protonfileV="$1"
	else
		protonfileV="$(setProtonPathVersion "$PROTBIN")"
	fi
	if [ -n "$protonfileV" ];then
		PCSV="\"${protonfileV//\"/}\";\"$PROTBIN\""
		mapfile -t -O "${#ProtonCSV[@]}" ProtonCSV <<< "$PCSV"
	fi
}

function getAvailableProtonVersions {
	PROTONCSV="$STLSHM/ProtonCSV.txt"
	unset ProtonList

	if [ ! -f "$PROTONCSV" ] || { [ -n "$1" ] &&  [ "$1" = "up" ]; }; then

		# user installed compatibilitytool:
		if [ -d "$STEAMCOMPATOOLS" ]; then
			while read -r PROTBIN; do
				fillProtonCSV
			done <<< "$(find "$STEAMCOMPATOOLS" -type f -name "proton")"	
		else
			writelog "SKIP" "${FUNCNAME[0]} - directory STEAMCOMPATOOLS '$STEAMCOMPATOOLS' not found - skipping"
		fi
		
		if [ -d "$SYSSTEAMCOMPATOOLS" ]; then
			while read -r PROTBIN; do
				fillProtonCSV
			done <<< "$(find "$SYSSTEAMCOMPATOOLS" -type f -name "proton")"
		else
			writelog "SKIP" "${FUNCNAME[0]} - directory SYSSTEAMCOMPATOOLS '$SYSSTEAMCOMPATOOLS' not found - skipping"
		fi
		
		# official proton versions installed via Steam in default SteamLibrary 
		if [ -d "$DEFSTEAMAPPSCOMMON" ]; then
			while read -r protondir; do
				PROTBIN="$protondir/proton"
				if [ -f "$PROTBIN" ]; then
					fillProtonCSV
				fi
			done <<< "$(find "$DEFSTEAMAPPS" -maxdepth 1 -maxdepth 1 -type d -name "Proton*")"	
		else
			writelog "SKIP" "${FUNCNAME[0]} - directory DEFSTEAMAPPS '$DEFSTEAMAPPSCOMMON' not found - this should not happen! - skipping"
		fi

		# official proton versions installed via Steam in additional SteamLibrary Paths
		if [ -f "$CFGVDF" ]; then
			while read -r protondir; do
				PROTBIN="$protondir/proton"
				if [ -f "$PROTBIN" ]; then
					fillProtonCSV
				fi
			done <<< "$(while read -r SLP; do find "${SLP//\"/}/$SAC" -maxdepth 1 -maxdepth 1 -type d -name "Proton*"; done <<< "$(grep "BaseInstallFolder" "$CFGVDF" | awk '{print $2}')")"
		else
			writelog "SKIP" "${FUNCNAME[0]} - file CFGVDF '$CFGVDF' not found - this should not happen! - skipping"
		fi

		# custom Proton List:
		if [ -f "$CUSTOMPROTONLIST" ]; then
			awk -i inplace '!visited[$0]++' "$CUSTOMPROTONLIST"

			while read -r PROTLINE; do
				writelog "INFO" "${FUNCNAME[0]} - checking line '$PROTLINE' in '$CUSTOMPROTONLIST'"

				if grep -q ";" <<< "$PROTLINE"; then
					PROTBIN="$(cut -d ';' -f2 <<< "$PROTLINE")"
					PROTVERS="$(cut -d ';' -f1 <<< "$PROTLINE")"
					writelog "INFO" "${FUNCNAME[0]} - adding '$PROTVERS' to the list"
					fillProtonCSV "$PROTVERS"
				elif [ -f "$PROTLINE" ]; then
					writelog "INFO" "${FUNCNAME[0]} - file '$PROTLINE' exists - adding it to the list"
					PROTBIN="$PROTLINE"
					fillProtonCSV
				else
					writelog "INFO" "${FUNCNAME[0]} - removing invalid line '$PROTLINE' from '$CUSTOMPROTONLIST'"
					mapfile -t -O "${#ProtonMissing[@]}" ProtonMissing <<< "$PROTLINE"
				fi
			done <<< "$(grep -v "^#" "$CUSTOMPROTONLIST")"

			# remove files from custom list which do not exist (anymore)
			if [ -n "${ProtonMissing[0]}" ]; then
				while read -r NOPROT; do
					sed "/${NOPROT//\//\\/}/d" -i "$CUSTOMPROTONLIST"
				done <<< "$(printf "%s\n" "${ProtonMissing[@]}")"
				unset ProtonMissing
			fi
		fi
	else
		mapfile -t -O "${#ProtonCSV[@]}" ProtonCSV < "$PROTONCSV"
	fi

	printf "%s\n" "${ProtonCSV[@]//\"/}" > "$PROTONCSV"
	awk -i inplace '!visited[$0]++' "$PROTONCSV"
}


function calculateDefaultResolutions {

	function useFallBackResolution {
		DUMMYSCREENWIDTH=1920
		DUMMYSCREENHEIGHT=1080
		writelog "WARN" "${FUNCNAME[0]} - calculating with fallback screenresolution '${DUMMYSCREENWIDTH}x${DUMMYSCREENHEIGHT}' for default values"
		SCREENWIDTH="$DUMMYSCREENWIDTH"
		SCREENHEIGHT="$DUMMYSCREENHEIGHT"		
	}

	SCREENRES="$("$XRANDR" --current | grep "\*" | awk '{print $1}' | sort -gur | head -n1)"
	writelog "INFO" "${FUNCNAME[0]} - '$XRANDR' found screenresolution '$SCREENRES'" "X"
	SCREENWIDTH="${SCREENRES%x*}"
	SCREENHEIGHT="${SCREENRES#*x}"

	if [ -n "${SCREENWIDTH##*[!0-9]*}" ] && [ -n "${SCREENHEIGHT##*[!0-9]*}" ]; then
		writelog "INFO" "${FUNCNAME[0]} - found Screen Width '$SCREENWIDTH' and Screen Height '$SCREENHEIGHT'" "X"
	else
		writelog "WARN" "${FUNCNAME[0]} - '$SCREENRES' is invalid - calculating with fallback screenresolution for default values"
		useFallBackResolution
	fi

	# Scaling factors in percentage, used to calculate the initial gui sizes depending on the screen resolution:
	SETSCALE=80
	EDREQSCALE=20
	SHADREQSCALE=20
	ASKSETREQSCALE=15
	AETREQSCALE=40
	ALTREQSCALE=40
	AVSREQSCALE=15
	CATREQSCALE=30
	CUSTPROGREQSCALE=30
	CUSTPROTREQSCALE=15
	SEREQSCALE=40
	LAUNCHERSCALE=30

	# Calculated initial gui sizes:
	DEFSETWIDTH=$(( SCREENWIDTH * SETSCALE / 100 ));
	DEFSETHEIGHT=$(( SCREENHEIGHT * SETSCALE / 100 ));

	DEFEDREQWIDTH=$(( SCREENWIDTH * EDREQSCALE / 100 ));
	DEFEDREQHEIGHT=$(( SCREENHEIGHT * EDREQSCALE / 100 ));

	DEFSHADREQWIDTH=$(( SCREENWIDTH * SHADREQSCALE / 100 ));
	DEFSHADREQHEIGHT=$(( SCREENHEIGHT * SHADREQSCALE / 100 ));

	DEFASKSETREQWIDTH=$(( SCREENWIDTH * ASKSETREQSCALE / 100 ));
	DEFASKSETREQHEIGHT=$(( SCREENHEIGHT * ASKSETREQSCALE / 100 ));
		
	DEFAETREQWIDTH=$(( SCREENWIDTH * AETREQSCALE / 100 ));
	DEFAETREQHEIGHT=$(( SCREENHEIGHT * AETREQSCALE / 100 ));

	DEFALTREQWIDTH=$(( SCREENWIDTH * ALTREQSCALE / 100 ));
	DEFALTREQHEIGHT=$(( SCREENHEIGHT * ALTREQSCALE / 100 ));

	DEFCATREQWIDTH=$(( SCREENWIDTH * CATREQSCALE / 100 ));
	DEFCATREQHEIGHT=$(( SCREENHEIGHT * CATREQSCALE / 100 ));

	DEFCUSTPROGREQWIDTH=$(( SCREENWIDTH * CUSTPROGREQSCALE / 100 ));
	DEFCUSTPROGREQHEIGHT=$(( SCREENHEIGHT * CUSTPROGREQSCALE / 100 ));

	DEFCUSTPROTREQWIDTH=$(( SCREENWIDTH * CUSTPROTREQSCALE / 100 ));
	DEFCUSTPROTREQHEIGHT=$(( SCREENHEIGHT * CUSTPROTREQSCALE / 100 ));

	DEFAVSREQWIDTH=$(( SCREENWIDTH * AVSREQSCALE / 100 ));
	DEFAVSREQHEIGHT=$(( SCREENHEIGHT * AVSREQSCALE / 100 ));
	
	DEFSEREQWIDTH=$(( SCREENWIDTH * SEREQSCALE / 100 ));
	DEFSEREQHEIGHT=$(( SCREENHEIGHT * SEREQSCALE / 100 ));

	DEFLAUNCHERWIDTH=$(( SCREENWIDTH * LAUNCHERSCALE / 100 ));
	DEFLAUNCHERHEIGHT=$(( SCREENHEIGHT * LAUNCHERSCALE / 100 ));
}

function setDefaultCfgValues {

	function setDefaultCfgValuesurl {
		if [ -z "$PROJECTPAGE" ]		; then	PROJECTPAGE="https://github.com/frostworx/steamtinkerlaunch"; fi
		if [ -z "$CP_PROTOLAURL" ]		; then	CP_PROTOLAURL="https://github.com/Patola/wine/releases"; fi
		if [ -z "$CP_PROTONTKG" ]		; then	CP_PROTONTKG="https://github.com/Frogging-Family/wine-tkg-git/releases"; fi
		if [ -z "$CP_PROTONGE" ]		; then	CP_PROTONGE="https://github.com/GloriousEggroll/proton-ge-custom/releases"; fi
		if [ -z "$DL_D3D47_64" ]		; then	DL_D3D47_64="https://lutris.net/files/tools/dll/d3dcompiler_47.dll"; fi
		if [ -z "$DL_D3D47_32" ]		; then	DL_D3D47_32="http://dege.freeweb.hu/dgVoodoo2/D3DCompiler_47.zip"; fi
		if [ -z "$RESHADEDLURL" ]		; then	RESHADEDLURL="https://reshade.me/downloads"; fi
		if [ -z "$EDITORURL" ]			; then	EDITORURL="https://steamdb.info/app/AID/info"; fi
		if [ -z "$VORTEXURL" ]			; then	VORTEXURL="https://github.com/Nexus-Mods/Vortex/releases/download/v"; fi
		if [ -z "$DXVKURL" ]			; then	DXVKURL="https://github.com/doitsujin/dxvk"; fi
		if [ -z "$XLIVEURL" ]			; then	XLIVEURL="https://github.com/ThirteenAG/Ultimate-ASI-Loader/releases/download/v4.52/Ultimate-ASI-Loader.zip"; fi
		if [ -z "$PFDURL" ]				; then	PFDURL="https://github.com/simons-public/$PF.git"; fi
		if [ -z "$LUDURL" ]				; then	LUDURL="https://lutris.net/api/installers"; fi
		if [ -z "$PROTONISSUES" ]		; then	PROTONISSUES="https://github.com/ValveSoftware/Proton/issues"; fi
		if [ -z "$PIAPI" ]				; then	PIAPI="https://api.github.com/repos/ValveSoftware/Proton/issues"; fi
		if [ -z "$WMP10URL" ]			; then	WMP10URL="https://web.archive.org/web/20050303001123/http://download.microsoft.com/download/1/2/A/12A31F29-2FA9-4F50-B95D-E45EF7013F87"; fi
		if [ -z "$STASSURL" ]			; then	STASSURL="https://steamcdn-a.akamaihd.net/steam/apps"; fi
		if [ -z "$SHADER_DEPTH3D" ]		; then	SHADER_DEPTH3D="https://github.com/BlueSkyDefender/Depth3D.git"; fi
		if [ -z "$SHADER_FUBAX" ]		; then	SHADER_FUBAX="https://github.com/Fubaxiusz/fubax-shaders.git"; fi
		if [ -z "$SHADER_FUBAXDEV" ]	; then	SHADER_FUBAXDEV="https://github.com/Fubaxiusz/fubax-shaders-dev.git"; fi
		if [ -z "$SHADER_CROSIRE" ]		; then	SHADER_CROSIRE="https://github.com/crosire/reshade-shaders.git"; fi
	}

	function setDefaultCfgValuesgui {
	
		if [ ! -f "$STLGUICFG" ]		; then
			calculateDefaultResolutions
		fi

		if [ -z "$SETWIDTH" ]			; then	SETWIDTH="$DEFSETWIDTH"; fi
		if [ -z "$SETHEIGHT" ]			; then	SETHEIGHT="$DEFSETHEIGHT"; fi
		if [ -z "$EDREQWIDTH" ]			; then	EDREQWIDTH="$DEFEDREQWIDTH"; fi
		if [ -z "$EDREQHEIGHT" ]		; then	EDREQHEIGHT="$DEFEDREQHEIGHT"; fi
		if [ -z "$SHADREQWIDTH" ]		; then	SHADREQWIDTH="$DEFSHADREQWIDTH"; fi
		if [ -z "$SHADREQHEIGHT" ]		; then	SHADREQHEIGHT="$DEFSHADREQHEIGHT"; fi
		if [ -z "$ASKSETREQWIDTH" ]		; then	ASKSETREQWIDTH="$DEFASKSETREQWIDTH"; fi
		if [ -z "$ASKSETREQHEIGHT" ]	; then	ASKSETREQHEIGHT="$DEFASKSETREQHEIGHT"; fi
		if [ -z "$AETREQWIDTH" ]		; then	AETREQWIDTH="$DEFAETREQWIDTH"; fi
		if [ -z "$AETREQHEIGHT" ]		; then	AETREQHEIGHT="$DEFAETREQHEIGHT"; fi
		if [ -z "$ALTREQWIDTH" ]		; then	ALTREQWIDTH="$DEFALTREQWIDTH"; fi
		if [ -z "$ALTREQHEIGHT" ]		; then	ALTREQHEIGHT="$DEFALTREQHEIGHT"; fi
		if [ -z "$AVSREQWIDTH" ]		; then	AVSREQWIDTH="$DEFAVSREQWIDTH"; fi
		if [ -z "$AVSREQHEIGHT" ]		; then	AVSREQHEIGHT="$DEFAVSREQHEIGHT"; fi
		if [ -z "$CATREQWIDTH" ]		; then	CATREQWIDTH="$DEFCATREQWIDTH"; fi
		if [ -z "$CATREQHEIGHT" ]		; then	CATREQHEIGHT="$DEFCATREQHEIGHT"; fi
		if [ -z "$CUSTPROGREQWIDTH" ]	; then	CUSTPROGREQWIDTH="$DEFCUSTPROGREQWIDTH"; fi
		if [ -z "$CUSTPROGREQHEIGHT" ]	; then	CUSTPROGREQHEIGHT="$DEFCUSTPROGREQHEIGHT"; fi
		if [ -z "$CUSTPROTREQWIDTH" ]	; then	CUSTPROTREQWIDTH="$DEFCUSTPROTREQWIDTH"; fi
		if [ -z "$CUSTPROTREQHEIGHT" ]	; then	CUSTPROTREQHEIGHT="$DEFCUSTPROTREQHEIGHT"; fi
		if [ -z "$SEREQWIDTH" ]			; then	SEREQWIDTH="$DEFSEREQWIDTH"; fi
		if [ -z "$SEREQHEIGHT" ]		; then	SEREQHEIGHT="$DEFSEREQHEIGHT"; fi
		if [ -z "$LAUNCHERWIDTH" ]		; then	LAUNCHERWIDTH="$DEFLAUNCHERWIDTH"; fi
		if [ -z "$LAUNCHERHEIGHT" ]		; then	LAUNCHERHEIGHT="$DEFLAUNCHERHEIGHT"; fi
	}

	function setDefaultCfgValuesglobal {
		if [ -z "$DLGLOBAL" ]			; then	DLGLOBAL="1"; fi
		if [ -z "$STLLANG" ]			; then	STLLANG="$STLDEFLANG"; fi
		if [ -z "$USESTLCSS" ]			; then	USESTLCSS="0"; fi
		if [ -z "$AUTOTWEAKS" ]			; then	AUTOTWEAKS="$AUTOTWEAKPLATFORMS"; fi
		if [ -z "$STRACEDIR" ]			; then	STRACEDIR="$LOGDIR"; fi
		if [ -z "$LOGDIR" ]				; then	LOGDIR="$LOGDIR"; fi
		if [ -z "$LOGLEVEL" ]			; then	LOGLEVEL="2"; fi
		if [ -z "$STLEDITOR" ]			; then	STLEDITOR="$("$WHICH" geany 2>/dev/null)"; fi
		if [ -z "$MAXASK" ]				; then	MAXASK="3"; fi
		if [ -z "$BROWSER" ]			; then	BROWSER="$("$WHICH" firefox 2>/dev/null)"; fi
		if [ -z "$NOTY" ]				; then	NOTY="$("$WHICH" notify-send 2>/dev/null)"; fi
		if [ -z "$USENOTIFIER" ]		; then	USENOTIFIER="1"; fi
		if [ -z "$NETMON" ]				; then	NETMON="$("$WHICH" netstat 2>/dev/null)"; fi
		if [ -z "$NETOPTS" ]			; then	NETOPTS="-taucp -W"; fi
		if [ -z "$NETMONDIR" ]			; then	NETMONDIR="$LOGDIR"; fi
		if [ -z "$VRVIDEOPLAYER" ]		; then	VRVIDEOPLAYER="$("$WHICH" vr-video-player 2>/dev/null)"; fi
		if [ -z "$CREATETWEAKS" ]		; then	CREATETWEAKS="1"; fi
		if [ -z "$GAMCON" ]				; then	GAMCON="/usr/share/gameconqueror/GameConqueror.py"; fi
		if [ -z "$ATVALIDATE" ]			; then	ATVALIDATE="2"; fi
		if [ -z "$GLOBALREGDIR" ]		; then	GLOBALREGDIR="$SYSTEMSTLCFGDIR/regs"; fi
		if [ -z "$GLOBALTWEAKDIR" ]		; then	GLOBALTWEAKDIR="$SYSTEMSTLCFGDIR/tweaks"; fi
		if [ -z "$GLOBALSBSTWEAKDIR" ]	; then	GLOBALSBSTWEAKDIR="$SYSTEMSTLCFGDIR/tweaks/sbs"; fi
		if [ -z "$GLOBALUSERTWEAKDIR" ]	; then	GLOBALUSERTWEAKDIR="$SYSTEMSTLCFGDIR/tweaks/user"; fi		
		if [ -z "$GLOBALTWEAKCMDDIR" ]	; then	GLOBALTWEAKCMDDIR="$SYSTEMSTLCFGDIR/tweaks/cmd"; fi
		if [ -z "$GLOBALCATEGORYDIR" ]	; then	GLOBALCATEGORYDIR="$SYSTEMSTLCFGDIR/categories"; fi
		if [ -z "$GLOBALMISCDIR" ]		; then	GLOBALMISCDIR="$SYSTEMSTLCFGDIR/misc"; fi
		if [ -z "$GLOBALSTLLANGDIR" ]	; then	GLOBALSTLLANGDIR="$SYSTEMSTLCFGDIR/lang"; fi
		if [ -z "$BOXTRONCMD" ]			; then	BOXTRONCMD="/usr/share/boxtron/run-dosbox"; fi
		if [ -z "$BOXTRONARGS" ]		; then	BOXTRONARGS="--wait-before-run"; fi
		if [ -z "$ROBERTACMD" ]			; then	ROBERTACMD="$STEAMCOMPATOOLS/roberta/run-vm"; fi
		if [ -z "$ROBERTAARGS" ]		; then	ROBERTAARGS="--wait-before-run"; fi
		if [ -z "$LUXTORPEDACMD" ]		; then	LUXTORPEDACMD="$STEAMCOMPATOOLS/luxtorpeda/luxtorpeda"; fi
		if [ -z "$LUXTORPEDAARGS" ]		; then	LUXTORPEDAARGS="wait-before-run"; fi
		if [ -z "$RSVERS" ]				; then	RSVERS="4.8.1"; fi
		if [ -z "$DOWNLOAD_RESHADE" ]	; then	DOWNLOAD_RESHADE="1"; fi
		if [ -z "$RESHADESRCDIR" ]		; then	RESHADESRCDIR="$STLDLDIR/reshade"; fi
		if [ -z "$RS_D3D47_64" ]		; then	RS_D3D47_64="d3dcompiler_47_64.dll"; fi
		if [ -z "$RS_D3D47_32" ]		; then	RS_D3D47_32="d3dcompiler_47_32.dll"; fi
		if [ -z "$RS_64" ]				; then	RS_64="ReShade64.dll"; fi
		if [ -z "$RS_32" ]				; then	RS_32="ReShade32.dll"; fi
		if [ -z "$SHADERBLACKLIST" ]	; then	SHADERBLACKLIST="empty"; fi
		if [ -z "$DLSHADER" ]			; then	DLSHADER="1"; fi
		if [ -z "$SAVESETSIZE" ]		; then	SAVESETSIZE="1"; fi
		if [ -z "$GAMETABCOLS" ]		; then	GAMETABCOLS="3"; fi
		if [ -z "$GLOBTABCOLS" ]		; then	GLOBTABCOLS="3"; fi
		if [ -z "$RESHTABCOLS" ]		; then	RESHTABCOLS="1"; fi
		if [ -z "$VORTTABCOLS" ]		; then	VORTTABCOLS="1"; fi
		if [ -z "$USEGUI" ]				; then	USEGUI="$YAD"; fi
		if [ -z "$USEWINDECO" ]			; then	USEWINDECO="0"; fi
		if [ -z "$USETRAYICON" ]		; then	USETRAYICON="1"; fi
		if [ -z "$USEGAMEPICS" ]		; then	USEGAMEPICS="1"; fi
		if [ -z "$USEGAMEPICINMENU" ]	; then	USEGAMEPICINMENU="1"; fi
		if [ -z "$DLGAMEDATA" ]			; then	DLGAMEDATA="1"; fi
		if [ -z "$AUTOLASTPROTON" ]		; then	AUTOLASTPROTON="1"; fi
		if [ -z "$AUTOPULLPROTON" ]		; then	AUTOPULLPROTON="1"; fi
		if [ -z "$CUSTPROTDLDIR" ]		; then	CUSTPROTDLDIR="$STLDLDIR/$PROCU"; fi
		if [ -z "$CUSTPROTEXTDIR" ]		; then	CUSTPROTEXTDIR="$STLCFGDIR/$PROCU"; fi
		if [ -z "$MANGOHUD_LIB" ]		  ; then	MANGOHUD_LIB="/usr/lib/mangohud/lib/"; fi
		if [ -z "$MANGOHUD_LIB32" ]		; then	MANGOHUD_LIB32="/usr/lib/mangohud/lib32/"; fi
	}

	function setDefaultCfgValuesdefault_template {
		if [ -z "$USESLR" ]				; then	USESLR="1"; fi
		if [ -z "$USEPROTON" ]			; then	USEPROTON="$(getDefaultProton)"; fi
		if [ -z "$OVERRIDEPROTON" ]		; then	OVERRIDEPROTON="0"; fi
		if [ -z "$RUN_CUSTOMCMD" ]		; then	RUN_CUSTOMCMD="0"; fi
		if [ -z "$CUSTOMCMD" ]			; then	CUSTOMCMD="$("$WHICH" echo 2>/dev/null)"; fi
		if [ -z "$CUSTOMCMD_ARGS" ]		; then	CUSTOMCMD_ARGS="none"; fi
		if [ -z "$ONLY_CUSTOMCMD" ]		; then	ONLY_CUSTOMCMD="0";	fi
		if [ -z "$FORK_CUSTOMCMD" ]		; then	FORK_CUSTOMCMD="0";	fi
		if [ -z "$GAMEARGS" ]			; then	GAMEARGS="none"; fi
		if [ -z "$USEGAMEMODERUN" ]		; then	USEGAMEMODERUN="0";	fi
		if [ -z "$USEGAMESCOPE" ]		; then	USEGAMESCOPE="0";	fi
		if [ -z "$GAMESCOPE_ARGS" ]		; then	GAMESCOPE_ARGS="--";	fi
		if [ -z "$MANGOHUD" ]			; then	MANGOHUD="0";	fi
		if [ -z "$MANGOHUD_DLSYM" ]			; then	MANGOHUD_DLSYM="0";	fi
		if [ -z "$MANGOHUDARCH" ]			; then	MANGOHUDARCH="x86-64";	fi
		if [ -z "$ENABLE_VKBASALT" ]	; then	ENABLE_VKBASALT="0"; fi
		if [ -z "$RUN_NYRNA" ]			; then	RUN_NYRNA="0"; fi
		if [ -z "$RUN_REPLAY" ]			; then	RUN_REPLAY="0";	fi
		if [ -z "$RUN_GAMCON" ]			; then	RUN_GAMCON="0";	fi
		if [ -z "$GAMCONWAITEXE" ]		; then	GAMCONWAITEXE="$("$WHICH" echo 2>/dev/null)"; fi
		if [ -z "$VORTEXMODE" ]			; then	VORTEXMODE="disabled";	fi
		if [ -z "$CHANGE_PULSE_LATENCY" ] 	; then	CHANGE_PULSE_LATENCY="0"; fi
		if [ -z "$STL_PULSE_LATENCY_MSEC" ]	; then	STL_PULSE_LATENCY_MSEC="60"; fi
		if [ -z "$TOGGLEWINDOWS" ]		; then	TOGGLEWINDOWS="0"; fi
		if [ -z "$RUN_WINETRICKS" ]		; then	RUN_WINETRICKS="0"; fi
		if [ -z "$WINETRICKSPAKS" ]		; then	WINETRICKSPAKS="none"; fi
		if [ -z "$RUN_WINECFG" ]		; then	RUN_WINECFG="0"; fi
		if [ -z "$VIRTUALDESKTOP" ]		; then	VIRTUALDESKTOP="0"; fi
		if [ -z "$USEBOXTRON" ]			; then	USEBOXTRON="0"; fi
		if [ -z "$USEROBERTA" ]			; then	USEROBERTA="0"; fi
		if [ -z "$USELUXTORPEDA" ]		; then	USELUXTORPEDA="0"; fi
		if [ -z "$REGEDIT" ]			; then	REGEDIT="0"; fi
		if [ -z "$INSTALL_RESHADE" ]	; then	INSTALL_RESHADE="0"; fi
		if [ -z "$RESHADE_DEPTH3D" ]	; then	RESHADE_DEPTH3D="0"; fi
		if [ -z "$USERESHADE" ]			; then	USERESHADE="0"; fi
		if [ -z "$CHOOSESHADERS" ]		; then	CHOOSESHADERS="0"; fi
		if [ -z "$ALTEXEPATH" ]			; then	ALTEXEPATH="empty"; fi
		if [ -z "$RUNSBSVR" ]			; then	RUNSBSVR="0"; fi
		if [ -z "$VRVIDEOPLAYERARGS" ]	; then	VRVIDEOPLAYERARGS="--flat"; fi
		if [ -z "$SBSZOOM" ]			; then	SBSZOOM="1.0"; fi
		if [ -z "$SBSVRVK" ]			; then	SBSVRVK="0"; fi
		if [ -z "$SBSVRRS" ]			; then	SBSVRRS="0"; fi
		if [ -z "$MINVRWINH" ] 			; then	MINVRWINH="640"; fi
		if [ -z "$WAITFORTHISPID" ]		; then	WAITFORTHISPID="empty"; fi
		if [ -z "$GAMEWINDOW" ]			; then	GAMEWINDOW="empty"; fi
		if [ -z "$WAITEDITOR" ]			; then	WAITEDITOR="2"; fi
		if [ -z "$OPENEDITORURL" ]		; then	OPENEDITORURL="0"; fi
		if [ -z "$ATVALIDATE" ]			; then	ATVALIDATE="0"; fi
		if [ -z "$ATADOPT" ]			; then	ATADOPT="0"; fi
		if [ -z "$IGNOREAUTOTWEAKS" ]	; then	IGNOREAUTOTWEAKS="1"; fi
		if [ -z "$CHECKCATEGORIES" ]	; then	CHECKCATEGORIES="1"; fi
		if [ -z "$STRACERUN" ]			; then	STRACERUN="0"; fi
		if [ -z "$STRACEOPTS" ]			; then	STRACEOPTS="-f -t -e trace=file"; fi
		if [ -z "$USENETMON" ]			; then	USENETMON="0"; fi
		if [ -z "$DXVK_HUD" ]			; then	DXVK_HUD="0"; fi
		if [ -z "$DXVK_LOG_LEVEL" ]		; then	DXVK_LOG_LEVEL="none"; fi
		if [ -z "$PROTON_LOG" ]			; then	PROTON_LOG="0"; fi
		if [ -z "$PROTON_DEBUG_DIR" ]	; then	PROTON_DEBUG_DIR="/tmp"; fi
		if [ -z "$PROTON_USE_WINED3D" ]	; then	PROTON_USE_WINED3D="0"; fi
		if [ -z "$PROTON_NO_D3D11" ]	; then	PROTON_NO_D3D11="0"; fi
		if [ -z "$PROTON_NO_D3D10" ]	; then	PROTON_NO_D3D10="0"; fi
		if [ -z "$PROTON_NO_ESYNC" ]	; then	PROTON_NO_ESYNC="0"; fi
		if [ -z "$PROTON_NO_FSYNC" ]	; then	PROTON_NO_FSYNC="0"; fi
		if [ -z "$PROTON_FORCE_LARGE_ADDRESS_AWARE" ]; then	PROTON_FORCE_LARGE_ADDRESS_AWARE="1"; fi	
		if [ -z "$PROTON_DUMP_DEBUG_COMMANDS" ]	; then	PROTON_DUMP_DEBUG_COMMANDS="0"; fi
		if [ -z "$WINE_FULLSCREEN_INTEGER_SCALING" ]; then	WINE_FULLSCREEN_INTEGER_SCALING="0"; fi
		if [ -z "$USERSTART" ]			; then	USERSTART="$("$WHICH" echo 2>/dev/null)"; fi
		if [ -z "$USERSTOP" ]			; then	USERSTOP="$("$WHICH" echo 2>/dev/null)"; fi
	}

	function setDefaultCfgValuesvortex {
		if [ -z "$VORTEXWINE" ]			; then	VORTEXWINE="$(dirname "$(getNOP "p")")/$DBW"; fi
		if [ -z "$VORTEXPREFIX" ]		; then	VORTEXPREFIX="$STLVORTEXDIR/wineprefix"; fi
		if [ -z "$VORTEXWINEDEBUG" ]	; then	VORTEXWINEDEBUG="-all"; fi
		if [ -z "$VORTEX_DXVK_LOG_LEVEL" ]	; then	VORTEX_DXVK_LOG_LEVEL="none"; fi
		if [ -z "$VORTEX_DXVK_LOG_PATH" ]	; then	VORTEX_DXVK_LOG_PATH="none"; fi
		if [ -z "$VORTEXDOWNLOADPATH" ]	; then	VORTEXDOWNLOADPATH="$STLVORTEXDIR/downloads"; fi
		if [ -z "$VORTEXINSTALL" ]		; then	VORTEXINSTALL="1"; fi
		if [ -z "$VORTEXVERSION" ]		; then	VORTEXVERSION="1.3.13"; fi
		if [ -z "$DISABLE_AUTOSTAGES" ]	; then	DISABLE_AUTOSTAGES="0"; fi
	}
	
	"${FUNCNAME[0]}$1"
}

function saveCfg {

	function saveCfgurl {

		setDefaultCfgValues "$2"
		
		if [ -f "$1" ]; then
			updateConfigFile "$1" "${FUNCNAME[0]}" "$3"
		else
			#STARTsaveCfgurl
			{
			echo "## config Version: $PROGVERS"
			echo "##########################"
			echo "## Url Config:"
			echo "##########################"
			echo "PROJECTPAGE=\"$PROJECTPAGE\""
			echo "##########################"
			echo "## Protola Proton DL URL"
			echo "CP_PROTOLAURL=\"$CP_PROTOLAURL\""
			echo "## Proton GE DL URL"
			echo "CP_PROTONGE=\"$CP_PROTONGE\""
			echo "## Proton TKG DL URL"
			echo "CP_PROTONTKG=\"$CP_PROTONTKG\""
			echo "## d3d47 64bit DL URL "
			echo "DL_D3D47_64=\"$DL_D3D47_64\""
			echo "## d3d47 32bit DL URL"
			echo "DL_D3D47_32=\"$DL_D3D47_32\""
			echo "## Dxvk Project URL"
			echo "DXVKURL=\"$DXVKURL\""				
			echo "## Lutris Installers Url"
			echo "LUDURL=\"$LUDURL\""
			echo "## ReShade DL URL"
			echo "RESHADEDLURL=\"$RESHADEDLURL\""
			echo "## Protonfixes Project URL"
			echo "PFDURL=\"$PFDURL\""
			echo "## Proton Issues API URL"
			echo "PIAPI=\"$PIAPI\""
			echo "## Proton Issues URL"
			echo "PROTONISSUES=\"$PROTONISSUES\""
			echo "## Editor URL"
			echo "EDITORURL=\"$EDITORURL\""
			echo "## Vortex DL URL"
			echo "VORTEXURL=\"$VORTEXURL\""
			echo "## Xlive DL URL"
			echo "XLIVEURL=\"$XLIVEURL\""
			echo "## WMP10 DL URL"
			echo "WMP10URL=\"$WMP10URL\""
			echo "## Steam Asset URL"
			echo "STASSURL=\"$STASSURL\""
			echo "## Depth3D Shader URL"
			echo "SHADER_DEPTH3D=\"$SHADER_DEPTH3D\""
			echo "## Fubax Shader URL"
			echo "SHADER_FUBAX=\"$SHADER_FUBAX\""
			echo "## Fubax Dev Shader URL"
			echo "SHADER_FUBAXDEV=\"$SHADER_FUBAXDEV\""
			echo "## Crosire Shader URL"
			echo "SHADER_CROSIRE=\"$SHADER_CROSIRE\""
                        echo "## MangoHud library directory for x86-64 games"
                        echo "MANGOHUD_LIB=\"$MANGOHUD_LIB\""
                        echo "## MangoHud library directory for x86 games"
                        echo "MANGOHUD_LIB32=\"$MANGOHUD_LIB32\""
			} >> "$1"
			#ENDsaveCfgurl
		fi
	}
	
	function saveCfggui {

		setDefaultCfgValues "$2"
		
		if [ -f "$1" ]; then
			updateConfigFile "$1" "${FUNCNAME[0]}" "$3"
		else
			#STARTsaveCfggui
			{
			echo "## config Version: $PROGVERS"
			echo "##########################"
			echo "## Settings GUI:"
			echo "SETWIDTH=\"$SETWIDTH\""
			echo "SETHEIGHT=\"$SETHEIGHT\""
			echo "## Editor Requester:"
			echo "EDREQWIDTH=\"$EDREQWIDTH\""
			echo "EDREQHEIGHT=\"$EDREQHEIGHT\""
			echo "## Shader Selection Requester:"
			echo "SHADREQWIDTH=\"$SHADREQWIDTH\""
			echo "SHADREQHEIGHT=\"$SHADREQHEIGHT\""
			echo "## Ask Open Settings Requester:"
			echo "ASKSETREQWIDTH=\"$ASKSETREQWIDTH\""
			echo "ASKSETREQHEIGHT=\"$ASKSETREQHEIGHT\""
			echo "## Edit Tweak Requester:"
			echo "AETREQWIDTH=\"$AETREQWIDTH\""
			echo "EDREQHEIGHT=\"$EDREQHEIGHT\""
			echo "## Load Tweak Requester:"
			echo "ALTREQWIDTH=\"$ALTREQWIDTH\""
			echo "ALTREQHEIGHT=\"$ALTREQHEIGHT\""
			echo "## Add Vortex Stage Requester:"
			echo "AVSREQWIDTH=\"$AVSREQWIDTH\""
			echo "AVSREQHEIGHT=\"$AVSREQHEIGHT\""
			echo "## Convert Tweak Requester:"
			echo "CATREQWIDTH=\"$CATREQWIDTH\""
			echo "CATREQHEIGHT=\"$CATREQHEIGHT\""
			echo "## Custom Program Requester:"
			echo "CUSTPROGREQWIDTH=\"$CUSTPROGREQWIDTH\""
			echo "CUSTPROGREQHEIGHT=\"$CUSTPROGREQHEIGHT\""
			echo "CUSTPROTREQWIDTH=\"$CUSTPROTREQWIDTH\""
			echo "CUSTPROTREQHEIGHT=\"$CUSTPROTREQHEIGHT\""
			echo "## Script Extender Requester:"
			echo "SEREQWIDTH=\"$SEREQWIDTH\""
			echo "SEREQHEIGHT=\"$SEREQHEIGHT\""
			echo "## Game Launcher:"
			echo "LAUNCHERWIDTH=\"$LAUNCHERWIDTH\""
			echo "LAUNCHERHEIGHT=\"$LAUNCHERHEIGHT\""
			} >> "$1"
			#ENDsaveCfggui
		fi
	}

	function saveCfgglobal {

		setDefaultCfgValues "$2"

		if [ -f "$1" ]; then
			updateConfigFile "$1" "${FUNCNAME[0]}" "$3"
		else
			#STARTsaveCfgglobal
			{
			echo "## config Version: $PROGVERS"
			echo "##########################"
			echo "## $(strFix "$DESC_DLGLOBAL" "$PROGCMD" "$PROJECTPAGE")"
			echo "DLGLOBAL=\"$DLGLOBAL\""
			echo "## $DESC_STLLANG"
			echo "STLLANG=\"$STLLANG\""
			echo "## $DESC_USESTLCSS"
			echo "USESTLCSS=\"$USESTLCSS\""
			echo "## $DESC_AUTOTWEAKS"
			echo "AUTOTWEAKS=\"$AUTOTWEAKS\""
			echo "## $DESC_CUSTPROTDLDIR"
			echo "CUSTPROTDLDIR=\"$CUSTPROTDLDIR\""
			echo "## $DESC_CUSTPROTEXTDIR"
			echo "CUSTPROTEXTDIR=\"$CUSTPROTEXTDIR\""
			echo "## $DESC_AUTOPULLPROTON"
			echo "AUTOPULLPROTON=\"$AUTOPULLPROTON\""
			echo "## $DESC_AUTOLASTPROTON"
			echo "AUTOLASTPROTON=\"$AUTOLASTPROTON\""
			echo "## $DESC_STRACEDIR"
			echo "STRACEDIR=\"$STRACEDIR\""
			echo "## $(strFix "$DESC_LOGDIR" "$PROGNAME")"
			echo "LOGDIR=\"$LOGDIR\""
			echo "## $DESC_LOGLEVEL"
			echo "LOGLEVEL=\"$LOGLEVEL\""
			echo "## $DESC_STLEDITOR"
			echo "STLEDITOR=\"$STLEDITOR\""
			echo "## $DESC_MAXASK"
			echo "MAXASK=\"$MAXASK\""
			echo "## $DESC_BROWSER"
			echo "BROWSER=\"$BROWSER\""
			echo "## $DESC_USENOTIFIER"
			echo "USENOTIFIER=\"$USENOTIFIER\""
			echo "## $DESC_NOTY"
			echo "NOTY=\"$NOTY\""
			echo "## $DESC_NETMON"
			echo "NETMON=\"$NETMON\""
			echo "## $DESC_NETOPTS"
			echo "NETOPTS=\"$NETOPTS\""
			echo "## $DESC_NETMONDIR"
			echo "NETMONDIR=\"$NETMONDIR\""
			echo "## $DESC_VRVIDEOPLAYER"
			echo "VRVIDEOPLAYER=\"$VRVIDEOPLAYER\""
			echo "## $DESC_CREATETWEAKS"
			echo "CREATETWEAKS=\"$CREATETWEAKS\""
			echo "## $DESC_GAMCON"
			echo "GAMCON=\"$GAMCON\""
			echo "## $DESC_ATVALIDATE"
			echo "ATVALIDATE=\"$ATVALIDATE\""
			echo "## $DESC_GLOBALREGDIR"
			echo "GLOBALREGDIR=\"$GLOBALREGDIR\""
			echo "## $DESC_GLOBALTWEAKDIR"
			echo "GLOBALTWEAKDIR=\"$GLOBALTWEAKDIR\""
			echo "## $DESC_GLOBALSBSTWEAKDIR"
			echo "GLOBALSBSTWEAKDIR=\"$GLOBALSBSTWEAKDIR\""
			echo "## $DESC_GLOBALUSERTWEAKDIR"
			echo "GLOBALUSERTWEAKDIR=\"$GLOBALUSERTWEAKDIR\""
			echo "## $DESC_GLOBALTWEAKCMDDIR"
			echo "GLOBALTWEAKCMDDIR=\"$GLOBALTWEAKCMDDIR\""
			echo "## $DESC_GLOBALCATEGORYDIR"
			echo "GLOBALCATEGORYDIR=\"$GLOBALCATEGORYDIR\""
			echo "## $DESC_GLOBALMISCDIR"
			echo "GLOBALMISCDIR=\"$GLOBALMISCDIR\""
			echo "## $DESC_GLOBALSTLLANGDIR"
			echo "GLOBALSTLLANGDIR=\"$GLOBALSTLLANGDIR\""
			echo "## $DESC_BOXTRONCMD"
			echo "BOXTRONCMD=\"$BOXTRONCMD\""
			echo "## $DESC_BOXTRONARGS"
			echo "BOXTRONARGS=\"$BOXTRONARGS\""
			echo "## $DESC_ROBERTACMD"
			echo "ROBERTACMD=\"$ROBERTACMD\""
			echo "## $DESC_ROBERTAARGS"
			echo "ROBERTAARGS=\"$ROBERTAARGS\""
			echo "## $DESC_LUXTORPEDACMD"
			echo "LUXTORPEDACMD=\"$LUXTORPEDACMD\""
			echo "## $DESC_LUXTORPEDAARGS"
			echo "LUXTORPEDAARGS=\"$LUXTORPEDAARGS\""
			echo "## $DESC_DOWNLOAD_RESHADE"
			echo "DOWNLOAD_RESHADE=\"$DOWNLOAD_RESHADE\""
			echo "## $DESC_RSVERS"
			echo "RSVERS=\"$RSVERS\""
			echo "## $DESC_RESHADESRCDIR"
			echo "RESHADESRCDIR=\"$RESHADESRCDIR\""
			echo "## $DESC_RS_D3D47_64"
			echo "RS_D3D47_64=\"$RS_D3D47_64\""
			echo "## $DESC_RS_D3D47_32"
			echo "RS_D3D47_32=\"$RS_D3D47_32\""
			echo "## $DESC_RS_64"
			echo "RS_64=\"$RS_64\""
			echo "## $DESC_RS_32"
			echo "RS_32=\"$RS_32\""
			echo "## $DESC_SHADERBLACKLIST"
			echo "SHADERBLACKLIST=\"$SHADERBLACKLIST\""
			echo "## $DESC_DLSHADER"
			echo "DLSHADER=\"$DLSHADER\""
			echo "## $DESC_SAVESETSIZE"
			echo "SAVESETSIZE=\"$SAVESETSIZE\""
			echo "## $DESC_GAMETABCOLS"
			echo "GAMETABCOLS=\"$GAMETABCOLS\""
			echo "## $DESC_GLOBTABCOLS"
			echo "GLOBTABCOLS=\"$GLOBTABCOLS\""
			echo "## $DESC_VORTTABCOLS"
			echo "VORTTABCOLS=\"$VORTTABCOLS\""
			echo "## $DESC_USEGUI"
			echo "USEGUI=\"$USEGUI\""
			echo "## $DESC_USEWINDECO"
			echo "USEWINDECO=\"$USEWINDECO\""
			echo "## $DESC_USETRAYICON"
			echo "USETRAYICON=\"$USETRAYICON\""
			echo "## $DESC_USEGAMEPICS"
			echo "USEGAMEPICS=\"$USEGAMEPICS\""
			echo "## $DESC_USEGAMEPICINMENU"
			echo "USEGAMEPICINMENU=\"$USEGAMEPICINMENU\""
			echo "## $DESC_DLGAMEDATA"
			echo "DLGAMEDATA=\"$DLGAMEDATA\""
      echo "## MangoHud library directory for x86-64 games"
      echo "MANGOHUD_LIB=\"$MANGOHUD_LIB\""
      echo "## MangoHud library directory for x86 games"
      echo "MANGOHUD_LIB32=\"$MANGOHUD_LIB32\""
			} >> "$1"
			#ENDsaveCfgglobal
		fi
		updateEditor "$1"
	}

	function saveCfgdefault_template {

		setDefaultCfgValues "$2"

		if [ -f "$1" ]; then
			updateConfigFile "$1" "${FUNCNAME[0]}" "$3"
		else
			#STARTsaveCfgdefault_template
			{
			echo "## config Version: $PROGVERS"
			echo "##########################"
			echo "## $DESC_SLR"
			echo "USESLR=\"$USESLR\""
			echo "## $(strFix "$DESC_OVERRIDEPROTON" "$PROGCMD")"
			echo "OVERRIDEPROTON=\"$OVERRIDEPROTON\""
			echo "## $DESC_USEPROTON"
			echo "USEPROTON=\"$USEPROTON\""
			echo "## $DESC_RUN_CUSTOMCMD"
			echo "RUN_CUSTOMCMD=\"$RUN_CUSTOMCMD\""
			echo "## $DESC_CUSTOMCMD"
			echo "CUSTOMCMD=\"$CUSTOMCMD\""
			echo "## $DESC_CUSTOMCMD_ARGS"
			echo "CUSTOMCMD_ARGS=\"$CUSTOMCMD_ARGS\""
			echo "## $DESC_ONLY_CUSTOMCMD"
			echo "ONLY_CUSTOMCMD=\"$ONLY_CUSTOMCMD\""
			echo "## $DESC_FORK_CUSTOMCMD"
			echo "FORK_CUSTOMCMD=\"$FORK_CUSTOMCMD\""
			echo "## $DESC_GAMEARGS"
			echo "GAMEARGS=\"$GAMEARGS\""
			echo "## $DESC_USEGAMEMODERUN"
			echo "USEGAMEMODERUN=\"$USEGAMEMODERUN\""
			echo "## $DESC_USEGAMESCOPE"
			echo "USEGAMESCOPE=\"$USEGAMESCOPE\""
			echo "## $DESC_GAMESCOPE_ARGS"
			echo "GAMESCOPE_ARGS=\"$GAMESCOPE_ARGS\""
			echo "## $DESC_MANGOHUD"
			echo "MANGOHUD=\"$MANGOHUD\""
			echo "## $DESC_MANGOHUD_DLSYM"
			echo "MANGOHUD_DLSYM=\"$MANGOHUD_DLSYM\""
			echo "## $DESC_MANGOHUDARCH"
			echo "MANGOHUDARCH=\"$MANGOHUDARCH\""
			echo "## $DESC_ENABLE_VKBASALT"
			echo "ENABLE_VKBASALT=\"$ENABLE_VKBASALT\""
			echo "## $DESC_RUN_NYRNA"
			echo "RUN_NYRNA=\"$RUN_NYRNA\""
			echo "## $DESC_RUN_REPLAY"
			echo "RUN_REPLAY=\"$RUN_REPLAY\""
			echo "## $DESC_RUN_GAMCON"
			echo "RUN_GAMCON=\"$RUN_GAMCON\""
			echo "## $DESC_GAMCONWAITEXE"
			echo "GAMCONWAITEXE=\"$GAMCONWAITEXE\""
			echo "## $DESC_VORTEXMODE"
			echo "VORTEXMODE=\"$VORTEXMODE\""
			echo "## $DESC_CHANGE_PULSE_LATENCY"
			echo "CHANGE_PULSE_LATENCY=\"$CHANGE_PULSE_LATENCY\""
			echo "## $DESC_STL_PULSE_LATENCY_MSEC"
			echo "STL_PULSE_LATENCY_MSEC=\"$STL_PULSE_LATENCY_MSEC\""
			echo "## $DESC_TOGGLEWINDOWS"
			echo "TOGGLEWINDOWS=\"$TOGGLEWINDOWS\""
			echo "## $DESC_RUN_WINETRICKS"
			echo "RUN_WINETRICKS=\"$RUN_WINETRICKS\""
			echo "## $DESC_WINETRICKSPAKS"
			echo "WINETRICKSPAKS=\"$WINETRICKSPAKS\""
			echo "## $DESC_RUN_WINECFG"
			echo "RUN_WINECFG=\"$RUN_WINECFG\""
			echo "## $DESC_VIRTUALDESKTOP"
			echo "VIRTUALDESKTOP=\"$VIRTUALDESKTOP\""
			echo "## $DESC_USEBOXTRON"
			echo "USEBOXTRON=\"$USEBOXTRON\""
			echo "## $DESC_USEROBERTA"
			echo "USEROBERTA=\"$USEROBERTA\""
			echo "## $DESC_USELUXTORPEDA"
			echo "USELUXTORPEDA=\"0\""
			echo "## $DESC_REGEDIT"
			echo "REGEDIT=\"$REGEDIT\""
			echo "## $DESC_INSTALL_RESHADE"
			echo "INSTALL_RESHADE=\"$INSTALL_RESHADE\""
			echo "## $DESC_RESHADE_DEPTH3D"
			echo "RESHADE_DEPTH3D=\"$RESHADE_DEPTH3D\""
			echo "## $DESC_USERESHADE"
			echo "USERESHADE=\"$USERESHADE\""
			echo "## $DESC_CHOOSESHADERS"
			echo "CHOOSESHADERS=\"$CHOOSESHADERS\""
			echo "## $DESC_ALTEXEPATH"
			echo "ALTEXEPATH=\"$ALTEXEPATH\""
			echo "## $DESC_RUNSBSVR"
			echo "RUNSBSVR=\"$RUNSBSVR\""
			echo "## $DESC_VRVIDEOPLAYERARGS"
			echo "VRVIDEOPLAYERARGS=\"$VRVIDEOPLAYERARGS\""
			echo "## $DESC_SBSZOOM"
			echo "SBSZOOM=\"$SBSZOOM\""
			echo "## $DESC_SBSVRVK"
			echo "SBSVRVK=\"$SBSVRVK\""
			echo "## $DESC_SBSVRRS"
			echo "SBSVRRS=\"$SBSVRRS\""
			echo "## $DESC_MINVRWINH"
			echo "MINVRWINH=\"$MINVRWINH\""
			echo "## $DESC_WAITFORTHISPID"
			echo "WAITFORTHISPID=\"$WAITFORTHISPID\""
			echo "## $DESC_GAMEWINDOW"
			echo "GAMEWINDOW=\"$GAMEWINDOW\""
			echo "## $DESC_WAITEDITOR"
			echo "WAITEDITOR=\"$WAITEDITOR\""
			echo "## $DESC_OPENEDITORURL"
			echo "OPENEDITORURL=\"$OPENEDITORURL\""
			echo "## $DESC_ATVALIDATE"
			echo "ATVALIDATE=\"$ATVALIDATE\""
			echo "## $DESC_ATADOPT"
			echo "ATADOPT=\"$ATADOPT\""
			echo "## $DESC_IGNOREAUTOTWEAKS"
			echo "IGNOREAUTOTWEAKS=\"$IGNOREAUTOTWEAKS\""
			echo "## $DESC_CHECKCATEGORIES"
			echo "CHECKCATEGORIES=\"$CHECKCATEGORIES\""
			echo "## $(strFix "$DESC_DXVKVARS" "$DXVKURL")"
			echo "DXVK_HUD=\"$DXVK_HUD\""
			echo "## $DESC_DXVK_LOG_LEVEL"
			echo "DXVK_LOG_LEVEL=\"$DXVK_LOG_LEVEL\""
			echo "## $DESC_STRACERUN"
			echo "STRACERUN=\"$STRACERUN\""
			echo "## $DESC_STRACEOPTS"
			echo "STRACEOPTS=\"$STRACEOPTS\""
			echo "## $DESC_USENETMON"
			echo "USENETMON=\"$USENETMON\""
			echo "## $DESC_PROTON_LOG"
			echo "PROTON_LOG=\"$PROTON_LOG\""
			echo "## $DESC_PROTON_DUMP_DEBUG_COMMANDS"
			echo "PROTON_DUMP_DEBUG_COMMANDS=\"$PROTON_DUMP_DEBUG_COMMANDS\""
			echo "## $DESC_PROTON_DEBUG_DIR"
			echo "PROTON_DEBUG_DIR=\"$PROTON_DEBUG_DIR\""
			echo "## $DESC_PROTON_USE_WINED3D"
			echo "PROTON_USE_WINED3D=\"$PROTON_USE_WINED3D\""
			echo "## $DESC_PROTON_NO_D3D11"
			echo "PROTON_NO_D3D11=\"$PROTON_NO_D3D11\""
			echo "## $DESC_PROTON_NO_D3D10"
			echo "PROTON_NO_D3D10=\"$PROTON_NO_D3D10\""
			echo "## $DESC_PROTON_NO_ESYNC"
			echo "PROTON_NO_ESYNC=\"$PROTON_NO_ESYNC\""
			echo "## $DESC_PROTON_NO_FSYNC"
			echo "PROTON_NO_FSYNC=\"$PROTON_NO_FSYNC\""
			echo "## $DESC_PROTONFLAA"
			echo "PROTON_FORCE_LARGE_ADDRESS_AWARE=\"$PROTON_FORCE_LARGE_ADDRESS_AWARE\""
			echo "## $DESC_WINEFSIS"
			echo "WINE_FULLSCREEN_INTEGER_SCALING=\"$WINE_FULLSCREEN_INTEGER_SCALING\""
			echo "## $DESC_USERSTART"
			echo "USERSTART=\"$USERSTART\""
			echo "## $DESC_USERSTOP"
			echo "USERSTOP=\"$USERSTOP\""
			} >> "$1"
			#ENDsaveCfgdefault_template
		fi
	}

	function saveCfgvortex {

		setDefaultCfgValues "$2"
		
		if [ -f "$1" ]; then
			updateConfigFile "$1" "${FUNCNAME[0]}" "$3"
		else
			#STARTsaveCfgvortex
			{
			echo "## config Version: $PROGVERS"
			echo "##########################"
			echo "## $DESC_VORTEXWINE"
			echo "VORTEXWINE=\"$VORTEXWINE\""
			echo "## $DESC_VORTEXPREFIX"
			echo "VORTEXPREFIX=\"$VORTEXPREFIX\""
			echo "## $DESC_VORTEXWINEDEBUG"
			echo "VORTEXWINEDEBUG=\"$VORTEXWINEDEBUG\""
			echo "## $DESC_VORTEX_DXVK_LOG_LEVEL"
			echo "VORTEX_DXVK_LOG_LEVEL=\"$VORTEX_DXVK_LOG_LEVEL\""
			echo "## $DESC_VORTEX_DXVK_LOG_PATH"
			echo "VORTEX_DXVK_LOG_PATH=\"$VORTEX_DXVK_LOG_PATH\""
			echo "## $DESC_VORTEXDOWNLOADPATH"
			echo "VORTEXDOWNLOADPATH=\"$VORTEXDOWNLOADPATH\""
			echo "## $DESC_VORTEXINSTALL"
			echo "VORTEXINSTALL=\"$VORTEXINSTALL\""
			echo "## $DESC_VORTEXVERSION"
			echo "VORTEXVERSION=\"$VORTEXVERSION\""
			echo "## $(strFix "$DESC_DISABLE_AUTOSTAGES" "$PROGNAME")"
			echo "DISABLE_AUTOSTAGES=\"$DISABLE_AUTOSTAGES\""
			} >> "$1"
			#ENDsaveCfgvortex
		fi
	}

	SCFG="$(basename "${1//.conf/}")"
	"${FUNCNAME[0]}$SCFG" "$1" "$SCFG" "$2"
}

function notiShow {
	if [ "$USENOTIFIER" -eq 1 ]; then
		"$NOTY" "$1"
	fi	
}

function strFix {
	STRIN="$1"

	if [ -z "$2" ]; then
		echo "$STRIN"
	else
		STRIN2="${STRIN//XXX/$2}"
		STRIN3="${STRIN2//YYY/$3}"
		STRIN4="${STRIN3//ZZZ/$4}"
		echo "${STRIN4//QQQ/$5}"
	fi
}

function PROTPATH {
	printf "%s\n" "${ProtonCSV[@]//\"/}" | grep "^$1" | sort -nr | head -n1 | cut -d ';' -f2
}

function setNewProtVars {
# arg1 is absolute proton path

	if [ "$(OVPROT)" -eq 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - Setting new Proton Variables based on '$1'"
		RUNPROTON="$1"
		CHECKWINE="$(dirname "$RUNPROTON")/$DBW"

		if [ -f "$CHECKWINE" ]; then
			RUNWINE="$CHECKWINE"
			writelog "INFO" "${FUNCNAME[0]} - set the wine binary for proton in path '$RUNPROTON' to '$RUNWINE'"
		else
			writelog "WARN" "${FUNCNAME[0]} - couldn't find the wine binary for the proton in path '$RUNPROTON'"
		fi
		
		PROTONVERSION="$(setProtonPathVersion "$RUNPROTON")"
		USEPROTON="$PROTONVERSION"
	else
		writelog "SKIP" "${FUNCNAME[0]} - using 'Steam Proton $FIRSTUSEPROTON' instead of '$PROGCMD Proton $USEPROTON' because OVERRIDEPROTON is disabled"
		notiShow "$(strFix "$NOTY_SETNEWPROTVARS" "$FIRSTUSEPROTON")"
	fi
}


# in case you wonder NOP='Newest Official Proton'
function getNOP {
	if [ -z "${ProtonCSV[0]}" ]; then
		writelog "INFO" "${FUNCNAME[0]} - don't have the Array of available Proton versions yet - creating"
		getAvailableProtonVersions "up"
	fi

	NEWESTPROTRAW="$(printf "%s\n" "${ProtonCSV[@]//\"/}" | grep "^proton-[0-9]." | sort -nr | head -n1)"
	
	if [ "$1" == "p" ]; then
		cut -d ';' -f2 <<< "$NEWESTPROTRAW"
	elif [ "$1" == "v" ]; then
		cut -d ';' -f1 <<< "$NEWESTPROTRAW"
	fi
}

function setNOP {
	writelog "INFO" "${FUNCNAME[0]} - Selecting newest official Proton available"
	NOPPATH="$(getNOP "p")"
	if [ -n "$NOPPATH" ];then
		writelog "INFO" "${FUNCNAME[0]} - Selected '$NOPPATH'"
		setNewProtVars "$NOPPATH"
	else
		writelog "SKIP" "${FUNCNAME[0]} - haven't found anything"
	fi
}

function needNewProton {
	if [ "$(OVPROT)" -eq 1 ]; then
		getAvailableProtonVersions "up"
		TITLE="Proton Version"
		writelog "INFO" "${FUNCNAME[0]} - no Proton Version was found - opening a requester to choose from one"
		if [ "$USEGUI" == "$YAD" ]; then
			PROTYADLIST="$(printf "!%s\n" "${ProtonCSV[@]//\"/}" | sort -u | cut -d ';' -f1 | tr -d '\n' ;printf "\n")"
			PICKPROTON="$(LC_ALL="" "$YAD" --window-icon="$STLICON" --borders="$YADBORDER" --center "$WINDECO" --form --scroll --separator="\n" --quoted-output \
			--text="<span font_weight='bold'>$GUI_NEEDNEWPROTON</span>" \
			--field="$GUI_NEEDNEWPROTON2":CB "${USEPROTON/#-/ -}!$PROTYADLIST" \
			--title="$TITLE" \
			--geometry="$ASKSETREQWIDTH"x"$ASKSETREQHEIGHT"+0+0)"
		elif [ "$USEGUI" == "$ZENITY" ]; then
			PICKPROTON="$(zenity --list --width="$ASKSETREQWIDTH" --height="$ASKSETREQHEIGHT" --title="$TITLE" --text="$GUI_NEEDNEWPROTON" 2>/dev/null)"
		fi

		if [ -n "$PICKPROTON" ]; then
			writelog "INFO" "${FUNCNAME[0]} - selected Proton Version $PICKPROTON"
			setNewProtVars "$(PROTPATH "$PICKPROTON")"
		else
			writelog "INFO" "${FUNCNAME[0]} - no Proton Version was selected - try again"
			"${FUNCNAME[0]}"
		fi
	fi
}

function dlCustomProton {
	CPURL="${1//\"/}"
	PROTV="${2//\"/}"
	CPURLFILE="$(basename "$CPURL")"
	DSTDL="$CUSTPROTDLDIR/$CPURLFILE"
	if [ ! -f "$DSTDL" ]; then
		writelog "INFO" "${FUNCNAME[0]} - downloading '$CPURL' to '$CUSTPROTDLDIR'"
		notiShow "$(strFix "$NOTY_DLCUSTOMPROTON" "$CPURL")"
		"$WGET" "$CPURL" -O "$DSTDL"
		notiShow "$(strFix "$NOTY_DLCUSTOMPROTON2" "$CPURL")"
	else
		writelog "INFO" "${FUNCNAME[0]} - file '$DSTDL' already exists - nothing to download"
	fi

	if grep -q "\.tar\." <<< "$DSTDL"; then
		PROTRELPATH="$("$TAR" -tf "$DSTDL" | grep "proton$" 2>/dev/null )"
		if [ -n "$PROTRELPATH" ]; then
			writelog "INFO" "${FUNCNAME[0]} - archive contains proton in subdirectory '$PROTRELPATH'"
			PROTFULLPATH="$CUSTPROTEXTDIR/$PROTRELPATH"
			if [ -f "$PROTFULLPATH" ]; then
				writelog "SKIP" "${FUNCNAME[0]} - the destination path '$PROTFULLPATH' already exists - looks like '$DSTDL' was already extracted before"
			else
				notiShow "$(strFix "$NOTY_DLCUSTOMPROTON3" "$CPURL")"
				"$TAR" xf "$DSTDL" -C "$CUSTPROTEXTDIR" 2>/dev/null
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - archive doesn't seem to contain a 'proton' file"
		fi
	elif grep -q "\.zip$" <<< "$DSTDL"; then
		if grep -q "proton$" <<< "$("$UNZIP" -l "$DSTDL" 2>/dev/null)"; then
			writelog "INFO" "${FUNCNAME[0]} - archive contains proton"
			SUBDIR="$(basename "${DSTDL//.zip/}")"
			PROTRELPATH="$SUBDIR/proton"
			PROTFULLPATH="$CUSTPROTEXTDIR/$PROTRELPATH"
			if [ -f "$PROTFULLPATH" ]; then
				writelog "SKIP" "${FUNCNAME[0]} - the destination path '$PROTFULLPATH' already exists - looks like '$DSTDL' was already extracted before"
			else
				notiShow "$(strFix "$NOTY_DLCUSTOMPROTON3" "$CPURL")"
				"$UNZIP" "$DSTDL" -d "$CUSTPROTEXTDIR/$SUBDIR" 2>/dev/null
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - archive doesn't seem to contain a 'proton' file"
		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - don't know how to extract "
	fi

	if [ -f "$PROTFULLPATH" ]; then
		if [ -n "$PROTV" ]; then
			addCustomProtonToList "$PROTFULLPATH" "$PROTV"
		else
			addCustomProtonToList "$PROTFULLPATH"
		fi
	fi
}

function createDLProtList {
	writelog "INFO" "${FUNCNAME[0]} - generating list of online available custom Proton builds"

	unset ProtonDLList
	unset ProtonDLDispList

	while read -r CPVERS; do
		mapfile -t -O "${#ProtonDLList[@]}" ProtonDLList <<< "$CPVERS"
		mapfile -t -O "${#ProtonDLDispList[@]}" ProtonDLDispList <<< "$(basename "$CPVERS")"
	done <<< "$(
	while read -r CPURL; do
	if grep -q "$GHURL" <<< "${!CPURL}"; then
		"$WGET" -q "${!CPURL}"  -O -  | grep "tar.gz\|zip" | grep "releases" | grep -oE '\"/[^\\"]+' | sed "s|^\"|$GHURL|g"
	fi
	done <<< "$(grep "^CP_" "$STLURLCFG" | cut -d '=' -f1)"
	)"
}

function dlCustomProtonGUI {
	if [ "$USEGUI" == "$ZENITY" ]; then
		"$ZENITY" --width="$CUSTPROTREQWIDTH" --height="$CUSTPROTREQHEIGHT" --info --text="$NOTY_NOZEN"
		return
	fi

	createDLProtList

	writelog "INFO" "${FUNCNAME[0]} - opening dialog to choose a download"

	DLPROTLIST="$(printf "!%s\n" "${ProtonDLDispList[@]//\"/}" | tr -d '\n' ;printf "\n")"

	TITLE="${PROGNAME}-DownloadCustomProton"

	loadCfg "$STLGUICFG" X
	updateWinRes "$TITLE" "$STLGUICFG" "CUSTPROTREQWIDTH" "CUSTPROTREQHEIGHT" &

	if [ "$USEGUI" == "$YAD" ]; then
		DLDISPCUSTPROT="$(LC_ALL="" "$YAD" --window-icon="$STLICON" --borders="$YADBORDER" --form --center --on-top "$WINDECO" \
		--title="$TITLE" \
		--geometry="$CUSTPROTREQWIDTH"x"$CUSTPROTREQHEIGHT"+0+0 \
		--text="<span font_weight='bold'>$GUI_DLCUSTPROTTEXT</span>" \
		--field=" ":LBL " " \
		--field="$GUI_DLCUSTPROTTEXT2!$GUI_DLCUSTPROTTEXT":CBE "${DLPROTON/#-/ -}!$DLPROTLIST" \
		)"
	fi
	
	if [ -n "${DLDISPCUSTPROT//|/\"}" ]; then
		if grep -q "^http" <<< "${DLDISPCUSTPROT//|/\"}"; then
			DLURL="${DLDISPCUSTPROT//|/\"}"
			writelog "INFO" "${FUNCNAME[0]} - The URL '$DLURL' was entered manually - downloading directly"
			dlCustomProton "${DLURL//|/\"}"
		else
			DLURL="$(printf "%s\n" "${ProtonDLList[@]}" | grep -m1 "${DLDISPCUSTPROT//|}")"
			writelog "INFO" "${FUNCNAME[0]} - '${DLDISPCUSTPROT//|}' was selected - downloading '$DLURL'"
			dlCustomProton "${DLURL//|/\"}"
		fi

		setProtYadList
	fi
}

function addCustomProtonToList {
	if [ -f "$1" ]; then
		writelog "INFO" "${FUNCNAME[0]} - received directly the file as argument"
		if [ -n "$2" ]; then
			writelog "INFO" "${FUNCNAME[0]} - received '$2' as Proton Version"
			OUTNEWCUSTPROT="$2;$1"
		else
			OUTNEWCUSTPROT="$1"
		fi
	else
		NEWCUSTPROT="$1"

		if grep -q "||" <<< "$NEWCUSTPROT"; then
			if grep -q "|http" <<< "$NEWCUSTPROT"; then
				CPURLWIP="$(tr '|' '"' <<< "$NEWCUSTPROT" | sed "s:\"http:\";\"http:g")"
				CPURL="$(cut -d ';' -f2 <<< "$CPURLWIP")"
				dlCustomProton "$CPURL"
			else
				CPWIP="$(tr -s '|' <<< "$NEWCUSTPROT" | tr '|' '"')"
				if [ -f "${CPWIP//\"/}" ]; then
					OUTNEWCUSTPROT="$CPWIP"
				fi
			fi
		else
			if grep -q "|http" <<< "$NEWCUSTPROT"; then
				CPURLWIP="$(tr '|' '"' <<< "$NEWCUSTPROT" | sed "s:\"http:\";\"http:g")"
				CPURL="$(cut -d ';' -f2 <<< "$CPURLWIP")"
				CPV="$(cut -d ';' -f1 <<< "$CPURLWIP")"
				dlCustomProton "$CPURL" "$CPV"
			else
				CPWIP="$(tr '|' '"' <<< "$NEWCUSTPROT" | sed "s:\"/:\";\"/:g")"
				CPWIPF="$(cut -d ';' -f2 <<< "$CPWIP")"
				if [ -f "${CPWIPF//\"/}" ]; then
					OUTNEWCUSTPROT="$CPWIP"
				fi
			fi
		fi
	fi
		

	if [ -n "$OUTNEWCUSTPROT" ] ; then
		writelog "INFO" "${FUNCNAME[0]} - adding '$OUTNEWCUSTPROT' to '$CUSTOMPROTONLIST'"
		echo "$OUTNEWCUSTPROT" >> "$CUSTOMPROTONLIST"
		writelog "INFO" "${FUNCNAME[0]} - (Re-)creating the internal List of available Proton-Versions"
		getAvailableProtonVersions "up"
	fi
}

function dlCustomProtonGate {
	if [ -z "$1" ]; then
		dlCustomProtonGUI
	else
		if grep -q "^http" <<< "$1"; then
			writelog "INFO" "${FUNCNAME[0]} - '$1' is an URL - sending directly to dlCustomProton"
			dlCustomProton "$@"
		else
			writelog "SKIP" "${FUNCNAME[0]} - don't know what to do with argument '$1'"
		fi
	fi
}

function addCustomProton {
	if [ -z "$1" ]; then
		if [ ! -f "$CUSTOMPROTONLIST" ]; then 
			{
			echo "# List of custom proton paths, which are not stored in the usual default locations (see README)"
			echo "# (optionally with identifying name (f.e. proton version) as field one)"
			echo "# Files can be added by using the '$PROGCMD' command line or the GUI (or manually of course)"
			echo "# Two valid examples:"
			echo "# \"Proton-47.11-FWX-3\";\"/random/path/to/a/custom/binary/proton\""
			echo "# \"/random/path/to/a/custom/binary/proton\""
			echo "# (In the first example \"Proton-47.11-FWX-3\" will be used as identifying proton version"
			echo "# in the second example the identifying proton version will be searched in '$CTVDF'"
			echo "# and 'version' files in the besides the given proton binary."
			echo "# When no proton version could be found, the selected file will be marked as invalid and removed at once)"
			echo "################################################"
			} > "$CUSTOMPROTONLIST"
		fi

		TITLE="${PROGNAME}-AddCustomProton"

		loadCfg "$STLGUICFG" X
		updateWinRes "$TITLE" "$STLGUICFG" "CUSTPROTREQWIDTH" "CUSTPROTREQHEIGHT" &

		if [ "$USEGUI" == "$YAD" ]; then
			NEWCUSTPROT="$(LC_ALL="" "$YAD" --window-icon="$STLICON" --borders="$YADBORDER" --form --center --on-top "$WINDECO" \
			--title="$TITLE" \
			--geometry="$CUSTPROTREQWIDTH"x"$CUSTPROTREQHEIGHT"+0+0 \
			--text="<span font_weight='bold'>$GUI_ADDCUSTOMBINARY</span>" \
			--field=" ":LBL " " \
			--field="$GUI_PROTONVERSIONNAME!$DESC_PROTONVERSIONNAME" "Proton-" \
			--field="$GUI_CUSTOMPROTONBINARY":FL "proton" --file-filter="$GUI_PROTONFILES (proton)| proton")"
		elif [ "$USEGUI" == "$ZENITY" ]; then
			NEWCUSTPROT="$("$ZENITY" --file-selection --file-filter="$GUI_PROTONFILES (proton)| proton" --width="$CUSTPROTREQWIDTH" --height="$CUSTPROTREQHEIGHT" --title="$GUI_ADDCUSTOMBINARY" 2>/dev/null)"
		fi
		addCustomProtonToList "$NEWCUSTPROT"
	else
		if grep -q "proton$" <<< "$1"; then
			if [ -f "$1" ]; then
				writelog "INFO" "${FUNCNAME[0]} - '$1' is a path to an existing 'proton' file - adding to the Custom Proton List"
				addCustomProtonToList "$@"
			else
			writelog "SKIP" "${FUNCNAME[0]} - file '$1' does not exist - skipping"
			fi
		fi
	fi
}

### YAD SETTINGS ###

function saveYadCfg {
	DELIM="$1"
	YADCFG="$2"
	YADCFGIN="$3"

	if [ -f "$YADCFG" ]; then

		loadCfg "$YADCFG"
		YLC=1
		YADCATLIST="$STLSHM/yadcatlist.txt"
		extRun sed -n "/^#STARTYAD$DELIM/,/^#ENDYAD$DELIM/p;/^#ENDYAD$DELIM/q" "$0" | grep "\-\-field" | rev | cut -d '{' -f1 | rev | sed '/LBL/c\NOVAL' | sed '/BTN/c\NOVAL' | cut -d '/' -f1 > "$YADCATLIST"

		while extRun read -r YADVAL; do
			YADCAT="$(extRun sed "${YLC}q;d" "$YADCATLIST")"
			YADVALUNQ="${YADVAL//\'/}"
			WRITEYADVAL="${YADVALUNQ/# -/-}"

			if [ -n "$YADCAT" ] && [ "$YADCAT" != "NOVAL" ]; then

				if [ -z "$WRITEYADVAL" ]; then
					WRITEYADVAL="DUMMY"
				fi
				updateConfigEntry "$YADCAT" "$WRITEYADVAL" "$YADCFG"
			fi

			((YLC++))

		done < "$YADCFGIN"

		rm "$YADCATLIST" 2>/dev/null
		
		writelog "INFO" "${FUNCNAME[0]} - done with updating configfile $YADCFG"
	else
		writelog "SKIP" "${FUNCNAME[0]} - configfile $YADCFG does not exist - skipping"
	fi
}

function saveAllYadConfigs {
	saveYadCfg "GAME" 		"$STLGAMECFG" 		"$cfg1"
	saveYadCfg "TEMPLATE" 	"$STLDEFGAMECFG" 	"$cfg2"
	saveYadCfg "GLOBAL" 	"$STLDEFGLOBALCFG" 	"$cfg3"
	saveYadCfg "VORTEX" 	"$STLVORTEXCFG" 	"$cfg4"
}

function saveNewRes {
	if [ "$SAVESETSIZE" -eq 1 ] ; then
		SNEWW="$1"
		SNEWH="$2"
		CFG="$3"
		ORGW="$4"
		ORGH="$5"

		updateConfigEntry "$ORGW" "$SNEWW" "$CFG"
		updateConfigEntry "$ORGH" "$SNEWH" "$CFG"
		writelog "INFO" "${FUNCNAME[0]} - reloading new '$CFG'"
		loadCfg "$CFG" X
	fi
}

function updateWinRes {
	if [ -z "$SAVESETSIZE" ]; then
		SAVESETSIZE=0
	fi
	
	if [ "$SAVESETSIZE" -eq 1 ] ; then
		WNAM="$1"
		CFG="$2"
		ORGW="$3"
		ORGH="$4"
		
		NEWW="${!ORGW}"
		NEWH="${!ORGH}"

		MAXWAIT=3
		COUNTER=0

		while ! "$XWININFO" -name "$WNAM" -stats >/dev/null 2>/dev/null; do
			if [[ "$COUNTER" -ge "MAXWAIT" ]]; then
				writelog "SKIP" "${FUNCNAME[0]} - timeout waiting for Window '$WNAM'"
				return 
			fi
			writelog "INFO" "${FUNCNAME[0]} - waiting for Window '$WNAM'"
			COUNTER=$((COUNTER+1))
			sleep 1
		done

		writelog "INFO" "${FUNCNAME[0]} - Window '$WNAM' is running - polling the resolution"

		while true; do
			SRES="$("$XWININFO" -name "$WNAM" -stats 2>/dev/null | awk '$1=="-geometry" {print $2}' | cut -d '+' -f1)"
			if grep -q "x" <<< "$SRES"; then
				PREVW="$NEWW"
				PREVH="$NEWH"
			
				TNEWW="${SRES%x*}"
				TNEWH="${SRES#*x}"

				if [ "$TNEWW" -ne "${!ORGW}" ] || [ "$TNEWH" -ne "${!ORGH}" ]; then
					if [ "$TNEWW" != "$PREVW" ] || [ "$TNEWH" != "$PREVH" ]; then
						if [ -n "${TNEWW##*[!0-9]*}" ] && [ -n "${TNEWH##*[!0-9]*}" ]; then
							NEWW="$TNEWW"
							NEWH="$TNEWH"
							writelog "INFO" "${FUNCNAME[0]} - found new Window Resolution '${NEWW}x${NEWH}'"
						else
							writelog "SKIP" "${FUNCNAME[0]} - skipping found false-positive size '${NEWW}x${NEWH}'"	
						fi
					fi
				fi
				sleep 1
			else
				if [ "$NEWW" -ne "${!ORGW}" ] || [ "$NEWH" -ne "${!ORGH}" ]; then
					writelog "INFO" "${FUNCNAME[0]} - the Window '$WNAM' was closed - saving the last seen resolution '${NEWW}x${NEWH}'"
					saveNewRes "$NEWW" "$NEWH" "$CFG" "$ORGW" "$ORGH"
				else
					writelog "INFO" "${FUNCNAME[0]} - the Window '$WNAM' was closed - the resolution didn't change - nothing to do"
				fi
				return
			fi
		done
	fi	
}

function updateEditor {
	CFG="$1"
	XDGO="xdg-open"

	loadCfg "$CFG" X
	if grep -q "$XDGO" <<< "$STLEDITOR" || [ ! -f "$STLEDITOR" ] ; then
		writelog "WARN" "${FUNCNAME[0]} - '$XDGO' selected as editor or configured editor not found - trying to find an installed editor installed"
		XDGED="$(command -v "$(xdg-mime query default text/plain | cut -d '.' -f1)" 2>/dev/null)"
		if [ -x "$XDGED" ]; then
			writelog "INFO" "${FUNCNAME[0]} - xdg-mime points to '$XDGED', which also exists"
			FOUNDEDITOR="$XDGED"
		elif  [ -x "$(command -v "$("$WHICH" geany 2>/dev/null)" 2>/dev/null)" ]; then
			FOUNDEDITOR="$("$WHICH" geany 2>/dev/null)"
		elif  [ -x "$(command -v "$("$WHICH" gedit 2>/dev/null)" 2>/dev/null)" ]; then
			FOUNDEDITOR="$("$WHICH" gedit 2>/dev/null)"
		elif  [ -x "$(command -v "$("$WHICH" leafpad 2>/dev/null)" 2>/dev/null)" ]; then
			FOUNDEDITOR="$("$WHICH" leafpad 2>/dev/null)"
		elif  [ -x "$(command -v "$("$WHICH" kwrite 2>/dev/null)" 2>/dev/null)" ]; then
			FOUNDEDITOR="$("$WHICH" kwrite 2>/dev/null)"
		else
			writelog "SKIP" "${FUNCNAME[0]} - no valid editor found - leaving '$XDGO'"
		fi

		if [ -n "$FOUNDEDITOR" ]; then
			writelog "INFO" "${FUNCNAME[0]} -changing STLEDITOR to '$FOUNDEDITOR' in '$CFG'"
			updateConfigEntry "STLEDITOR" "$FOUNDEDITOR" "$CFG"
			loadCfg "$CFG"
		fi
	fi
}

function getAvailableCfgs {
	unset CfgFiles
	while read -r cfgfile; do
		if [ -f "${!cfgfile}" ]; then
			CfgFiles+=("${!cfgfile}")
		fi
	done <<< "$(sed -n "/^#STARTEDITORCFGLIST/,/^#ENDEDITORCFGLIST/p;/^#ENDEDITORCFGLIST/q" "$0" | grep -v "^#" | grep -v "LOGFILE" | grep "=" | cut -d '=' -f1)"	
}

function EditorDialog {
	writelog "INFO" "${FUNCNAME[0]} - Opening Editor Dialog"

	resetAID "$1"
	
	# load gameconfig, as it might want EDITORURL here
	loadCfg "$STLGAMECFG" X

	getAvailableCfgs
	writelog "INFO" "${FUNCNAME[0]} - found ${#CfgFiles[@]} available Config Files - opening Checklist"

	TITLE="${PROGNAME}-Editor"

	loadCfg "$STLGUICFG" X
	updateWinRes "$TITLE" "$STLGUICFG" "EDREQWIDTH" "EDREQHEIGHT" &
	if [ "$USEGUI" == "$YAD" ]; then
		if [ "$USEGAMEPICS" -eq 1 ] && [ -f "$STLGHEADD/$AID.jpg" ]; then
			SHOWPIC="$STLGHEADD/$AID.jpg"
		else
			SHOWPIC="$NOICON"
		fi
		IFS=" " read -r -a EDFILES <<< "$(for f in $(printf '%s\n' "${CfgFiles[@]}"); do echo FALSE ; echo "$f" ; done | \
		LC_ALL="" "$YAD" --image "$SHOWPIC" --image-on-top --window-icon="$STLICON" --borders="$YADBORDER" --center "$WINDECO" --list --checklist --column=Edit --column=ConfigFile --separator=" " --print-column="2" \
		--text="<span font_weight='bold'>$(strFix "$GUI_EDITORDIALOG" "$GN" "$AID")</span>" \
		--title="$TITLE" \
		--geometry="$EDREQWIDTH"x"$EDREQHEIGHT"+0+0 | tr '\n' ' ')"
	elif [ "$USEGUI" == "$ZENITY" ]; then
		IFS=" " read -r -a EDFILES <<< "$(for f in $(printf '%s\n' "${CfgFiles[@]}"); do echo FALSE ; echo "$f" ; done | \
		"$ZENBIN" --list --checklist --column=Edit --column=ConfigFile --separator=" " --print-column="2" \
		--text="<span font_weight='bold'>$GUI_EDITORDIALOG</span>" \
		--width="$EDREQWIDTH" --height="$EDREQHEIGHT" 2>/dev/null | tr '\n' ' ')"
	fi

	if [ -n "${EDFILES[0]}" ]; then
		if [ "$OPENEDITORURL" -eq 1 ]; then
			writelog "INFO" "${FUNCNAME[0]} - OPENEDITORURL is set to 1 - also opening the url '$EDITORURL' in the browser"
			if [ -x "$(command -v "$BROWSER" 2>/dev/null)" ]; then
				# if we open a new BROWSER instance here, we're going to kill it when the game launches, else the game won't "exit" in steam 
				if "$PGREP" -f "$BROWSER" >/dev/null; then
					KILLBROWSER=0
				else
					KILLBROWSER=1
				fi		
				"$BROWSER" "${EDITORURL//AID/$AID}" & 
			fi
		fi

		writelog "INFO" "${FUNCNAME[0]} - opening Editor '$STLEDITOR' with selected Config Files"
		"$STLEDITOR" "${EDFILES[@]}"

		# kill browser if it was opened with the editor:
		if [ -n "$KILLBROWSER" ];then
			if [ "$KILLBROWSER" -eq 1 ]; then
				"$PKILL" -f "$BROWSER"
			fi
		fi

		if [ "$USEGUI" == "$YAD" ]; then
			writelog "INFO" "${FUNCNAME[0]} - Editor closed - Going back to the Main Settings"
			openSettings
		else
			writelog "INFO" "${FUNCNAME[0]} - Editor closed"
		fi
	else
		if [ "$USEGUI" == "$YAD" ]; then
			writelog "INFO" "${FUNCNAME[0]} - no Config Files were selected - Going back to the Main Settings"
			openSettings
		else
			writelog "INFO" "${FUNCNAME[0]} - no Config Files were selected"
		fi
	fi
	writelog "INFO" "${FUNCNAME[0]} - Leaving Editor Dialog"
}

function cleanYadFiles {
	kill "$YADPID1" "$YADPID2" "$YADPID3" "$YADPID4" 2>/dev/null
	rm -f "$cfg1" "$cfg2" "$cfg3" "$cfg4"
	unset "cfg1" "cfg2" "cfg3" "cfg4"
}

function cleanYadLeftOvers {
	# delete some possible "$YAD" leftovers
	if [ "$USEGUI" == "$YAD" ]; then
		kill "$YADTRAYPID" 2>/dev/null
		find /tmp -maxdepth 1 -type f -regextype posix-extended -regex '^.*cfg[0-9].[A-Z,a-z,0-9]{8}' -exec rm {} \;
		ipcrm -M "$YADKEY" 2>/dev/null
	fi
}


function TrayIconExports {
	export XWI="$XWININFO"
	export XDO="$XDO"
	export SBSTWEAKDIR="$SBSTWEAKDIR"
	export STLGAMEDIR="$STLGAMEDIR"
	export TEMPWINNAME="$TEMPWINNAME"
	export -f setAID
	export -f setAIDCfgs
	export -f resetAID
	export -f writelog
	export -f updateConfigEntry
	export AID="$AID"
	export RUNWINESERVER="${RUNWINE}server"
	export GPFX="$GPFX"

	export -f pickWindowName
	export -f getActiveWindowName
	export -f getActiveWindowSize
	export -f killProtonGame
	export -f PauseGame

	if [ -n "$ALTEXEPATH" ] && [ "$ALTEXEPATH" != "empty" ]; then
		export SHADDESTDIR="$ALTEXEPATH"
	else
		export SHADDESTDIR="$STLGAMEDIR"
	fi
	export -f TrayShaderMenu
}

function trayIcon {
	if [ "$USEGUI" == "$YAD" ]; then
		if [ "$USETRAYICON" -eq 1 ]; then
			# variables and functions used by exported functions below


			# functions for the trayIcon Menu
			function pickWindowName {
				resetAID "$AID"
				PICKWINDOWNAME="$(sleep 2 && "$XWI" -stats | grep ^"$XWI" | tail -n1 | cut -d '"' -f2)";
				if [ -z "$PICKWINDOWNAME" ] || grep -q "$XWI" <<< "$PICKWINDOWNAME"; then
					writelog "SKIP" "${FUNCNAME[0]} - '$XWI' didn't pick the correct window name: '$PICKWINDOWNAME'"
				else
					writelog "INFO" "${FUNCNAME[0]} - trayIcon: picked '$PICKWINDOWNAME'"
					updateConfigEntry "GAMEWINDOW" "$PICKWINDOWNAME" "$STLGAMECFG"
					echo "GAMEWINDOW=$PICKWINDOWNAME" > "$TEMPWINNAME"
				fi
			}

			function getActiveWindowName {
				resetAID "$AID"
				PICKWINDOWNAME="$(sleep 5 && "$XDO" getactivewindow getwindowname)";
				writelog "INFO" "${FUNCNAME[0]} - trayIcon: found windowname '$PICKWINDOWNAME'"
				updateConfigEntry "GAMEWINDOW" "$PICKWINDOWNAME" "$STLGAMECFG"
				echo "GAMEWINDOW=$PICKWINDOWNAME" >"$TEMPWINNAME"
			}

			function getActiveWindowSize {
				resetAID "$AID"
				PICKMINVRWINH="$(("$(sleep 5 && "$XDO" getactivewindow getwindowgeometry | tail -n1 | cut -d ':' -f2 | cut -d 'x' -f2)"))";
				writelog "INFO" "${FUNCNAME[0]} - trayIcon: found windowheight '$PICKMINVRWINH'"
				updateConfigEntry "MINVRWINH" "$PICKMINVRWINH" "$STLGAMECFG"
			}

			function killProtonGame {
				WINEPREFIX="$GPFX" "$RUNWINESERVER" -k
				touch "$CLOSETMP"
			}

			function PauseGame {
				GAMEPID="$(sleep 5 && "$XDO" getactivewindow getwindowpid)"
				# idea taken with friendly permission from https://github.com/Ilazki:
				GAMESTATE="$(ps -q "$GAMEPID" -o state --no-headers)"
				GAMESIG="-STOP"

				if [ "x$GAMESTATE" = "xT" ] ; then
					GAMESIG="-CONT"
				fi

				kill "$GAMESIG" "$GAMEPID"
			}
			
			function TrayShaderMenu {
				"$0" update gameshaders "$SHADDESTDIR"
			}
			
			TrayIconExports
			
			# actually open the actual trayIcon	
			LC_ALL="" "$YAD" --image="$STLICON" --notification --item-separator=","\
			--menu="$TRAY_PICKWINDOW,bash -c pickWindowName
			|$TRAY_GETACTIVEWINDOW,bash -c getActiveWindowName \
			|$TRAY_GETACTIVEWINDOWSIZE,bash -c getActiveWindowSize \
			|$TRAY_KILLSWITCH,bash -c killProtonGame \
			|$TRAY_PAUSE,bash -c PauseGame" \
			--text="$TRAY_TOOLTIP" >/dev/null 2>/dev/null &
			YADTRAYPID="$!"
		fi
	fi
}

function setProtYadList {
	writelog "INFO" "${FUNCNAME[0]} - Updating the Proton Dropdown List for the Settings Menu"
	PROTYADLIST="$(printf "!%s\n" "${ProtonCSV[@]//\"/}" | sort -u | cut -d ';' -f1 | tr -d '\n' ;printf "\n")"
}

#STARTYADGAME
#STARTYADTEMPLATE
function openGameMenu {
	CFG="$1"
	TABNR="$2"
	TEXT="$3"
	cfgX="$4"
	loadCfg "$CFG" X

	if [ "$USEGAMEPICS" -eq 1 ] && [ -f "$STLGHEADD/$AID.jpg" ] && [ "$TABNR" -eq 1 ] && [ "$USEGAMEPICINMENU" -eq 1 ] ; then
		SHOWPIC="$STLGHEADD/$AID.jpg"
	else
		SHOWPIC="$NOICON"
	fi

	LC_ALL="" "$YAD" --image "$SHOWPIC" --image-on-top --plug="$YADKEY" --tabnum="$TABNR" --borders="$YADBORDER" --form --scroll \
	--separator="\n" \
	--quoted-output \
	--columns="$GAMETABCOLS" \
	--text="<span font_weight='bold'>$TEXT</span>" \
	--field="     $GUI_USE_GAMCON!$DESC_RUN_GAMCON ('RUN_GAMCON')":CHK "${RUN_GAMCON/#-/ -}" \
	--field="     $GUI_GAMCONWAITEXE!$DESC_GAMCONWAITEXE $GUI_ECHOPLAC ('GAMCONWAITEXE')":FL "${GAMCONWAITEXE/#-/ -}" \
	--field="     $GUI_USEGAMEMODERUN!$DESC_USEGAMEMODERUN ('USEGAMEMODERUN')":CHK "${USEGAMEMODERUN/#-/ -}" \
	--field="     $GUI_GAMESCOPE!$DESC_USEGAMESCOPE ('USEGAMESCOPE')":CHK "${USEGAMESCOPE/#-/ -}" \
	--field="     $GUI_GAMESCOPEARGS!$DESC_GAMESCOPE_ARGS ('GAMESCOPE_ARGS')" "${GAMESCOPE_ARGS/#-/ -}" \
	--field="     $GUI_USE_NYRNA!$DESC_RUN_NYRNA ('RUN_NYRNA')":CHK "${RUN_NYRNA/#-/ -}" \
	--field="     $GUI_MANGOHUD!$DESC_MANGOHUD ('MANGOHUD')":CHK "${MANGOHUD/#-/ -}" \
	--field="     $GUI_REPLAYSORCERY!$DESC_RUN_REPLAY ('RUN_REPLAY')":CHK "${RUN_REPLAY/#-/ -}" \
	--field="     $GUI_VORTEXMODE!$DESC_VORTEXMODE ('VORTEXMODE')":CB "${VORTEXMODE/#-/ -}!disabled!normal!quickstart!editormode" \
	--field=" ":LBL " " \
	--field="     $GUI_USE_BOXTRON!$DESC_USEBOXTRON ('USEBOXTRON')":CHK "${USEBOXTRON/#-/ -}" \
	--field="     $GUI_USE_ROBERTA!$DESC_USEROBERTA ('USEROBERTA')":CHK "${USEROBERTA/#-/ -}" \
	--field="     $GUI_USE_LUXTORPEDA!$DESC_USELUXTORPEDA ('USELUXTORPEDA')":CHK "${USELUXTORPEDA/#-/ -}" \
	--field=" ":LBL " " \
	--field="     $GUI_USE_WINETRICKS!$DESC_RUN_WINETRICKS ('RUN_WINETRICKS')":CHK "${RUN_WINETRICKS/#-/ -}" \
	--field="     $GUI_USE_WINETRICKSPAKS!$DESC_WINETRICKSPAKS ('WINETRICKSPAKS')" "${WINETRICKSPAKS/#-/ -}" \
	--field="     $GUI_USE_WINECFG!$DESC_RUN_WINECFG ('RUN_WINECFG')":CHK "${RUN_WINECFG/#-/ -}" \
	--field="     $GUI_REGEDIT!$DESC_REGEDIT ('REGEDIT')":CHK "${REGEDIT/#-/ -}" \
	--field="     $GUI_VIRTUALDESKTOP!$DESC_VIRTUALDESKTOP ('VIRTUALDESKTOP')":CHK "${VIRTUALDESKTOP/#-/ -}" \
	--field=" ":LBL " " \
	--field="     $GUI_RUN_CUSTOMCMD!$DESC_RUN_CUSTOMCMD ('RUN_CUSTOMCMD')":CB "${RUN_CUSTOMCMD/#-/ -}!0!1!2" \
	--field="     $GUI_THISCUSTOMCMD!$DESC_CUSTOMCMD $GUI_ECHOPLAC ('CUSTOMCMD')":FL "${CUSTOMCMD/#-/ -}" \
	--field="     $GUI_CUSTOMCMD_ARGS!$DESC_CUSTOMCMD_ARGS ('CUSTOMCMD_ARGS')" "${CUSTOMCMD_ARGS/#-/ -}" \
	--field="     $GUI_ONLY_CUSTOMCMD!$DESC_ONLY_CUSTOMCMD ('ONLY_CUSTOMCMD')":CHK "${ONLY_CUSTOMCMD/#-/ -}" \
	--field="     $GUI_FORK_CUSTOMCMD!$DESC_FORK_CUSTOMCMD ('FORK_CUSTOMCMD')":CHK "${FORK_CUSTOMCMD/#-/ -}" \
	--field=" ":LBL " " \
	--field="     $GUI_INSTALL_RESHADE!$DESC_INSTALL_RESHADE ('INSTALL_RESHADE')":CHK "${INSTALL_RESHADE/#-/ -}" \
	--field="     $GUI_RESHADE_DEPTH3D!$DESC_RESHADE_DEPTH3D ('RESHADE_DEPTH3D')":CHK "${RESHADE_DEPTH3D/#-/ -}" \
	--field="     $GUI_USERESHADE!$DESC_USERESHADE ('USERESHADE')":CHK "${USERESHADE/#-/ -}" \
	--field="     $GUI_ENABLE_VKBASALT!$DESC_ENABLE_VKBASALT ('ENABLE_VKBASALT')":CHK "${ENABLE_VKBASALT/#-/ -}" \
	--field="     $GUI_ALTEXEPATH!$DESC_ALTEXEPATH ('DESC_ALTEXEPATH')":DIR "${ALTEXEPATH/#-/ -}" \
	--field="     $GUI_CHOOSESHADERS!$DESC_CHOOSESHADERS ('CHOOSESHADERS')":CHK "${CHOOSESHADERS/#-/ -}" \
	--field="     $GUI_SHADDIALOG!$BUT_SHADDIALOG":BTN "\"$0\" update gameshaders \"$EFD\"" \
	--field="     $GUI_RUNSBSVR!$DESC_RUNSBSVR ('RUNSBSVR')":CHK "${RUNSBSVR/#-/ -}" \
	--field="     $GUI_SBSVRRS!$DESC_SBSVRRS ('SBSVRRS')":CHK "${SBSVRRS/#-/ -}" \
	--field="     $GUI_SBSVRVK!$DESC_SBSVRVK ('SBSVRVK')":CHK "${SBSVRVK/#-/ -}" \
	--field="     $GUI_VRVIDEOPLAYERARGS!$DESC_VRVIDEOPLAYERARGS ('VRVIDEOPLAYERARGS')" "${VRVIDEOPLAYERARGS/#-/ -}" \
	--field="     $GUI_SBSZOOM!$DESC_SBSZOOM ('SBSZOOM')" "${SBSZOOM/#-/ -}" \
	--field="     $GUI_GAMEWINDOW!$DESC_GAMEWINDOW ('GAMEWINDOW')" "${GAMEWINDOW/#-/ -}" \
	--field="     $GUI_WAITFORTHISPID!$DESC_WAITFORTHISPID ('WAITFORTHISPID')" "${WAITFORTHISPID/#-/ -}" \
	--field="     $GUI_MINVRWINH!$DESC_MINVRWINH ('MINVRWINH')":NUM "${MINVRWINH/#-/ -}" \
	--field=" ":LBL " " \
	--field="     $GUI_CPL!$DESC_CHANGE_PULSE_LATENCY ('CHANGE_PULSE_LATENCY')":CHK "${CHANGE_PULSE_LATENCY/#-/ -}" \
	--field="     $GUI_PULSEMSEC!$DESC_STL_PULSE_LATENCY_MSEC ('STL_PULSE_LATENCY_MSEC')":NUM "${STL_PULSE_LATENCY_MSEC/#-/ -}" \
	--field="     $GUI_DXVK_HUD!$DESC_DXVK_HUD devinfo,fps,frametimes,submissions,drawcalls,pipelines,memory,gpuload,version,api,compiler,samplers,full,1 ('DXVK_HUD')" "${DXVK_HUD/#-/ -}" \
	--field="     $GUI_DXVK_LOG_LEVEL!$DESC_DXVK_LOG_LEVEL ('DXVK_LOG_LEVEL')":CB "${DXVK_LOG_LEVEL/#-/ -}!none!error!warn!info!debug" \
	--field="     $GUI_WINEFSIS!$DESC_WINEFSIS ('WINE_FULLSCREEN_INTEGER_SCALING')":CHK "${WINE_FULLSCREEN_INTEGER_SCALING/#-/ -}" \
	--field="     $GUI_PROTON_LOG!$DESC_PROTON_LOG $HOME/steam-$AID.log ('PROTON_LOG')":CHK "${PROTON_LOG/#-/ -}" \
	--field="     $GUI_PROTON_USE_WINED3D!$DESC_PROTON_USE_WINED3D ('PROTON_USE_WINED3D')":CHK "${PROTON_USE_WINED3D/#-/ -}" \
	--field="     $GUI_PROTON_NO_D3D11!$DESC_PROTON_NO_D3D11 ('PROTON_NO_D3D11')":CHK "${PROTON_NO_D3D11/#-/ -}" \
	--field="     $GUI_PROTON_NO_D3D10!$DESC_PROTON_NO_D3D10 ('PROTON_NO_D3D10')":CHK "${PROTON_NO_D3D10/#-/ -}" \
	--field="     $GUI_PROTON_NO_ESYNC!$DESC_PROTON_NO_ESYNC ('PROTON_NO_ESYNC')":CHK "${PROTON_NO_ESYNC/#-/ -}" \
	--field="     $GUI_PROTON_NO_FSYNC!$DESC_PROTON_NO_FSYNC ('PROTON_NO_FSYNC')":CHK "${PROTON_NO_FSYNC/#-/ -}" \
	--field="     $GUI_PROTONFLAA!$DESC_PROTONFLAA ('PROTON_FORCE_LARGE_ADDRESS_AWARE')":CHK "${PROTON_FORCE_LARGE_ADDRESS_AWARE/#-/ -}" \
	--field="     $GUI_PROTON_DUMP_DEBUG_COMMANDS!$DESC_PROTON_DUMP_DEBUG_COMMANDS ('PROTON_DUMP_DEBUG_COMMANDS')":CHK "${PROTON_DUMP_DEBUG_COMMANDS/#-/ -}" \
	--field="     $GUI_PROTON_DEBUG_DIR!$DESC_PROTON_DEBUG_DIR ('PROTON_DEBUG_DIR')":DIR "${PROTON_DEBUG_DIR/#-/ -}" \
	--field="     $GUI_OVERRIDEPROTON!$(strFix "$DESC_OVERRIDEPROTON" "$PROGCMD") ('OVERRIDEPROTON')":CHK "${OVERRIDEPROTON/#-/ -}" \
	--field="     $GUI_USEPROTON!$DESC_USEPROTON ('USEPROTON')":CB "${USEPROTON/#-/ -}!$PROTYADLIST" \
	--field="     $GUI_USESLR!$DESC_USESLR ('USESLR')":CHK "${USESLR/#-/ -}" \
	--field=" ":LBL " " \
	--field="     $GUI_ATVALIDATE!$DESC_ATVALIDATE ('ATVALIDATE')":NUM "${ATVALIDATE/#-/ -}" \
	--field="     $GUI_IGNOREAUTOTWEAKS!$DESC_IGNOREAUTOTWEAKS ('IGNOREAUTOTWEAKS')":CHK "${IGNOREAUTOTWEAKS/#-/ -}" \
	--field="     $GUI_ATADOPT!$DESC_ATADOPT ('ATADOPT')":CHK "${ATADOPT/#-/ -}" \
	--field="     $GUI_CHECKCATEGORIES!$DESC_CHECKCATEGORIES ('CHECKCATEGORIES')":CHK "${CHECKCATEGORIES/#-/ -}" \
	--field=" ":LBL " " \
	--field="     $GUI_TOGGLEWINDOWS!$DESC_TOGGLEWINDOWS ('TOGGLEWINDOWS')":CHK "${TOGGLEWINDOWS/#-/ -}" \
	--field="     $GUI_GAMEARGS!$DESC_GAMEARGS ('GAMEARGS')" "${GAMEARGS/#-/ -}" \
	--field=" ":LBL " " \
	--field="     $GUI_STRACERUN!$DESC_STRACERUN ('STRACERUN')":CHK "${STRACERUN/#-/ -}" \
	--field="     $GUI_STRACEOPTS!$DESC_STRACEOPTS ('STRACEOPTS')" "${STRACEOPTS/#-/ -}" \
	--field="     $GUI_USENETMON!$DESC_USENETMON ('USENETMON')":CHK "${USENETMON/#-/ -}" \
	--field=" ":LBL " " \
	--field="     $GUI_USERSTART!$DESC_USERSTART $GUI_ECHOPLAC ('USERSTART')":FL "${USERSTART/#-/ -}" \
	--field="     $GUI_USERSTOP!$DESC_USERSTOP $GUI_ECHOPLAC ('USERSTOP')":FL "${USERSTOP/#-/ -}" \
	--field="     $GUI_WAITEDITOR!$DESC_WAITEDITOR ('WAITEDITOR')":NUM "${WAITEDITOR/#-/ -}" \
	--field="     $GUI_OPENEDITOR!$DESC_OPENEDITORURL ('OPENEDITORURL')":CHK "${OPENEDITORURL/#-/ -}" \
	> "$cfgX" &
}
#ENDYADTEMPLATE
#ENDYADGAME

function openSettings {
	writelog "INFO" "${FUNCNAME[0]} - Opening Settings Menu" "X"

	if [ -z "$YADTRAYPID" ]; then
		writelog "INFO" "${FUNCNAME[0]} - trayIcon:" "X"
		trayIcon
	fi

	ipcrm -M "$YADKEY" 2>/dev/null

	cfg1=$(mktemp --tmpdir cfg1.XXXXXXXX)
	cfg2=$(mktemp --tmpdir cfg2.XXXXXXXX)
	cfg3=$(mktemp --tmpdir cfg3.XXXXXXXX)
	cfg4=$(mktemp --tmpdir cfg4.XXXXXXXX)

	resetAID "$1"

	createGameCfg

	if [ -z "$GN" ]; then
		getGameName "$1"
		GN="$GAMENAME"
	fi

	if [ -z "$GN" ]; then
		writelog "ERROR" "${FUNCNAME[0]} - no game name found for '$AID' - this should not happen"
		exit
	fi

	# load  global config for optional gtk css style:
	loadCfg "$STLDEFGLOBALCFG" X

	checkSTLCSS X

	setProtYadList
	createLanguageList

	# The Tab for the current game is almost identical to the Default Game Template Tab, so using a generic function here to avoid redundant code:
	openGameMenu "$STLGAMECFG" "1" "$(strFix "$GUI_SETHEAD1" "$GN" "$AID")" "$cfg1"
	YADPID1="$!"

	openGameMenu "$STLDEFGAMECFG" "2" "$GUI_SETHEAD2" "$cfg2"
	YADPID2="$!"

# adding space before every variable starting with "-" for yad.
# The variables need to be refered one per line as else YADCATLIST in saveYadCfg would not work if using doubledash at the end instead

#STARTYADGLOBAL
	loadCfg "$STLDEFGLOBALCFG" X

	LC_ALL="" "$YAD" --plug="$YADKEY" --tabnum=3 --borders="$YADBORDER" --form --scroll \
	--separator="\n" \
	--quoted-output \
	--columns="$GLOBTABCOLS" \
	--text="<span font_weight='bold'>$GUI_SETHEAD3</span>" \
	--field="     $GUI_DLGLOBAL $PROGCMD!$(strFix "$DESC_DLGLOBAL" "$PROGCMD" "$PROJECTPAGE") ('DLGLOBAL')":CHK "${DLGLOBAL/#-/ -}" \
	--field="     $GUI_STLLANG!$DESC_STLLANG ('STLLANG')":CB "${STLLANG/#-/ -}!$LANGYADLIST" \
	--field="     $GUI_USEGUI!$DESC_USEGUI ('USEGUI')":CB "${USEGUI/#-/ -}!$YAD!$ZENITY" \
	--field="     $GUI_USEWINDECO!$DESC_USEWINDECO ('USEWINDECO')":CHK "${USEWINDECO/#-/ -}" \
	--field="     $GUI_USETRAYICON!$DESC_USETRAYICON ('USETRAYICON')":CHK "${USETRAYICON/#-/ -}" \
	--field="     $GUI_USEGAMEPICS!$DESC_USEGAMEPICS ('USEGAMEPICS')":CHK "${USEGAMEPICS/#-/ -}" \
	--field="     $GUI_USEGAMEPICINMENU!$DESC_USEGAMEPICINMENU ('USEGAMEPICINMENU')":CHK "${USEGAMEPICINMENU/#-/ -}" \
	--field="     $GUI_DLGAMEDATA!$DESC_DLGAMEDATA ('DLGAMEDATA')":CHK "${DLGAMEDATA/#-/ -}" \
	--field="     $GUI_USESTLCSS!$DESC_USESTLCSS '${PROGCMD}-steam' ('USESTLCSS')":CHK "${USESTLCSS/#-/ -}" \
	--field=" ":LBL " " \
	--field="     $GUI_BOXTRONCMD!$DESC_BOXTRONCMD ('BOXTRONCMD')":FL "${BOXTRONCMD/#-/ -}" \
	--field="     $GUI_BOXTRONARGS!$DESC_BOXTRONARGS ('BOXTRONARGS')" "${BOXTRONARGS/#-/ -}" \
	--field="     $GUI_ROBERTACMD!$DESC_ROBERTACMD ('ROBERTACMD')":FL "${ROBERTACMD/#-/ -}" \
	--field="     $GUI_ROBERTAARGS!$DESC_ROBERTAARGS ('ROBERTAARGS')" "${ROBERTAARGS/#-/ -}" \
	--field="     $GUI_LUXTORPEDACMD!$DESC_LUXTORPEDACMD ('LUXTORPEDACMD')":FL "${LUXTORPEDACMD/#-/ -}" \
	--field="     $GUI_LUXTORPEDAARGS!$DESC_LUXTORPEDAARGS ('LUXTORPEDAARGS')" "${LUXTORPEDAARGS/#-/ -}" \
	--field="     $GUI_GAMCONBIN!$DESC_GAMCON ('GAMCON')":FL "${GAMCON/#-/ -}" \
	--field=" ":LBL " " \
	--field="     $GUI_VRVIDEOPLAYER!$DESC_VRVIDEOPLAYER ('VRVIDEOPLAYER')":FL "${VRVIDEOPLAYER/#-/ -}" \
	--field=" ":LBL " " \
	--field="     $GUI_NETMON!$DESC_NETMON ('NETMON')":FL "${NETMON/#-/ -}" \
	--field="     $GUI_NETMONDIR!$DESC_NETMONDIR ('NETMONDIR')":DIR "${NETMONDIR/#-/ -}" \
	--field="     $GUI_NETOPTS!$DESC_NETOPTS ('NETOPTS')" "${NETOPTS/#-/ -}" \
	--field=" ":LBL " " \
	--field="     $GUI_GLOBALREGDIR!$DESC_GLOBALREGDIR ('GLOBALREGDIR')":DIR "${GLOBALREGDIR/#-/ -}" \
	--field="     $GUI_GLOBALTWEAKDIR!$DESC_GLOBALTWEAKDIR ('GLOBALTWEAKDIR')":DIR "${GLOBALTWEAKDIR/#-/ -}" \
	--field="     $GUI_GLOBALSBSTWEAKDIR!$DESC_GLOBALSBSTWEAKDIR ('GLOBALSBSTWEAKDIR')":DIR "${GLOBALSBSTWEAKDIR/#-/ -}" \
	--field="     $GUI_GLOBALUSERTWEAKDIR!$DESC_GLOBALUSERTWEAKDIR ('GLOBALUSERTWEAKDIR')":DIR "${GLOBALUSERTWEAKDIR/#-/ -}" \
	--field="     $GUI_GLOBALTWEAKCMDDIR!$DESC_GLOBALTWEAKCMDDIR ('GLOBALTWEAKCMDDIR')":DIR "${GLOBALTWEAKCMDDIR/#-/ -}" \
	--field="     $GUI_GLOBALCATEGORYDIR!$DESC_GLOBALCATEGORYDIR ('GLOBALCATEGORYDIR')":DIR "${GLOBALCATEGORYDIR/#-/ -}" \
	--field="     $GUI_GLOBALMISCDIR!$DESC_GLOBALMISCDIR ('GLOBALMISCDIR')":DIR "${GLOBALMISCDIR/#-/ -}" \
	--field="     $GUI_GLOBALSTLLANGDIR!$DESC_GLOBALSTLLANGDIR ('GLOBALSTLLANGDIR')":DIR "${GLOBALSTLLANGDIR/#-/ -}" \
	--field="     $GUI_STRACEDIR!$DESC_STRACEDIR ('STRACEDIR')":DIR "${STRACEDIR/#-/ -}" \
	--field="     $PROGNAME $GUI_LOGDIR!$(strFix "$DESC_LOGDIR" "$PROGNAME") ('LOGDIR')":DIR "${LOGDIR/#-/ -}" \
	--field="     $GUI_LOGLEVEL!$DESC_LOGLEVEL ('LOGLEVEL')":CB "${LOGLEVEL/#-/ -}!0!1!2" \
	--field=" ":LBL " " \
	--field="     $GUI_CREATETWEAKS!$DESC_CREATETWEAKS ('CREATETWEAKS')":CHK "${CREATETWEAKS/#-/ -}" \
	--field="     $GUI_ATVALIDATE!$DESC_ATVALIDATE ('ATVALIDATE')":NUM "${ATVALIDATE/#-/ -}" \
	--field="     $GUI_AUTOTWEAKS!$DESC_AUTOTWEAKS ('AUTOTWEAKS')" "${AUTOTWEAKS/#-/ -}" \
	--field=" ":LBL " " \
	--field="     $GUI_USENOTIFIER!$DESC_USENOTIFIER ('USENOTIFIER')":CHK "${USENOTIFIER/#-/ -}" \
	--field="     $GUI_NOTY!$DESC_NOTY ('NOTY')":FL "${NOTY/#-/ -}" \
	--field=" ":LBL " " \
	--field="     $GUI_STLEDITOR!$DESC_STLEDITOR ('STLEDITOR')":FL "${STLEDITOR/#-/ -}" \
	--field="     $GUI_MAXASK!$DESC_MAXASK ('MAXASK')":NUM "${MAXASK/#-/ -}" \
	--field="     $GUI_BROWSER!$DESC_BROWSER ('BROWSER')":FL "${BROWSER/#-/ -}" \
	--field=" ":LBL " " \
	--field="     $GUI_DOWNLOAD_RESHADE!$DESC_DOWNLOAD_RESHADE ('DOWNLOAD_RESHADE')":CHK "${DOWNLOAD_RESHADE/#-/ -}" \
	--field="     $GUI_RSVERS!$DESC_RSVERS ('RSVERS')" "${RSVERS/#-/ -}" \
	--field="     $GUI_RESHADESRCDIR!$DESC_RESHADESRCDIR ('RESHADESRCDIR')":DIR "${RESHADESRCDIR/#-/ -}" \
	--field="     $GUI_RS_64!$DESC_RS_64 ('RS_64')" "${RS_64/#-/ -}" \
	--field="     $GUI_RS_32!$DESC_RS_32 ('RS_32')" "${RS_32/#-/ -}" \
	--field="     $GUI_RS_D3D47_64!$DESC_RS_D3D47_64 ('RS_D3D47_64')" "${RS_D3D47_64/#-/ -}" \
	--field="     $GUI_RS_D3D47_32!$DESC_RS_D3D47_32 ('RS_D3D47_32')" "${RS_D3D47_32/#-/ -}" \
	--field="     $GUI_SHADERBLACKLIST!$DESC_SHADERBLACKLIST ('SHADERBLACKLIST')" "${SHADERBLACKLIST/#-/ -}" \
	--field="     $GUI_DLSHADER!$DESC_DLSHADER ('DLSHADER')":CHK "${DLSHADER/#-/ -}" \
	--field=" ":LBL " " \
	--field="     $GUI_SAVESETSIZE!$DESC_SAVESETSIZE ('SAVESETSIZE')":CHK "${SAVESETSIZE/#-/ -}" \
	--field="     $GUI_AUTOPULLPROTON!$DESC_AUTOPULLPROTON ('AUTOPULLPROTON')":CHK "${AUTOPULLPROTON/#-/ -}" \
	--field="     $GUI_AUTOLASTPROTON!$DESC_AUTOLASTPROTON ('AUTOLASTPROTON')":CHK "${AUTOLASTPROTON/#-/ -}" \
	--field="     $GUI_CUSTPROTDLDIR!$DESC_CUSTPROTDLDIR ('CUSTPROTDLDIR')":DIR "${CUSTPROTDLDIR/#-/ -}" \
	--field="     $GUI_CUSTPROTEXTDIR!$DESC_CUSTPROTEXTDIR ('CUSTPROTEXTDIR')":DIR "${CUSTPROTEXTDIR/#-/ -}" \
	--field="     $GUI_ADDCUSTPROT!$BUT_ADDCUSTPROT":BTN "\"$0\" acp" \
	--field="     $GUI_DLCUSTPROT!$BUT_DLCUSTPROT":BTN "\"$0\" dcp" \
	--field="     $GUI_GAMETABCOLS!$DESC_GAMETABCOLS ('GAMETABCOLS')":CB "${GAMETABCOLS/#-/ -}!1!2!3!4!5" \
	--field="     $GUI_GLOBTABCOLS!$DESC_GLOBTABCOLS ('GLOBTABCOLS')":CB "${GLOBTABCOLS/#-/ -}!1!2!3!4!5" \
	--field="     $GUI_VORTTABCOLS!$DESC_VORTTABCOLS ('VORTTABCOLS')":CB "${VORTTABCOLS/#-/ -}!1!2!3!4!5" \
	> "$cfg3" &
	YADPID3="$!"

#ENDYADGLOBAL

#STARTYADVORTEX
	loadCfg "$STLVORTEXCFG" X

	LC_ALL="" "$YAD" --plug="$YADKEY" --tabnum=4 --borders="$YADBORDER" --form --scroll \
	--separator="\n" \
	--quoted-output \
	--columns="$VORTTABCOLS" \
	--text="<span font_weight='bold'>$GUI_SETHEAD4</span>" \
	--field=" ":LBL " " \
	--field="     $GUI_VORTEXINSTALL!$DESC_VORTEXINSTALL ('VORTEXINSTALL')":CHK "${VORTEXINSTALL/#-/ -}" \
	--field="     $GUI_VORTEXWINE!$DESC_VORTEXWINE ('VORTEXWINE')":FL "${VORTEXWINE/#-/ -}" \
	--field="     $GUI_VORTEXPREFIX!$DESC_VORTEXPREFIX ('VORTEXPREFIX')":DIR "${VORTEXPREFIX/#-/ -}" \
	--field="     $GUI_VORTEXWINEDEBUG!$DESC_VORTEXWINEDEBUG ('VORTEXWINEDEBUG')" "${VORTEXWINEDEBUG/#-/ -}" \
	--field="     $GUI_VORTEX_DXVK_LOG_LEVEL!$DESC_VORTEX_DXVK_LOG_LEVEL ('VORTEX_DXVK_LOG_LEVEL')":CB "${VORTEX_DXVK_LOG_LEVEL/#-/ -}!none!error!warn!info!debug" \
	--field="     $GUI_VORTEX_DXVK_LOG_PATH!$DESC_VORTEX_DXVK_LOG_PATH ('VORTEX_DXVK_LOG_PATH')" "${VORTEX_DXVK_LOG_PATH/#-/ -}" \
	--field="     $GUI_VORTEXDOWNLOADPATH!$DESC_VORTEXDOWNLOADPATH ('VORTEXDOWNLOADPATH')":DIR "${VORTEXDOWNLOADPATH/#-/ -}" \
	--field="     $GUI_VORTEXVERSION!$DESC_VORTEXVERSION ('VORTEXVERSION')" "${VORTEXVERSION/#-/ -}" \
	--field="     $GUI_ADDVORTSTAGE!$BUT_ADDVORTSTAGE":BTN "stl vortex stage" \
	--field="     $GUI_DISAS!$(strFix "$DESC_DISABLE_AUTOSTAGES" "$PROGNAME") ('DISABLE_AUTOSTAGES')":CHK "${DISABLE_AUTOSTAGES/#-/ -}" \
	--field=" ":LBL " " \
	--field=" ":LBL " " > "$cfg4" &
	YADPID4="$!"
#ENDYADVORTEX

	writelog "INFO" "${FUNCNAME[0]} - getting current Settings resolution"

	TITLE="${PROGNAME}-Settings"

	loadCfg "$STLGUICFG" X
	updateWinRes "$TITLE" "$STLGUICFG" "SETWIDTH" "SETHEIGHT" &

	BUT0="$BUT_SAVEPLAY"
	BUT1="$BUT_EDITORMENU"
	BUT2="$BUT_RELOAD"
#	BUT3="BROKEN"
	BUT4="$BUT_SAVERELOAD"
	BUT5="$BUT_PLAY"
	BUT6="$BUT_EXIT"

	SETHEAD="${PROGNAME} (${PROGCMD}) - ${PROGVERS} $GUI_SET"
	
	LC_ALL="" "$YAD" --notebook --key="$YADKEY" --borders="$YADSETBORD" --window-icon="$STLICON"  --scroll --center "$WINDECO" \
	--tab="$GUI_TAB1" --tab="$GUI_TAB2" --tab="$GUI_TAB3" --tab="$GUI_TAB4" \
    --title="$TITLE" \
	--geometry="$SETWIDTH"x"$SETHEIGHT"+0+0 \
    --text="$SETHEAD" \
	--button="$BUT6":6 \
	--button="$BUT5":5 \
	--button="$BUT1":1 \
	--button="$BUT2":2 \
	--button="$BUT4":4 \
	--button="$BUT0":0
	case $? in
		6)  {
				closeSTL
				writelog "INFO" " ######### STOP EARLY $PROGNAME $PROGVERS #########"
				exit
			}
		;;
		5) 	{
				if [ "$ISGAME" -ge 1 ]; then
					writelog "INFO" "${FUNCNAME[0]} - starting game" "E"
				else
					 if [ "$ISGAME" -ne 1 ] && [ "$AID" != "$PLACEHOLDERAID" ]; then
						STEAMARGS=(-applaunch "$AID")
						writelog "INFO" "${FUNCNAME[0]} - -------- starting game $AID in steam --------" "E"
						"$STEAM" "${STEAMARGS[@]}" 2>/dev/null >/dev/null &
					fi
				fi
			}
		;;
		1) 	{
			writelog "INFO" "${FUNCNAME[0]} - exiting GUI and opening EditorDialog"
			EditorDialog "$AID"
			}
		;;
		2) 	{
			writelog "INFO" "${FUNCNAME[0]} - Reload Configs and restart Settings GUI"
			cleanYadFiles
			if [ "$SAVESETSIZE" -eq 1 ] ; then
				sleep 1 # "required" for the forked updateWinRes process to write the new resolution
			fi
			"${FUNCNAME[0]}"
			}
		;;
		4) {
			writelog "INFO" "${FUNCNAME[0]} - start saveAllYadConfigs"
			saveAllYadConfigs
			writelog "INFO" "${FUNCNAME[0]} - stop saveAllYadConfigs"
			cleanYadFiles
			if [ "$SAVESETSIZE" -eq 1 ] ; then
				sleep 1 # "required" for the forked updateWinRes process to write the new resolution
			fi
			"${FUNCNAME[0]}"
			}
		;;
		0) 	{
			writelog "INFO" "${FUNCNAME[0]} - start saveAllYadConfigs"
			saveAllYadConfigs
			writelog "INFO" "${FUNCNAME[0]} - stop saveAllYadConfigs"
			if [ "$ISGAME" -ge 1 ]; then
				writelog "INFO" "${FUNCNAME[0]} - starting game"
			else
				 if [ "$ISGAME" -ne 1 ] && [ "$AID" != "$PLACEHOLDERAID" ]; then
					STEAMARGS=(-applaunch "$AID")
					writelog "INFO" "${FUNCNAME[0]} - -------- starting game $AID in steam --------" "E"
					"$STEAM" "${STEAMARGS[@]}" 2>/dev/null >/dev/null &
				fi
			fi
			}
		;;
	esac

	writelog "INFO" "${FUNCNAME[0]} - cleaning YadFiles"
	cleanYadFiles
	writelog "INFO" "${FUNCNAME[0]} - cleaned YadFiles"
	writelog "INFO" "${FUNCNAME[0]} - Leaving Settings Menu"
}

### YAD SETTINGS END ###

function USEDLGLOBAL {
	if [ -z "$DLGLOBAL" ]; then
		if [ -d "$SYSTEMSTLCFGDIR" ]; then
			DLGLOBAL=0
		else
			DLGLOBAL=1
		fi
	fi

	if	[ "$DLGLOBAL" -eq 0 ]; then
		writelog "INFO" "${FUNCNAME[0]} - DLGLOBAL is disabled in the config"
		echo "$DLGLOBAL"
	elif [ "$DLGLOBAL" -eq 1 ] && [ -d "$SYSTEMSTLCFGDIR" ]; then
		writelog "INFO" "${FUNCNAME[0]} - DLGLOBAL is disabled because '$SYSTEMSTLCFGDIR' exists"
		echo 0
	else
		writelog "INFO" "${FUNCNAME[0]} - DLGLOBAL is enabled - using '$GLDLSTLDIR' as global directory"
		echo "$DLGLOBAL"
	fi
}

function howto {
	echo "========================="
	echo "$PROGNAME $PROGVERS"
	echo "========================="
	echo "Usage: $PROGCMD [options]..."
	echo ""
	echo "where options include:"
	echo "    compat <cmd>                     Will (add|del|get) $PROGCMD as" 
	echo "                                     Steam compatibility tool"
	echo "                                     under 'STEAMCOMPATOOLS'"
	echo "    settings <value>                 Opens the settings menu"
	echo "                                     (for 'SteamAppID' or 'last')"
	echo "    dlcustomproton|dcp <url>         Download/install custom Proton"
	echo "                                     from filerequester or"
	echo "                                     directly from <url>"
	echo "    addcustomproton|acp <path>       Adds local custom Proton to"
	echo "                                     the internal list from dialog"
	echo "                                     or directly from <path>"
	echo "    update <value>                   Updates <value>:"
    echo "           git                       Will update $PROGCMD git repo"
    echo "                                     in 'GLDLSTLDIR'"
	echo "           gamedata <SteamAppID>     Updates missing desktopfiles"
	echo "                                     and pictures of installed games"
	echo "                                     or only from <SteamAppID>"
	echo "           allgamedata               The same as above for"
	echo "                                     all games in $SCV"
	echo "           shaders <shadername>      all enabled shaders or <shadername>"
	echo "                                     'list' to list shaders"
	echo "           gameshaders <gamedir>     open shader selection for <gamedir>"
	echo "           reshade <version>         (re)-download ReShade (version)"
	echo "    vortex <value>                   Vortex commandline options"
	echo "           install                   Installs vortex"
	echo "           start                     Starts vortex"
	echo "           getset                    Show config of installed vortex"
	echo "           stage <path>              Add vortex stage via dialog"
    echo "                                     or directly the one given in <path>"
	echo "    autotweaks|at ('dl') <platform>  Import all fixes as $PROGCMD-tweak"
    echo "                                     from <platform>. Valid platforms:"
    echo "                                     $AUTOTWEAKPLATFORMS"
    echo "                                     'dl' updates the source before import"
 	echo "    launcher <args>                  Start the Game Launcher"
	echo "             CATEGORY                Show only installed games"
	echo "                                     from Steam Category CATEGORY"
	echo "             menu                    Open Steam Category Menu"
	echo "             last                    Open last Game as 'Menu'"
	echo "             auto                    Create/Download data for all"
	echo "                                     installed games before opening the launcher"
	echo "             update                  ReCreate all Category Menus"
	echo "                                     Can be combined with auto"
	echo "    set <var> <for> <value>          Change configuration settings"
	echo "                                     Example:"
	echo "    set RUN_REPLAY all 1             Set RUN_REPLAY for all games to 1"
	echo "    lang=<option>                    Mostly to get translated configs"
	echo "                                     on inital setup. <option> can be"
	echo "                                     a language file name without suffix"
	echo "                                     or an path to a valid language file"
}

function writelog {
#DBGMS "IN - $2"
# LOGLEVEL=0: disable log

# LOGLEVEL=1: log only:
LOGONE="404,ERROR,SKIP,WARN,CREATE"

# LOGLEVEL=2: log also - including:
#LOGTWO="HACK,INFO,NEW,OK,UPDATE,WAIT"

	if [ -z "$LOGLEVEL" ]; then
		LOGLEVEL=2
	fi
	
	if [ "$AID" == "$PLACEHOLDERAID" ]; then
		LOGFILE="$TEMPLOG"
	fi

	if [ "$LOGLEVEL" -eq 1 ]; then
		if grep -q "$1" <<< "$LOGONE"; then
			echo "$(date) $1 - $2" >> "$LOGFILE"
		fi
	fi

	if [ "$LOGLEVEL" -eq 2 ]; then
		echo "$(date) $1 - $2" >> "$LOGFILE"
	fi

	if [ -n "$3" ]; then
		if [ "$3" == "E" ]; then
			echo "$(date) $1 - $2"
		fi
	fi
#DBGMS "OUT - $2"
}

# generic git clone/pull function
function gitUpdate {
	GITDIR="$1"
	GITURL="$2"
	if [ -d "$GITDIR/.git" ]; then
		writelog "INFO" "${FUNCNAME[0]} - pulling '$GITURL' update in '$GITDIR'"
		extRun "$GIT" --work-tree="$GITDIR" --git-dir="$GITDIR/.git" pull --rebase=false
	else
		mkdir "$GITDIR" >/dev/null 2>/dev/null
		writelog "INFO" "${FUNCNAME[0]} - cloning '$GITURL' in '$GITDIR'"
		extRun "$GIT" clone "$GITURL" "$GITDIR"
	fi
}

function loadCfg {
	CFGFILE="$1"

	if [ -f "$CFGFILE" ]; then
		# disable logging here when the program just started (cosmetics)
		if [ -z "$2" ]; then
			writelog "INFO" "${FUNCNAME[0]} - '$CFGFILE' START"
		fi

		while read -r line; do
			export "${line//\"/}"
		done <<< "$(grep -v "^#\|^$" "$CFGFILE")"

		# disable logging here when the program just started (cosmetics)
		if [ -z "$2" ]; then
			writelog "INFO" "${FUNCNAME[0]} - '$CFGFILE' STOP"
		fi
	fi
}

# some steamvariables need to be disabled to get start external programs correcty:
function extRun {
	LC_ALL="" PATH="$STLPATH" LD_LIBRARY_PATH="" LD_PRELOAD="" "$@"
}

#function extWine32Run {
#	writelog "INFO" "${FUNCNAME[0]} - started '$*' with: WINE=\"$RUNWINE\" WINEARCH=win32 WINEDEBUG=\"-all\" WINEPREFIX=\"$GPFX\""
#	LC_ALL="" PATH="$STLPATH" LD_LIBRARY_PATH="" WINE="$RUNWINE" WINEARCH=win32 WINEDEBUG="-all" WINEPREFIX="$GPFX" "$@"
#}

function extWine64Run {
	writelog "INFO" "${FUNCNAME[0]} - Command is: LC_ALL=\"\" PATH=\"$STLPATH\" LD_LIBRARY_PATH=\"\" WINE=\"$RUNWINE\" WINEARCH=win64 WINEDEBUG=\"-all\" WINEPREFIX=\"$GPFX\" \"$*\""
	LC_ALL="" PATH="$STLPATH" LD_LIBRARY_PATH="" WINE="$RUNWINE" WINEARCH=win64 WINEDEBUG="-all" WINEPREFIX="$GPFX" "$@"
}

function usevkBasalt {
	SBSSHADERDIR="Depth3D/Shaders"
	SBSSHADER="$SBSSHADERDIR/SuperDepth3D_VR.fx"
	if [ -n "$ENABLE_VKBASALT" ] ; then
		if [ "$ENABLE_VKBASALT" -eq 1 ] ; then
			writelog "INFO" "${FUNCNAME[0]} - vkBasalt enabled"
			if [ ! -f "$VKBASALT_CONFIG_FILE" ]; then
				writelog "INFO" "${FUNCNAME[0]} - creating default VKBASALT_CONFIG_FILE '$VKBASALT_CONFIG_FILE'"
				{
				echo "effects = reshade"
				echo "reshadeIncludePath = $STLCFGDIR/$SBSSHADERDIR"
				echo "reshade = $STLCFGDIR/$SBSSHADER"
				} >> "$VKBASALT_CONFIG_FILE"
			else
				writelog "SKIP" "${FUNCNAME[0]} - default VKBASALT_CONFIG_FILE '$VKBASALT_CONFIG_FILE' already exists"
			fi
			
			if [ ! -f "$STLCFGDIR/$SBSSHADER" ]; then
				writelog "404" "${FUNCNAME[0]} - Depth3D shader '$STLCFGDIR/$SBSSHADER' not found - downloading"
				dlShaders "depth3d"
			else
				writelog "OK" "${FUNCNAME[0]} - looks like Depth3D shader is ready at '$STLCFGDIR/$SBSSHADER'"
			fi
		fi
	fi
}

function getWindowHeight {
	WINID="$1"
	"$XWININFO" -id "$WINID" -stats | awk '$1=="-geometry" {print $2}' | cut -d '+' -f1 | cut -d 'x' -f2
}

function waitForGameWindow {
	writelog "INFO" "${FUNCNAME[0]} trying to autofind game windowid for the biggest window of game exe '$GE' running with PID '$SBSVRKGPID'"

	FOUNDWIN=0

	while [ "$("$XDO" search --pid "$SBSVRKGPID" | wc -l)" -eq 0 ]; do 
		writelog "WAIT" "${FUNCNAME[0]} - waiting for any window id to appear for PID '$SBSVRKGPID' - currently '$("$XDO" search --pid "$SBSVRKGPID" | wc -l)'"
		sleep 1
		if [ -f "$CLOSETMP" ]; then
			writelog "WAIT" "${FUNCNAME[0]} - $PROGCMD is just closing - leaving loop"
			break
		fi
	done
	writelog "INFO" "${FUNCNAME[0]} - found '$("$XDO" search --pid "$SBSVRKGPID" | wc -l)' window ids of PID '$SBSVRKGPID' to analyze"	

	while read -r WINS; do
		if [ "$("$XPROP" -id "$(printf 0x%x'\n' "$WINS")" | grep "_NET_WM_STATE(ATOM)" -c)" -ge 1 ]; then
			writelog "INFO" "${FUNCNAME[0]} - found a controllable windowid"
			WSIZ="$(getWindowHeight "$WINS")"
			if [ "$WSIZ" -lt "$MINVRWINH" ]; then
				writelog "SKIP" "${FUNCNAME[0]} - '$(printf 0x%x'\n' "$WINS")' height is less than $MINVRWINH - this is very likely not the game window - skipping"
			else
				writelog "INFO" "${FUNCNAME[0]} found windowid $(printf 0x%x'\n' "$WINS") for '$GE' running with PID '$SBSVRKGPID'"
				export GAMEWINDOWID="$WINS"
				FOUNDWIN=1
				break
			fi
		fi
	done <<< "$("$XDO" search --pid "$SBSVRKGPID")"

	if [ "$FOUNDWIN" -eq 0 ]; then
		if [ -f "$CLOSETMP" ]; then
			writelog "WAIT" "${FUNCNAME[0]} - $PROGCMD is just closing - leaving loop"
		else
			writelog "INFO" "${FUNCNAME[0]} - no usable game window found - trying again"
			"${FUNCNAME[0]}"
		fi
	else
		writelog "INFO" "${FUNCNAME[0]} - found a usable gamewindow'"
	fi
}

function SBSstartSVR {
	if [ "$RUNSBSVR" -ge 1 ]; then
		SVRJUSTSTARTED=0
		STEAMVRARGS=(-applaunch 250820)

		writelog "INFO" "${FUNCNAME[0]} - -------- starting SBS-VR --------"

		if "$PGREP" -a "vrcompositor" >/dev/null ; then
			writelog "INFO" "${FUNCNAME[0]} - looks like SteamVR is already running - skipping this function"
		else
			if ! "$PGREP" -a "vrcompositor" >/dev/null ; then
				writelog "INFO" "${FUNCNAME[0]} - vrcompositor not running, so starting SteamVR now:"
				if ! "$STEAM" "${STEAMVRARGS[@]}" 2>/dev/null >/dev/null ; then
					writelog "SKIP" "${FUNCNAME[0]} - starting SteamVR FAILED - skipping SBS-VR"
					export RUNSBSVR=0
				else
					writelog "OK" "${FUNCNAME[0]} - started SteamVR"
					SVRJUSTSTARTED=1
				fi
			fi

			if ! "$PGREP" -a "vrstartup" >/dev/null ; then
				writelog "INFO" "${FUNCNAME[0]} - no vrstartup process running"
			else
				if [ "$SVRJUSTSTARTED" -eq 1 ]; then
					writelog "INFO" "${FUNCNAME[0]} - SteamVR initializing"
					while true; do
						writelog "INFO" "${FUNCNAME[0]} - waiting for end of vrstartup"
						if ! "$PGREP" -a "vrstartup" >/dev/null ; then
							break
						fi
						if [ -f "$CLOSETMP" ]; then
							writelog "WAIT" "${FUNCNAME[0]} - $PROGCMD is just closing - leaving loop"
							break
						fi
					done
				else
					writelog "SKIP" "${FUNCNAME[0]} - vrstartup found, but we didn't start SteamVR before! - skipping SBS-VR - just in case"
					export RUNSBSVR=0
				fi
			fi

			if [ "$SVRJUSTSTARTED" -eq 1 ]; then
				while true; do
					if ! "$PGREP" -a "vrstartup" >/dev/null ; then
						writelog "WAIT" "${FUNCNAME[0]} - no vrstartup instance running"
						break
					fi
					if [ -f "$CLOSETMP" ]; then
						writelog "WAIT" "${FUNCNAME[0]} - $PROGCMD is just closing - leaving loop"
						break
					fi
					writelog "WAIT" "${FUNCNAME[0]} - waiting for end of vrstartup"
				done
			fi

			if [ "$SVRJUSTSTARTED" -eq 1 ]; then
			MAXWAIT=10
			COUNTER=0
				while ! "$PGREP" -a "vrcompositor" >/dev/null; do
					if [[ "$COUNTER" -ge "MAXWAIT" ]]; then
						writelog "SKIP" "${FUNCNAME[0]} - ERROR - timeout waiting for SteamVR - exit"
						"$PKILL" -f "$VRVIDEOPLAYER"
						RUNSBSVR=0
						exit 1
					fi
					writelog "WAIT" "${FUNCNAME[0]} - sec $COUNTER/$MAXWAIT waiting for vrcompositor"
					COUNTER=$((COUNTER+1))
					sleep 1
				done
			else
				writelog "INFO" "${FUNCNAME[0]} -  we didn't start SteamVR before so no need to wait for vrcompositor"
			fi

			if "$PGREP" -a "vrcompositor" >/dev/null ; then
				while true; do
					if ! "$PGREP" -a "vrstartup" >/dev/null ; then
						writelog "WAIT" "${FUNCNAME[0]} - no vrstartup instance running - looks good"
						break
					fi
					sleep 1
					writelog "WAIT" "${FUNCNAME[0]} - waiting for end of vrstartup"
				done

				writelog "OK" "${FUNCNAME[0]} - success - SteamVR running"
				sleep 1 # better safe than sorry
				
			else
				writelog "SKIP" "${FUNCNAME[0]} - SteamVR start failed - vrcompositor still not running - skipping SBS-VR!"
				export RUNSBSVR=0
			fi
		fi
	fi
}

function getGameWindowName {
	if [ -n "$GAMEWINDOW" ] && [ "$GAMEWINDOW" != "empty" ] ; then
		writelog "SKIP" "${FUNCNAME[0]} - already have the gamewindow name: '$GAMEWINDOW' - skipping"
	else
		if [ -z "$GAMEWINDOWID" ]; then
			GAMEWINDOWID="$1"
		fi

		writelog "INFO" "${FUNCNAME[0]} - the windowid used for 'AUTOGAMEWINDOW' is '$GAMEWINDOWID'"

		AUTOGAMEWINDOW="$("$XWININFO" -id "$GAMEWINDOWID" -stats | grep "$GAMEWINDOWID" | cut -d '"' -f2)"
		if [ -n "$AUTOGAMEWINDOW" ]; then
			if grep -q "has no name" <<< "$AUTOGAMEWINDOW"; then
				writelog "INFO" "${FUNCNAME[0]} - no valid window name found - contains 'has no name'"
			else
				writelog "INFO" "${FUNCNAME[0]} - autodetected gamewindow name '$AUTOGAMEWINDOW' from windowid '$GAMEWINDOWID' - adding it into '$SBSTWEAKCFG' for future use"
				updateConfigEntry "GAMEWINDOW" "$AUTOGAMEWINDOW" "$STLGAMECFG"
				# to make contributing sbstweaks more comfortable also in to $SBSTWEAKCFG
				updateConfigEntry "GAMEWINDOW" "$AUTOGAMEWINDOW" "$SBSTWEAKCFG"
				GAMEWINDOW="$AUTOGAMEWINDOW"
			fi
		else
			writelog "INFO" "${FUNCNAME[0]} - no gamewindow name '$AUTOGAMEWINDOW' autodetected from windowid '$GAMEWINDOWID'"
		fi
	fi
}

function getGameWindowData {
	SBSgetGamePID

	waitForGameWindow

	if [ "$GAMEWINDOWID" == "0x0" ]; then
		writelog "SKIP" "${FUNCNAME[0]} - autodetecting the windowid failed - has to be selected manually"
		GAMEWINDOWID="$(printf 0x%x'\n' "$("$XDO" selectwindow)")"
	fi

	if [ -n "$GAMEWINDOWID" ]; then


		WSIZ="$(getWindowHeight "$WINS")"
		writelog "INFO" "${FUNCNAME[0]} - Found Window Height for gameid '$GAMEWINDOWID' is '$WSIZ' and minimal VR Height is '$MINVRWINH'"

		if [ "$WSIZ" -lt "$MINVRWINH" ]; then
			writelog "SKIP" "${FUNCNAME[0]} - found GAMEWINDOWID '$GAMEWINDOWID' is smaller than allowed MINVRWINH '$MINVRWINH for game '$GN'"
			writelog "SKIP" "${FUNCNAME[0]} - not saving game window as this is possibly is not the correct window"
		else
			# GAMEWINDOWID is already enough to continue, but also saving the GAMEWINDOW into the config to speed up future starts
			if [ "$GAMEWINDOWID" != "0x0" ]; then
				getGameWindowName "$GAMEWINDOWID"
			else
				writelog "SKIP" "${FUNCNAME[0]} - GAMEWINDOWID '$GAMEWINDOWID' is invalid - giving up!"
			fi
		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - could not determine the windowid of the game GAMEWINDOWID and therefore also not the GAMEWINDOW"
	fi
}

function getCfgHeader {
	echo "#########"
	echo "#GAMENAME=\"$GAMENAME\""
	echo "#GAMEEXE=\"$GE\""
	echo "#GAMEID=\"$AID\""
	echo "#PROTONVERSION=\"$PROTONVERSION\""
	echo "#########"	
}

function SBScheckSBScfg  {
	if [ "$RUNSBSVR" -ge 1 ]; then
		if [ -f "$SBSTWEAKCFG" ]; then
			writelog "INFO" "${FUNCNAME[0]} - loading SBS configfile '$SBSTWEAKCFG' to get current values"
			loadCfg "$SBSTWEAKCFG"
		else
			getGameName "$AID"
			getCfgHeader >> "$SBSTWEAKCFG"
			writelog "INFO" "${FUNCNAME[0]} - created base config $SBSTWEAKCFG"
		fi

		if [ -n "$GAMEWINDOW" ] && [ "$GAMEWINDOW" != "empty" ] ; then
			writelog "SKIP" "${FUNCNAME[0]} - GAMEWINDOW '$GAMEWINDOW' found in config - ready"
		else
			getGameWindowData
		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - skipping because RUNSBSVR was set to 0"
	fi
}

function SBSgetGamePID {
	if [ "$RUNSBSVR" -ge 1 ]; then
		if [ -z "$SBSVRKGPID" ]; then
			writelog "INFO" "${FUNCNAME[0]} - getting the game PID"
			while true; do
				if [ -n "$GAMEWINDOW" ] && [ "$GAMEWINDOW" != "empty" ] ; then
					GPID="$("$XWININFO" -name "${GAMEWINDOW//\"/}" -wm | grep "Process id:" | awk -F 'Process id: ' '{print $2}' | cut -d ' ' -f1)"
					if [ -n "$GPID" ]; then
						writelog "INFO" "${FUNCNAME[0]} - game pid '$GPID' found for GAMEWINDOW '$GAMEWINDOW'"
						export SBSVRKGPID="$GPID"
						break
					fi
				else
					waitForGamePid
					GPID="$(GAMEPID)"

					if [ -n "$GPID" ]; then
						writelog "INFO" "${FUNCNAME[0]} - game pid '$GPID' found"
						export SBSVRKGPID="$GPID"
						break
					fi
				fi
			done
			
			if [ -z "$SBSVRKGPID" ]; then
				writelog "ERROR" "${FUNCNAME[0]} - no game pid SBSVRKGPID found!"
			else
				writelog "OK" "${FUNCNAME[0]} - success - found PID '$SBSVRKGPID'"
			fi
		else
			writelog "OK" "${FUNCNAME[0]} - already have game PID '$SBSVRKGPID' - nothing to do here"
		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - skipping because RUNSBSVR was set to 0"
	fi
}

function SBSrunVRVideoPlayer {
	
	SBSVRWINNAME="vr-video-player"

	if [ "$RUNSBSVR" -ge 1 ]; then
		if [ -z "$GAMEWINDOWID" ]; then
			writelog "SKIP" "${FUNCNAME[0]} - ERROR - GAMEWINDOWID is empty - "
			writelog "SKIP" "${FUNCNAME[0]} - ERROR - forcefully killing game with $PKILL -9 '$SBSVRKGPID' - should exit this script as well"
			"$PKILL" -9 "$SBSVRKGPID"
		else
			if [ -z "$VRVIDEOPLAYERARGS" ];
			then
				writelog "SKIP" "${FUNCNAME[0]} - ERROR - no VRVIDEOPLAYERARGS '$VRVIDEOPLAYERARGS'"
			fi

			IFS=" " read -r -a RUNVRVIDEOPLAYERARGS <<< "$VRVIDEOPLAYERARGS"
			writelog "INFO" "${FUNCNAME[0]} - starting '$VRVIDEOPLAYER' with args '${RUNVRVIDEOPLAYERARGS[*]}' for windowid '$GAMEWINDOWID'"

			GWIDDEC="$(("$GAMEWINDOWID"))"
			echo "GWIDDEC=$GWIDDEC" > "$GWIDFILE"

			if [ -z "$SBSZOOM" ]; then
				"$VRVIDEOPLAYER" "${RUNVRVIDEOPLAYERARGS[@]}" "$GAMEWINDOWID"  2>/dev/null &
			else
				"$VRVIDEOPLAYER" "${RUNVRVIDEOPLAYERARGS[@]}" --zoom "$SBSZOOM" "$GAMEWINDOWID"  2>/dev/null &
			fi

			writelog "INFO" "${FUNCNAME[0]} - waiting for '$VRVIDEOPLAYER' window '$SBSVRWINNAME' for GAMEWINDOWID '$GAMEWINDOWID'"

			MAXWAIT=20
			COUNTER=0
			
			while ! "$XWININFO" -name "$SBSVRWINNAME" -stats  >/dev/null 2>/dev/null; do
				if [[ "$COUNTER" -ge "MAXWAIT" ]]; then
					writelog "SKIP" "${FUNCNAME[0]} - ERROR - timeout waiting for '$VRVIDEOPLAYER' - exit"
					"$PKILL" -f "$VRVIDEOPLAYER"
					RUNSBSVR=0
					exit 1
				fi

				if ! "$PGREP" -f "$VRVIDEOPLAYER" ; then
					if [ "$COUNTER" -ge 3 ]; then
						writelog "SKIP" "${FUNCNAME[0]} - ERROR - '$VRVIDEOPLAYER' not running (crashed?) no need to wait for its window to appear - exit"
						RUNSBSVR=0
						exit 1
					else
						writelog "WARN" "${FUNCNAME[0]} - '$VRVIDEOPLAYER' not running yet - waiting a bit longer"
					fi
				fi

				writelog "WAIT" "${FUNCNAME[0]} - WAIT - '$COUNTER/$MAXWAIT' sec waiting for '$VRVIDEOPLAYER' window '$SBSVRWINNAME'"
				COUNTER=$((COUNTER+1))
				sleep 1
			done

			# player windowid:
			SBSVRWID=$("$XWININFO" -name "$SBSVRWINNAME" -stats | grep "^$XWININFO" | awk -F 'id: ' '{print $2}' | cut -d ' ' -f1)
				
			if [ -n "$SBSVRWID" ]; then
			writelog "INFO" "${FUNCNAME[0]} - pressing w in '$VRVIDEOPLAYER' window '$SBSVRWINNAME' to adjust view: '$XDO windowactivate --sync $SBSVRWID key w'"
			"$XDO" windowactivate --sync "$SBSVRWID" key w

			writelog "INFO" "${FUNCNAME[0]} - activating game window with id '$GAMEWINDOWID' for input"
			"$XDO" windowactivate --sync "$GAMEWINDOWID" click 1
			else
				writelog "SKIP" "${FUNCNAME[0]} - WARN - SBSVRWID '$SBSVRWID' is empty!"
			fi
		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - skipping because RUNSBSVR was set to 0"
	fi
}

function SBSinitVRVideoPlayer {
	if [ "$RUNSBSVR" -ge 1 ]; then
		if [ -n "$GAMEWINDOWID" ]; then
			if [ "$GAMEWINDOWID" == "0x0" ]; then
				writelog "SKIP" "${FUNCNAME[0]} GAMEWINDOWID '$GAMEWINDOWID' is invalid - skipping VR"
				RUNSBSVR=0
			else
				writelog "INFO" "${FUNCNAME[0]} already have the gamewindow id '$GAMEWINDOWID', so directly continuing!"
				SBSrunVRVideoPlayer	"$GAMEWINDOWID" 2>/dev/null &
				if [ -n "$GAMEWINDOW" ] && [ "$GAMEWINDOW" != "empty" ] ; then
					writelog "INFO" "${FUNCNAME[0]} '$VRVIDEOPLAYER' already starting, but trying to get the game window name for the config for later use"
					getGameWindowName "$GAMEWINDOWID"
				fi
			fi
		else
			if [ -n "$GAMEWINDOW" ] && [ "$GAMEWINDOW" != "empty" ] ; then
				GAMEWINDOWID="$("$XWININFO" -name "${GAMEWINDOW//\"/}" -stats | grep "^$XWININFO" | awk -F 'id: ' '{print $2}' | cut -d ' ' -f1)"
				if [ -z "$GAMEWINDOWID" ]; then
					writelog "SKIP" "${FUNCNAME[0]} - ERROR - could not find windowid '$GAMEWINDOWID' for the windowname '$GAMEWINDOW'"
					RUNSBSVR=0
				else
					writelog "INFO" "${FUNCNAME[0]} - found windowid '$GAMEWINDOWID' for the windowname '$GAMEWINDOW'"
					SBSrunVRVideoPlayer	"$GAMEWINDOWID" 2>/dev/null &
				fi
			fi
		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - skipping because RUNSBSVR was set to 0"
	fi
}

function SBSstopVRVideoPlayer {
	if [ "$RUNSBSVR" -ge 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - waiting for game process '$SBSVRKGPID' to finish..."

		if ! "$PGREP" -a "vrcompositor" >/dev/null ; then
			writelog "SKIP" "${FUNCNAME[0]} - ERROR - vrcompositor not running but it should - bailing out DRYRUN"
		fi

		tail --pid="$SBSVRKGPID" -f /dev/null
		writelog "INFO" "${FUNCNAME[0]} - game process '$SBSVRKGPID' finished - closing '$VRVIDEOPLAYER'"

		if [ -f "$GWIDFILE" ]; then
			source "$GWIDFILE"
			GWIDTXT="/tmp/${VRVIDEOPLAYER}_${GWIDDEC}"

			if [ -f "$GWIDTXT" ]; then
				writelog "INFO" "${FUNCNAME[0]} - '$GWIDTXT' found"
				updateConfigEntry "SBSZOOM" "$(cat "$GWIDTXT")" "$SBSTWEAKCFG"
				rm "$GWIDTXT" >/dev/null 2>/dev/null
			fi
			rm "$GWIDFILE" >/dev/null 2>/dev/null
		fi

		"$PKILL" -f "$VRVIDEOPLAYER"

		writelog "OK" "${FUNCNAME[0]} - -------- finished SBS-VR --------"
	else
		writelog "SKIP" "${FUNCNAME[0]} - skipping because RUNSBSVR was set to 0"
	fi
}

function startSBSVR {
	if [ "$RUNSBSVR" -ge 1 ]; then
		checkHMDPresent
		SBSstartSVR
		SBScheckSBScfg
		SBSgetGamePID
		SBSinitVRVideoPlayer
		SBSstopVRVideoPlayer
	fi
}

function checkHMDPresent {
	if "$PGREP" -a "vrcompositor" >/dev/null ; then
		writelog "INFO" "${FUNCNAME[0]} - looks like SteamVR is already running - skipping this function"
	else
		if [ "$CHECKHMD" -eq 1 ]; then
			UUDEV="/lib/udev/rules.d"
			EUDEV="/etc/udev/rules.d"
			SVR="steam-vr"
			NOVRP="1142"
			FOUNDHMD=0

			SVRRULE="$(find "$UUDEV" -name "*$SVR*")"
			if [ -z "$SVRRULE" ]; then
				SVRRULE="$(find "$EUDEV" -name "*$SVR*")"
			fi

			if [ -n "$SVRRULE" ]; then
				writelog "INFO" "${FUNCNAME[0]} - found $SVR udev rule - trying to find one of the VR devices before starting SteamVR"

				while read -r line; do
					IDV="$(cut -d ',' -f3 <<< "$line" | grep -oP '"\K[^"]+')"
					IDP="$(cut -d ',' -f4 <<< "$line" | grep -v "$NOVRP" | grep -oP '"\K[^"]+')"
					if [ -n "$IDV" ] && [ -n "$IDP" ]; then
						IDVP="$IDV:$IDP"
						if "$LSUSB" | grep -q "$IDVP"; then
							FOUNDHMD=1
						fi
					fi
				done < "$SVRRULE"
			else
				echo "no $SVR udev rule found"
				writelog "WARN" "${FUNCNAME[0]} - no $SVR udev rule found. As it might be stored under a different name, this is just a warning"
			fi

			if [ "$FOUNDHMD" -eq 1 ]; then
				writelog "INFO" "${FUNCNAME[0]} - found $SVR hardware using '$LSUSB' - continuing"
			else
				writelog "SKIP" "${FUNCNAME[0]} - no $SVR hardware found using '$LSUSB' - cancelling the SteamVR start"
				RUNSBSVR=0
				if [ "$USERESHADE" -eq 1 ]; then
					USERESHADE=0
					useReshade
				fi
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - skipping, as '$LSUSB' was not found"
		fi
	fi
}

# start game in side-by-side VR:
function checkSBSVRLaunch {
	if [ -n "$RUNSBSVR" ]; then
		if [ "$RUNSBSVR" -ge 1 ]; then
		# override game configs with a sbs-tweak config if available:
		
		# first look for a global tweak:
			if [ -f "$GLOBALSBSTWEAKCFG" ]; then
				writelog "INFO" "${FUNCNAME[0]} - VR using overrides found in '$GLOBALSBSTWEAKCFG'"
				loadCfg "$GLOBALSBSTWEAKCFG"
			fi

		# then for a user tweak - (overriding the global one):
			if [ -f "$SBSTWEAKCFG" ]; then
				writelog "INFO" "${FUNCNAME[0]} - VR using overrides found in '$SBSTWEAKCFG'"
				loadCfg "$SBSTWEAKCFG"
			fi

		# start the whole side-by-side process:
			export GAMEWINDOW="$GAMEWINDOW"
			writelog "INFO" "${FUNCNAME[0]} - ${FUNCNAME[0]} - starting VRlaunch '$GAMEWINDOW' for '$AID'"
			if [ "$RUNSBSVR" -eq 1 ]; then
				startSBSVR &
			elif [ "$RUNSBSVR" -gt 1 ]; then
				writelog "INFO" "${FUNCNAME[0]} - RUNSBSVR is greater than 1 - starting SteamVR and SBS delayed for RUNSBSVR '$RUNSBSVR' seconds"
				( sleep "$RUNSBSVR"; startSBSVR) &
			else
				writelog "SKIP" "${FUNCNAME[0]} - ERROR - RUNSBSVR is '$RUNSBSVR' which is invalid - setting to 0"
				RUNSBSVR=0
			fi
		fi
	fi
}

function dlReShade {
	if [ -z "$1" ]; then
		DLVERS="$RSVERS"
	else
		DLVERS="$1"
	fi
	rm "$RESHADESRCDIR/$RS_64" 2>/dev/null
	rm "$RESHADESRCDIR/$RS_32" 2>/dev/null
	rm "$RESHADESRCDIR/${RS_64//.dll/.json}" 2>/dev/null
	rm "$RESHADESRCDIR/${RS_32//.dll/.json}" 2>/dev/null

	RSSU="ReShade_Setup"
	DLDST="${RESHADESRCDIR}/${RSSU}.exe"
	RSSETUP="${RESHADEDLURL}/${RSSU}_${DLVERS}.exe"
	"$WGET" -q "$RSSETUP" -O "$DLDST"
	if [ ! -s "$DLDST" ]; then
		writelog "SKIP" "${FUNCNAME[0]} - downloaded file '$DLDST' is empty - removing" "E"
		rm "$DLDST" 2>/dev/null
	else
		"$UNZIP" -q "$DLDST" -d "$RESHADESRCDIR" 2>/dev/null
		writelog "INFO" "${FUNCNAME[0]} - downloaded and extracted ReShade-v${DLVERS} file '$DLDST'" "E"
	fi
}

# prepare reshade files if not found:
function prepareReshadeFiles {
	if [ "$DOWNLOAD_RESHADE" -eq 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - DOWNLOAD_RESHADE enabled"

		if [ -n "$RESHADESRCDIR" ]; then
			if [ ! -f "$RESHADESRCDIR/$RS_D3D47_32" ]; then
				writelog "404" "${FUNCNAME[0]} - '$RESHADESRCDIR/$RS_D3D47_32' missing - downloading"

				if [ ! -d "$RESHADESRCDIR" ]; then
					writelog "404" "${FUNCNAME[0]} - '$RESHADESRCDIR' does not exist - trying to create it" 
					mkdir -p "$RESHADESRCDIR" >/dev/null 2>/dev/null
				fi

				if [ -d "$RESHADESRCDIR" ]; then
					writelog "INFO" "${FUNCNAME[0]} - '$RESHADESRCDIR' exist - installing ReShade in here" 
					DLDST="$RESHADESRCDIR/d3dcompiler_47.zip"
					"$WGET" "$DL_D3D47_32" -O "$DLDST"
					"$UNZIP" "$DLDST" -d "$RESHADESRCDIR"
					mv "$RESHADESRCDIR/d3dcompiler_47.dll" "$RESHADESRCDIR/$RS_D3D47_32"
				fi
			fi

			if [ ! -f "$RESHADESRCDIR/$RS_D3D47_64" ]; then
				writelog "404" "${FUNCNAME[0]} - '$RESHADESRCDIR/$RS_D3D47_64' missing - downloading" 
				"$WGET" "$DL_D3D47_64" -O "$RESHADESRCDIR/$RS_D3D47_64"
			fi

			if [ ! -f "$RESHADESRCDIR/$RS_64" ] || [ ! -f "$RESHADESRCDIR/$RS_32" ]; then
				writelog "404" "${FUNCNAME[0]} - '$RESHADESRCDIR/$RS_64' and/or '$RS_32' missing - downloading"
				dlReShade
			fi
		fi
	fi
	
	# make sure Depth3D is even wanted
	if [ "$RESHADE_DEPTH3D" -eq 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - RESHADE_DEPTH3D enabled"
		dlShaders "depth3d"
	fi	
}

function SHADSRC {
	echo "$STLSHADDIR/${1,,}"
}

function dlShaders {
	if [ -z "$1" ]; then
		if [ "$DLSHADER" -eq 1 ]; then
			while read -r SHADLINE; do
				SHADURL="$(cut -d '=' -f2 <<< "$SHADLINE")"
				SHADNAM="$(cut -d '=' -f1 <<< "$SHADLINE" | cut -d '_' -f2)"

				if ! grep -qi "$SHADNAM" <<< "$SHADERBLACKLIST"; then
					writelog "INFO" "${FUNCNAME[0]} - updating $SHADNAM" "E"
					gitUpdate "$(SHADSRC "$SHADNAM")" "${SHADURL//\"/}"
				fi
			done <<< "$(grep "^SHADER_" "$STLURLCFG")"
		fi
	else
		if [ "$1" == "list" ]; then
			while read -r SHADLINE; do
				SHADNAM="$(cut -d '=' -f1 <<< "$SHADLINE" | cut -d '_' -f2)"
				echo "${SHADNAM,,}"
			done <<< "$(grep "^SHADER_" "$STLURLCFG")" | sort
		else
			SHADURL="$(grep -i "SHADER_$1" "$STLURLCFG" | cut -d '=' -f2)"
			if [ -n "$SHADURL" ]; then
				gitUpdate "$(SHADSRC "$1")" "${SHADURL//\"/}"
			else
				writelog "SKIP" "${FUNCNAME[0]} - invalid shader $1"
			fi
		fi
	fi
}

function getAvailableShaders {
	unset ShaderFiles
	while read -r shadfx; do
		ShaderFiles+=("${shadfx//$STLSHADDIR\//}")
	done <<< "$(find "$STLSHADDIR" -name "*.fx")"	
}

function GameShaderDialog {
	if [ -z "$1" ]; then
		SHADDESTDIR="$EFD"
	else
		if [ -f "$1" ]; then
			SHADDESTDIR="$(dirname "$1")"
		else 
			SHADDESTDIR="$1"
		fi
	fi

	if [ -n "$ALTEXEPATH" ] && [ "$ALTEXEPATH" != "empty" ]; then
		SHADDESTDIR="$ALTEXEPATH"
	fi
	
	if [ ! -d "$SHADDESTDIR" ]; then
		mkdir -p "$SHADDESTDIR" 2>/dev/null
	fi
	
	writelog "INFO" "${FUNCNAME[0]} - Opening Shader Selection Dialog for dir '$SHADDESTDIR'"

	getAvailableShaders
	writelog "INFO" "${FUNCNAME[0]} - found ${#ShaderFiles[@]} available Shader Files - opening Selection"

	TITLE="${PROGNAME}-Shader"

	loadCfg "$STLGUICFG" X
	updateWinRes "$TITLE" "$STLGUICFG" "SHADREQWIDTH" "SHADREQHEIGHT" &

	if [ "$USEGUI" == "$YAD" ]; then
		IFS=" " read -r -a SHADFILES <<< \
		"$(for f in $(printf '%s\n' "${ShaderFiles[@]}"); do if [ ! -f "$SHADDESTDIR/$(basename "$f")" ]; then echo FALSE ; echo "$f" ; else echo TRUE ; echo "$f" ;fi ; done | \
		LC_ALL="" "$YAD" --window-icon="$STLICON" --borders="$YADBORDER" --center "$WINDECO" --list --checklist --column=Edit --column=ConfigFile --separator=" " --print-column="2" \
		--text="<span font_weight='bold'>$(strFix "$GUI_SHADERDIALOG" "$SHADDESTDIR")</span>" \
		--title="$TITLE" \
		--geometry="$SHADREQWIDTH"x"$SHADREQHEIGHT"+0+0 | tr '\n' ' ')"
	elif [ "$USEGUI" == "$ZENITY" ]; then
		IFS=" " read -r -a SHADFILES <<< "$(for f in $(printf '%s\n' "${ShaderFiles[@]}"); do if [ ! -f "$SHADDESTDIR/$(basename "$f")" ]; then echo FALSE ; echo "$f" ; else echo TRUE ; echo "$f" ;fi ; done | \
		"$ZENBIN" --list --checklist --column=Edit --column=ConfigFile --separator=" " --print-column="2" \
		--text="<span font_weight='bold'>$GUI_SHADERDIALOG</span>" \
		--width="$SHADREQWIDTH" --height="$SHADREQHEIGHT" 2>/dev/null | tr '\n' ' ')"
	fi
	while read -r upshad; do
		if [ -f "$SHADDESTDIR/$(basename "$upshad")" ]; then
			if ! grep -q "$upshad" <<< "${SHADFILES[@]}"; then
				writelog "INFO" "${FUNCNAME[0]} - file $SHADDESTDIR/$(basename "$upshad") exists, but is unchecked - removing" "E"
				rm "$SHADDESTDIR/$(basename "$upshad")"
			fi
		else
			if grep -q "$upshad" <<< "${SHADFILES[@]}"; then
				writelog "INFO" "${FUNCNAME[0]} - file $SHADDESTDIR/$(basename "$upshad") does not exist, but is checked - installing" "E"
				cp "$STLSHADDIR/$upshad" "$SHADDESTDIR"
				
				while read -r shadadd; do
					if [ ! -f "$SHADDESTDIR/$(basename "$shadadd")" ]; then
						writelog "INFO" "${FUNCNAME[0]} - installing shader helper file '$(basename "$shadadd")' into '$SHADDESTDIR'" "E"
						cp "$shadadd" "$SHADDESTDIR"
					fi
				done <  <(find "$(dirname "$STLSHADDIR/$upshad")" -name "*.fxh" -o -name "*.txt")
				
			fi
		fi
	
	done <<< "$(printf "%s\n" "${ShaderFiles[@]//\"/}")"
}

function getArch {
	# maybe remove reduntant lines later
	if [ "$(extRun file "$1" | grep -c "PE32 ")" -eq 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - architecture for '$1' is 32bit"
		echo "32"
	elif  [ "$(extRun file "$1" | grep -c "PE32+ ")" -eq 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - architecture for '$1' is 64bit"
		echo "64"
	else
		if  [ "$(find "$(dirname "$1")" -name "*.exe" | wc -l)" -ge 0 ]; then
			TESTEXE="$(find "$(dirname "$1")" -name "*.exe" | head -n1)"
			if [ "$(extRun file "$TESTEXE" | grep -c "PE32 ")" -eq 1 ]; then
				writelog "INFO" "${FUNCNAME[0]} - architecture for bundled '$TESTEXE' for '$1' is 32bit"
				echo "32"
			elif  [ "$(extRun file "$TESTEXE" | grep -c "PE32+ ")" -eq 1 ]; then
				writelog "INFO" "${FUNCNAME[0]} - architecture for bundled '$TESTEXE' for '$1' is 64bit"
				echo "64"
			fi
		elif  [ "$(find "$(dirname "$1")" -name "*.dll" | wc -l)" -ge 0 ]; then
			TESTDLL="$(find "$(dirname "$1")" -name "*.dll" | head -n1)"
			if [ "$(extRun file "$TESTDLL" | grep -c "PE32 ")" -eq 1 ]; then
				writelog "INFO" "${FUNCNAME[0]} - architecture for bundled '$TESTDLL' for '$1' is 32bit"
				echo "32"
			elif  [ "$(extRun file "$TESTDLL" | grep -c "PE32+ ")" -eq 1 ]; then
				writelog "INFO" "${FUNCNAME[0]} - architecture for bundled '$TESTDLL' for '$1' is 64bit"
				echo "64"
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - Could not detect architecture for '$1' directly or indirectly"
		fi
	fi
}

function chooseShaders {
	if [ "$CHOOSESHADERS" -eq 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - Opening Shader Menu"
		GameShaderDialog "$EFD"
	fi
}

# install reshade:
function installReshade {
	if [ -n "$INSTALL_RESHADE" ]; then
		if [ "$INSTALL_RESHADE" -eq 1 ]; then

			prepareReshadeFiles

			if [ -z "$ALTEXEPATH" ] || [ "$ALTEXEPATH" == "empty" ]; then
				INSTDESTDIR="$EFD"
			else
				INSTDESTDIR="$ALTEXEPATH"
			fi

			# checking for previous dll conficts between $RS_D3D47_DEST and $RS_D9_DEST
			if [ -f "$INSTDESTDIR/${RS_DX_DEST//.dll/.log}" ]; then
				if grep -q "Another ReShade instance was already loaded" "$INSTDESTDIR/${RS_DX_DEST//.dll/.log}"; then
					writelog "INFO" "${FUNCNAME[0]} - found $RS_DX_DEST conflict with $RS_D9_DEST"
					if [ -f "$INSTDESTDIR/$RS_D9_DEST" ]; then
						writelog "INFO" "${FUNCNAME[0]} - removing $RS_D9_DEST"
						rm "$INSTDESTDIR/$RS_D9_DEST"
					else
						writelog "SKIP" "${FUNCNAME[0]} - $RS_D9_DEST not found"
					fi
					
					if [ -z "$NOD3D9" ]; then
						writelog "INFO" "${FUNCNAME[0]} - blocking re-installation of '$RS_D9_DEST' by setting NOD3D9=1 in '$STLGAMECFG'"
						updateConfigEntry "NOD3D9" "1" "$STLGAMECFG"
						export NOD3D9=1
					fi
				else
					writelog "INFO" "${FUNCNAME[0]} - no conflict found in old logfile ${RS_DX_DEST//.dll/.log}"
				fi				
			else
				writelog "INFO" "${FUNCNAME[0]} - no old logfile ${RS_DX_DEST//.dll/.log} found"
			fi

			#32bit:
			if [ "$(getArch "$GP")" == "32" ]; then
				writelog "INFO" "${FUNCNAME[0]} - installing 32bit Reshade as '$GE' is 32bit" 

				if [ ! -f "$INSTDESTDIR/$RS_D3D47_DEST" ]; then
					if [ ! -f "$RESHADESRCDIR/$RS_D3D47_32" ]; then
						writelog "SKIP" "${FUNCNAME[0]} - sourcefile '$RESHADESRCDIR/$RS_D3D47_32' missing - skipping this file" 
					else
						cp "$RESHADESRCDIR/$RS_D3D47_32" "$INSTDESTDIR/$RS_D3D47_DEST" >/dev/null 2>/dev/null
						writelog "INFO" "${FUNCNAME[0]} - copied '$RESHADESRCDIR/$RS_D3D47_32' to '$INSTDESTDIR/$RS_D3D47_DEST'" 
					fi
				else
					writelog "SKIP" "${FUNCNAME[0]} - destfile '$INSTDESTDIR/$RS_D3D47_DEST' already exists - skipping this file" 
				fi

				#dxgi:
				if [ ! -f "$INSTDESTDIR/$RS_DX_DEST" ] || [ "$1" == "F" ]; then
					if [ ! -f "$RESHADESRCDIR/$RS_32" ]; then
						writelog "SKIP" "${FUNCNAME[0]} - sourcefile '$RESHADESRCDIR/$RS_32' missing - skipping this file" 
					else
						cp "$RESHADESRCDIR/$RS_32" "$INSTDESTDIR/$RS_DX_DEST" >/dev/null 2>/dev/null
						echo "$RS_DX_DEST" > "$INSTDESTDIR/$RSENABLED"
						writelog "INFO" "${FUNCNAME[0]} - copied '$RESHADESRCDIR/$RS_32' to '$INSTDESTDIR/$RS_DX_DEST'" 
					fi
				else
					writelog "SKIP" "${FUNCNAME[0]} - destfile '$INSTDESTDIR/$RS_DX_DEST' already exists - skipping this file" 
				fi

				#d3d9:
				if [ ! -f "$INSTDESTDIR/$RS_D9_DEST" ] || [ "$1" == "F" ]; then
					if [ -n "$NOD3D9" ] && [ "$NOD3D9" -eq 1 ]; then
						writelog "SKIP" "${FUNCNAME[0]} - skipping installation of $RS_D9_DEST because 'NOD3D9' is enabled"
					else
						if [ ! -f "$RESHADESRCDIR/$RS_32" ]; then
							writelog "SKIP" "${FUNCNAME[0]} - sourcefile '$RESHADESRCDIR/$RS_32' missing - skipping this file" 
						else
							cp "$RESHADESRCDIR/$RS_32" "$INSTDESTDIR/$RS_D9_DEST" >/dev/null 2>/dev/null
							echo "$RS_D9_DEST" > "$INSTDESTDIR/$RSENABLED"
							writelog "INFO" "${FUNCNAME[0]} - copied '$RESHADESRCDIR/$RS_32' to '$INSTDESTDIR/$RS_D9_DEST'" 
						fi
					fi
				else
					writelog "SKIP" "${FUNCNAME[0]} - destfile '$INSTDESTDIR/$RS_D9_DEST' already exists - skipping this file" 
				fi

			# 64bit:
			elif [ "$(getArch "$GP")" == "64" ]; then
				writelog "INFO" "${FUNCNAME[0]} - installing 64bit Reshade as '$GE' is 64bit" 

				if [ ! -f "$INSTDESTDIR/$RS_D3D47_DEST" ]; then
					if [ ! -f "$RESHADESRCDIR/$RS_D3D47_64" ]; then
						writelog "SKIP" "${FUNCNAME[0]} - sourcefile '$RESHADESRCDIR/$RS_D3D47_64' missing - skipping this file" 
					else
						cp "$RESHADESRCDIR/$RS_D3D47_64" "$INSTDESTDIR/$RS_D3D47_DEST" >/dev/null 2>/dev/null
						writelog "INFO" "${FUNCNAME[0]} - copied '$RESHADESRCDIR/$RS_D3D47_64' to '$INSTDESTDIR/$RS_D3D47_DEST'" 
					fi
				else
					writelog "SKIP" "${FUNCNAME[0]} - destfile '$INSTDESTDIR/$RS_D3D47_DEST' already exists - skipping this file" 
				fi

				#dxgi:
				if [ ! -f "$INSTDESTDIR/$RS_DX_DEST" ] || [ "$1" == "F" ]; then
					if [ ! -f "$RESHADESRCDIR/$RS_64" ]; then
						writelog "SKIP" "${FUNCNAME[0]} - sourcefile '$RESHADESRCDIR/$RS_64' missing - skipping this file" 
					else
						cp "$RESHADESRCDIR/$RS_64" "$INSTDESTDIR/$RS_DX_DEST" >/dev/null 2>/dev/null
						echo "$RS_DX_DEST" > "$INSTDESTDIR/$RSENABLED"
						writelog "INFO" "${FUNCNAME[0]} - copied '$RESHADESRCDIR/$RS_64' to '$INSTDESTDIR/$RS_DX_DEST'"
					fi
				else
					writelog "SKIP" "${FUNCNAME[0]} - destfile '$INSTDESTDIR/$RS_DX_DEST' already exists - skipping this file" 
				fi

				#d3d9:
				if [ ! -f "$INSTDESTDIR/$RS_D9_DEST" ] || [ "$1" == "F" ]; then
					if [ -n "$NOD3D9" ] && [ "$NOD3D9" -eq 1 ]; then
						writelog "SKIP" "${FUNCNAME[0]} - skipping installation of $RS_D9_DEST because 'NOD3D9' is enabled"
					else
						if [ ! -f "$RESHADESRCDIR/$RS_64" ]; then
							writelog "SKIP" "${FUNCNAME[0]} - sourcefile '$RESHADESRCDIR/$RS_64' missing - skipping this file" 
						else
							cp "$RESHADESRCDIR/$RS_64" "$INSTDESTDIR/$RS_D9_DEST" >/dev/null 2>/dev/null
							echo "$RS_D9_DEST" > "$INSTDESTDIR/$RSENABLED"
							writelog "INFO" "${FUNCNAME[0]} - copied '$RESHADESRCDIR/$RS_64' to '$INSTDESTDIR/$RS_D9_DEST'" 
						fi
					fi
				else
					writelog "SKIP" "${FUNCNAME[0]} - destfile '$INSTDESTDIR/$RS_D9_DEST' already exists - skipping this file" 
				fi
			else
				writelog "SKIP" "${FUNCNAME[0]} - ERROR in ReShade installation - no file information detected for '$GP' or any 'neighbor file' - setting USERESHADE=0 for this session"
				export USERESHADE=0
			fi
		fi
	fi
}



function installReshadeDepth3D {
	SHADERPOOL="depth3d"
	
	if [ -n "$RESHADE_DEPTH3D" ]; then
		if [ "$RESHADE_DEPTH3D" -eq 1 ]; then
			dlShaders "$SHADERPOOL"

			if [ -z "$ALTEXEPATH" ] || [ "$ALTEXEPATH" == "empty" ]; then
				INSTDESTDIR="$EFD"
			else
				INSTDESTDIR="$ALTEXEPATH"
			fi

			writelog "INFO" "${FUNCNAME[0]} - copying shaders into gamedir"
			while read -r file; do
				writelog "INFO" "${FUNCNAME[0]} - CHECKING '$INSTDESTDIR/$(basename "$file")'"

				if [ -f "$INSTDESTDIR"/"$(basename "$file")" ]; then
					writelog "INFO" "${FUNCNAME[0]} - '$INSTDESTDIR/$(basename "$file")' already exists - updating"
					cp "$file" "$INSTDESTDIR"
				else
					writelog "INFO" "${FUNCNAME[0]} - copying new file '$file' to '$EFD'"
					cp "$file" "$INSTDESTDIR"
				fi
			done <<< "$(find "$(SHADSRC "$SHADERPOOL")/Shaders/" -maxdepth 1 -name "*.fx*")"
		fi
	fi
}

function useReshade {
	if [ -n "$USERESHADE" ]; then
		if [ "$USERESHADE" -eq 1 ]; then
			if [ -f "$EFD/$RSDISABLED" ]; then
				writelog "INFO" "${FUNCNAME[0]} - ReShade has been disabled previously using '$PROGCMD' - enabling it now"
				RSDLL="$(cat "$EFD/$RSDISABLED")" 
				mv "$EFD/$RSDLL" "$EFD/${RSDLL//_disabled/}"
				rm "$EFD/$RSDISABLED" 2>/dev/null
				echo "${RSDLL//_disabled/}" > "$EFD/$RSENABLED"
			fi

			if [ ! -f "$EFD/$RS_D3D47_DEST" ]; then
				writelog "INFO" "${FUNCNAME[0]} - USERESHADE is '$USERESHADE' - looks like Reshade is not yet installed in '$EFD' - installing because USERESHADE is enabled"
				INSTALL_RESHADE=1 installReshade
			fi

			if [ -f "$EFD/ReShade.ini" ] && [ ! -f "$EFD/$RSENABLED" ]; then
				writelog "INFO" "${FUNCNAME[0]} - looks like Reshade was installed previously using '$PROGCMD' without creating '$RSENABLED' - recreating it now"
				INSTALL_RESHADE=1 installReshade F
			fi

			writelog "INFO" "${FUNCNAME[0]} - setting WINEDLLOVERRIDES for ReShade: dxgi=n,b;d3d9=n,b;d3dcompiler_47=n,b"
			export WINEDLLOVERRIDES="dxgi=n,b;d3d9=n,b;d3dcompiler_47=n,b"
		else
			if [ -f "$EFD/ReShade.ini" ] && [ ! -f "$EFD/$RSENABLED" ] && [ ! -f "$EFD/$RSDISABLED" ] ; then
				writelog "INFO" "${FUNCNAME[0]} - USERESHADE is '$USERESHADE' - looks like Reshade was installed previously using '$PROGCMD' without creating '$RSENABLED' - recreating it now"
				INSTALL_RESHADE=1 installReshade F
			fi

			if [ -f "$EFD/$RSENABLED" ]; then
				writelog "INFO" "${FUNCNAME[0]} - ReShade has been installed previously with '$PROGCMD' - disabling it now"
				RSDLL="$(cat "$EFD/$RSENABLED")" 
				mv "$EFD/$RSDLL" "$EFD/${RSDLL}_disabled"
				rm "$EFD/$RSENABLED" 2>/dev/null
				echo "${RSDLL}_disabled" > "$EFD/$RSDISABLED"
			fi
		fi
	fi	
}

function getUsedVars {
	while read -r line; do 
		if  grep -q -v "^#" <<< "$line"; then
			awk -F '=' '{print $1}' <<< "$line" 
		fi
	done <"$1"
}

function customUserScriptStart {
	if [ -n "$USERSTART" ] && [ "$USERSTART" != "$("$WHICH" echo 2>/dev/null)" ]; then
		if [ -x "$USERSTART" ]; then
			writelog "INFO" "${FUNCNAME[0]} - starting custom user startscript '$USERSTART'"
			extRun "$USERSTART" "$AID" "$GP" "$GPFX" &
		else
			writelog "SKIP" "${FUNCNAME[0]} - custom user stopscript '$USERSTART' not found or not executable"
		fi
	fi
}

function customUserScriptStop {
	if [ -n "$USERSTOP" ] && [ "$USERSTART" != "$("$WHICH" echo 2>/dev/null)" ]; then
		if [ -x "$USERSTOP" ]; then
			writelog "INFO" "${FUNCNAME[0]} - starting custom user stopscript '$USERSTOP'"
			extRun  "$USERSTOP" "$AID" "$GP" "$GPFX" &
		else
			writelog "SKIP" "${FUNCNAME[0]} - custom user stopscript '$USERSTOP' not found or not executable"
		fi
	fi
}

function editorSkipped {
	if [ -z "$MAXASK" ]; then
		writelog "INFO" "${FUNCNAME[0]} - maximal editor requester count MAXASK not defined - skipping"
	else
		if ! grep -q "^ASKCNT" "$STLGAMECFG"; then
			SETASKCNT=1
			updateConfigEntry "ASKCNT" "$SETASKCNT" "$STLGAMECFG"
		else

			SETASKCNT=$(($(grep "ASKCNT" "$STLGAMECFG" | cut -d '=' -f2 | sed 's/\"//g') +1))
			updateConfigEntry "ASKCNT" "$SETASKCNT" "$STLGAMECFG"
		fi

		ASKCNT="$SETASKCNT"

		if [ "$ASKCNT" -ge "$MAXASK" ]; then
			notiShow "$(strFix "$NOTY_CANCELREQ1" "$MAXASK" "$GN" "$AID")"
			writelog "INFO" "${FUNCNAME[0]} - 'ASKCNT $ASKCNT' reached  'MAXASK $MAXASK' - disabling requester and resetting counter"
			updateConfigEntry "WAITEDITOR" "0" "$STLGAMECFG"
			updateConfigEntry "ASKCNT" "0" "$STLGAMECFG"
		elif [ "$ASKCNT" -lt "$MAXASK" ]; then
			notiShow "$(strFix "$NOTY_CANCELREQ2" "$ASKCNT" $((MAXASK - ASKCNT)) "$GN" "$AID")"
		fi
	fi
}

function askSettings {
	if ! grep -q "^WAITEDITOR=\"0\"" "$STLGAMECFG"; then
		# open editor requester 
		if grep -q "^WAITEDITOR" "$STLGAMECFG"; then
			WEDGAME="$(grep "^WAITEDITOR" "$STLGAMECFG"| cut -d '=' -f2)"
			WAITEDITOR="${WEDGAME//\"/}"
			writelog "INFO" "${FUNCNAME[0]} - using game specific requester timeout '$WAITEDITOR'"
		fi

		if [ "$WAITEDITOR" -gt 0 ]; then
			writelog "INFO" "${FUNCNAME[0]} - Opening Requester with timeout '$WAITEDITOR'"
			FOUNDTWEAKCFG=""
			if [ -f "$GLOBALTWEAKCFG" ]; then
				FOUNDTWEAKCFG="$GLOBALTWEAKCFG"
			fi

			if [ -f "$TWEAKCFG" ]; then
				FOUNDTWEAKCFG="$TWEAKCFG"
			fi
			getAvailableCfgs

			TITLE="${PROGNAME}-OpenSettings"

			loadCfg "$STLGUICFG" X
			updateWinRes "$TITLE" "$STLGUICFG" "ASKSETREQWIDTH" "ASKSETREQHEIGHT" &

			if [ "$USEGUI" == "$YAD" ]; then
				if [ "$USEGAMEPICS" -eq 1 ] && [ -f "$STLGHEADD/$AID.jpg" ]; then
					SHOWPIC="$STLGHEADD/$AID.jpg"
					else
						SHOWPIC="$NOICON"
					fi
		
				if [ -n "$FOUNDTWEAKCFG" ]; then
					LC_ALL="" "$YAD" --image "$SHOWPIC" --image-on-top --borders="$YADBORDER" --window-icon="$STLICON" --form --center --on-top "$WINDECO" \
					--title="$TITLE" \
					--geometry="$ASKSETREQWIDTH"x"$ASKSETREQHEIGHT"+0+0 \
					--text="<span font_weight='bold'>$GN ($AID) - $GUI_ASKOPENSET</span>" \
					--field="<span font=\"italic\">${#CfgFiles[@]} $GUI_EDITABLECFGS</span>":LBL \
					--field=" ":LBL " " \
					--field="$GUI_TWEAKFOUND $FOUNDTWEAKCFG":LBL \
					--field="<span font=\"italic\">($GUI_SHOULDWORK)</span>":LBL \
					--button="$BUT_SET":0  \
					--button="$BUT_CAN":1  \
					--timeout="$WAITEDITOR" \
					--timeout-indicator=top
				else
					LC_ALL="" "$YAD" --image "$SHOWPIC" --image-on-top --borders="$YADBORDER" --window-icon="$STLICON" --form --center --on-top "$WINDECO" \
					--title="$TITLE" \
					--geometry="$ASKSETREQWIDTH"x"$ASKSETREQHEIGHT"+0+0 \
					--text="<span font_weight='bold'>$GN ($AID) - $GUI_ASKOPENSET</span>" \
					--field="<span font=\"italic\">(${#CfgFiles[@]} $GUI_EDITABLECFGS)</span>":LBL \
					--field=" ":LBL " " \
					--button="$BUT_SET":0  \
					--button="$BUT_CAN":1  \
					--timeout="$WAITEDITOR" \
					--timeout-indicator=top
				fi
				case $? in
					0)  writelog "INFO" "${FUNCNAME[0]} - Selected SETTINGS - Opening settings"
						openSettings "$AID"
					;;
					1)  writelog "INFO" "${FUNCNAME[0]} - Selected CANCEL - Starting game without settings"
						editorSkipped
					;;
					70) writelog "INFO" "${FUNCNAME[0]} - TIMEOUT - Starting game without settings"
					;;
				esac

			elif [ "$USEGUI" == "$ZENITY" ]; then
				if [ -n "$FOUNDTWEAKCFG" ]; then
					"$ZENBIN" --title="$PROGNAME ($PROGCMD) - $PROGVERS" --question --text="edit game configfile?\n'$STLGAMECFG'\n(tweakfile '$FOUNDTWEAKCFG' found,\nthe game should 'just work' using it)" --ok-label=Edit --cancel-label=Cancel --timeout="$WAITEDITOR" --width="$ASKSETREQWIDTH" --heigth="$ASKSETREQHEIGHT" 2>/dev/null
				else
					"$ZENBIN" --title="$PROGNAME ($PROGCMD) - $PROGVERS" --question --text="edit game configfile?\n'$STLGAMECFG'" --ok-label=Edit --cancel-label=Cancel --timeout="$WAITEDITOR" --width="$ASKSETREQWIDTH" --heigth="$ASKSETREQHEIGHT" 2>/dev/null
				fi
				case $? in
					0)  EditorDialog "$AID"
					;;
					1)  writelog "INFO" "${FUNCNAME[0]} - key not pressed - starting game"
						editorSkipped
					;;
				esac
			fi
		fi
	fi
}

# create project dir $1 if $2 is 1 or empty
function mkProjDir {
	if [ -n "$2" ]; then
		if [ "$2" -eq 1 ]; then
			if [ ! -d "$1" ]; then
				mkdir -p "$1" 2>/dev/null >/dev/null
			fi
		fi
	fi
}

# create project dirs
function createProjectDirs {
	mkProjDir "$STLCFGDIR" 1
	mkProjDir "$STLLANGDIR" 1
	mkProjDir "$LOGDIR" 1
	mkProjDir "$STLGAMEDIR" 1
	mkProjDir "$STLCATEGORYDIR" 1
	mkProjDir "$TWEAKDIR" 1
	mkProjDir "$USERTWEAKDIR" 1
	mkProjDir "$AUTOTWEAKDIR" 1
	mkProjDir "$ATDLDIR" 1
	mkProjDir "$TWEAKCMDDIR" 1
	mkProjDir "$SBSTWEAKDIR" 1
	mkProjDir "$TWEAKTEMPLATEDIR" 1
	mkProjDir "$STLDLDIR" 1
	mkProjDir "$STLSHADDIR" 1
	mkProjDir "$STLVORTEXDIR" 1
	mkProjDir "${STLVORTEXDIR}/downloads" 1
	mkProjDir "${STLVORTEXDIR}/wineprefix" 1
	mkProjDir "$RESHADESRCDIR" 1
	mkProjDir "$CUSTPROTDLDIR" 1
	mkProjDir "$CUSTPROTEXTDIR" 1
	mkProjDir "$STLGAMES" 1
	mkProjDir "$STLGDESKD" 1
	mkProjDir "$STLGHEADD" 1
#	mkProjDir "$STLGSCPTD" 1
}

# add missing config entries to configfile $1 using seperator $2:
function updateConfigFile {

	if [ -z "$1" ]; then
		writelog "SKIP" "${FUNCNAME[0]} - expected configfile as argument 1"
	else
		CFGFILE="$1"
		SEP="$2"

		# disable logging temporarily when the program just started (cosmetics)
		if [ -n "$3" ]; then
			ORGLOGLEVEL="$LOGLEVEL"
			LOGLEVEL=0
		fi
		
		if grep -q "config Version: $PROGVERS" "$1"; then
			writelog "SKIP" "${FUNCNAME[0]} - config file '$CFGFILE' already at version '$PROGVERS'"
		else
			OLDVERS="$(grep "config Version" "$CFGFILE" | awk -F ': ' '{print $2}')"
			
			if [ "$CFGFILE" == "$STLGUICFG" ]; then
				calculateDefaultResolutions
			fi
			
			if [ -n "$OLDVERS" ]; then
				writelog "OK" "${FUNCNAME[0]} - updating '$CFGFILE' from '$OLDVERS' to '$PROGVERS'"
				sed "s/config Version: $OLDVERS/config Version: $PROGVERS/" -i "$CFGFILE"
			else
				writelog "OK" "${FUNCNAME[0]} - updating '$CFGFILE' to '$PROGVERS'"
				sed "1s/^/##########################\n/" -i "$CFGFILE"
				sed "1s/^/## config Version: $PROGVERS\n/" -i "$CFGFILE"
			fi

			while read -r RAWLINE; do

				LCAT="$(cut -d '=' -f1 <<< "$RAWLINE")"
				LVAL="$(cut -d '=' -f2 <<< "$RAWLINE")"
				if ! grep "^${LCAT}=" "$CFGFILE" >/dev/null ; then
					writelog "UPDATE" "${FUNCNAME[0]} - entry '$LCAT' is missing in '$CFGFILE' - adding it now!"
					if grep -q "\\$" <<< "$LVAL"; then

						if grep -q "WIDTH$\|HEIGHT$" <<< "$LVAL"; then
							VARNAM=${LVAL//\$/DEF}
						else
							VARNAM=${LVAL//\$/}
						fi
						OUTVAL=${!VARNAM}
					else
						OUTVAL="$LVAL"
					fi

					ADDLINE="$LCAT=\"$OUTVAL\""
					writelog "UPDATE" "${FUNCNAME[0]} - adding line '$ADDLINE'"
					echo "$ADDLINE" >> "$CFGFILE"
				fi
			done <<< "$(sed -n "/#START$SEP/,/#END$SEP/p;/#END$SEP/q" "$0" | awk -F 'echo ' '{print $2}' | grep -v "\"##" | sed '/^[[:space:]]*$/d'| sed 's/\"//g' | sed 's/=\\/=/g' | sed 's/\\$//g')"
		fi

		# re-enable logging
		if [ -n "$3" ];then
			LOGLEVEL="$ORGLOGLEVEL"
		fi
	fi
}

# create game configs:
function createGameCfg {

	if [ -f "$STLGAMECFG" ]; then
		# add missing config entries in the default global config:
		updateConfigFile "$STLGAMECFG" "saveCfgdefault_template"
	else
		getGameName "$AID"
		if [ -n "$GAMENAME" ]; then
		{
		echo "## config Version: $PROGVERS"
		echo "##########################"
		echo "#########"
		echo "#$PROGNAME $PROGVERS"
		echo "#########"
		getCfgHeader
		echo "## set the default config file for DXVK_CONFIG_FILE which is used when found - defaults to config found in $STLDXVKDIR"
		echo "#STLDXVKCFG=\"$STLDXVKDIR/$AID.conf\""
		echo "## vkbasalt config file:"
		echo "VKBASALT_CONFIG_FILE=\"$STLCFGDIR/vkBasalt.conf\""
		grep -v "config Version" "$STLDEFGAMECFG"
		} >> "$STLGAMECFG"
		else
			writelog "SKIP" "${FUNCNAME[0]} - no game name found for '$AID' - does the game exist?" "E"
		fi
	fi
}


function createTweakTemplateCfg {
	# TWEAK CONFIG TEMPLATE:
	if [ -n "$CREATETWEAKS" ]; then
		if [ "$CREATETWEAKS" -eq 1 ]; then
			# write tweak header if tweak config not found:			
			if [ ! -f "$TWEAKTEMPLATECFG" ] ; then
				getGameName "$AID"
				getCfgHeader >> "$TWEAKTEMPLATECFG"
			fi
		fi
	fi
}

function GAMEPID {
	if [ -f "$TEMPWINNAME" ]; then
		writelog "INFO" "${FUNCNAME[0]} - found '$TEMPWINNAME' - loading"
		loadCfg "$TEMPWINNAME"
		rm "$TEMPWINNAME" 2>/dev/null
	fi

	if [ -n "$GAMEWINDOW" ] && [ "$GAMEWINDOW" != "empty" ] ; then
		GWINPID="$("$XWININFO" -name "${GAMEWINDOW//\"/}" -wm | grep "Process id:" | awk -F 'Process id: ' '{print $2}' | cut -d ' ' -f1)"
		writelog "INFO" "${FUNCNAME[0]} - found gamewindow PID $GWINPID"
	fi
	
	if [ -z "$GWINPID" ]; then	
		if	[ "$RUN_CUSTOMCMD" -ge 1 ] && [ "$ONLY_CUSTOMCMD" -eq 1 ];then
			if [ "$CUSTOMCMD" == "$LU" ]; then
				"$PGREP" -a "$LU-wrapper" | cut -d ' ' -f1 | tail -n1
			else
				"$PGREP" -a "$CUSTOMCMD" | cut -d ' ' -f1 | tail -n1
			fi
		else
			if [ -n "$WAITFORTHISPID" ] && [ "$WAITFORTHISPID" != "empty" ]; then
				GAMPI="$("$PIDOF" "$WAITFORTHISPID" | cut -d ' ' -f1)"
			else
				GAMPI="$("$PGREP" -a "$GE" | grep "Z:" | grep "\.exe" | grep -v "CrashHandler"  | cut -d ' ' -f1 | tail -n1)"
			fi
			echo "$GAMPI"
		fi
	else
		echo "$GWINPID"
	fi
}

function waitForGamePid {
	if [ -n "$WAITFORTHISPID" ] && [ "$WAITFORTHISPID" != "empty" ]; then
		writelog "WAIT" "${FUNCNAME[0]} - waiting for alternative process WAITFORTHISPID '$WAITFORTHISPID'"
	fi
	while [ -z "$(GAMEPID)" ]; do 
		writelog "WAIT" "${FUNCNAME[0]} - waiting for game process $(GAMEPID)"
		sleep 1
	done
	writelog "INFO" "${FUNCNAME[0]} - game process found at $(GAMEPID)"
}

# override game configs with a tweak config if available:
function checkTweakLaunch {
	if [ -z "$TWEAKCMD" ]; then
		TWEAKCMD=""
	fi

	if [ -f "$GLOBALTWEAKCFG" ]; then
		writelog "INFO" "${FUNCNAME[0]} - using overrides found in '$GLOBALTWEAKCFG'"
		loadCfg "$GLOBALTWEAKCFG"
	fi

	# then user config - (overriding the global one)
	if [ -f "$TWEAKCFG" ]; then
		writelog "INFO" "${FUNCNAME[0]} - using overrides found in '$TWEAKCFG'"
		loadCfg "$TWEAKCFG"
	fi

	if [ -n "$TWEAKCMD" ]; then
		# tweak command defined
		if [ -f "$TWEAKCMD" ]; then
			writelog "INFO" "${FUNCNAME[0]} - found TWEAKCMD '$TWEAKCMD'"
			RUNTWEAK="$TWEAKCMD"
		elif [ -f "$TWEAKCMDDIR/$TWEAKCMD" ]; then
			writelog "INFO" "${FUNCNAME[0]} - found TWEAKCMD '$TWEAKCMD' in '$TWEAKCMDDIR'"
			RUNTWEAK="$TWEAKCMDDIR/$TWEAKCMD"
		elif [ -f "$GLOBALTWEAKCMDDIR/$TWEAKCMD" ]; then
			writelog "INFO" "${FUNCNAME[0]} - found TWEAKCMD '$TWEAKCMD' in '$GLOBALTWEAKCMDDIR'"
			RUNTWEAK="$GLOBALTWEAKCMDDIR/$TWEAKCMD"
		elif [ "$(USEDLGLOBAL)" -ge 1 ] && [ -f "$GLDLTWEAKCMDDIR/$TWEAKCMD" ]; then
			writelog "INFO" "${FUNCNAME[0]} - found TWEAKCMD '$TWEAKCMD' in '$GLDLTWEAKCMDDIR'"
			RUNTWEAK="$GLDLTWEAKCMDDIR/$TWEAKCMD"
		elif [ -f "$GFD/$TWEAKCMD" ]; then
			writelog "INFO" "${FUNCNAME[0]} - found TWEAKCMD '$TWEAKCMD' in '$GFD'"
			RUNTWEAK="$GFD/$TWEAKCMD"
		fi
		# tweak command found

		if [ -n "$RUNTWEAK" ]; then

			if grep -q "^TWEAKFILE" "$RUNTWEAK"; then
				# dependency for tweak command defined
				writelog "INFO" "${FUNCNAME[0]} - TWEAKFILE configured in $RUNTWEAK as dependency - checking if the file exists in gamedir - relative to the gameexe"
				TWEAKFILE="$(grep "^TWEAKFILE" "$RUNTWEAK" | awk -F 'TWEAKFILE=' '{print $2}')"
				if [ -f "$EFD/$TWEAKFILE" ]; then
					# dependency for tweak command found
					writelog "INFO" "${FUNCNAME[0]} - found tweakcmd dependency in $EFD/$TWEAKFILE - starting the tweakcmd now"
					# start tweak command
					extRun "$RUNTWEAK"
					writelog "INFO" "${FUNCNAME[0]} - $RUNTWEAK finished"
				else
					# dependency for tweak command not found
					writelog "SKIP" "${FUNCNAME[0]} - configured TWEAKFILE $TWEAKFILE not found - skipping launch of the tweakcmd $TWEAKCMD"
				fi
			else
				# start tweak command
				writelog "INFO" "${FUNCNAME[0]} - no TWEAKFILE configured in $RUNTWEAK as dependency - starting the tweakcmd regularly now"
				extRun "$RUNTWEAK"
				writelog "INFO" "${FUNCNAME[0]} - $RUNTWEAK finished"
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - configured TWEAKCMD $TWEAKCMD not found - can't start it"
		fi
	fi
}

function checkSTLCSS {
	# maybe this doesn't make any sense, but I try to leave the project as plain as possible without any bundled assets. That's why the two icons are base64 encoded:

	checked64="iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAABhGlDQ1BJQ0MgcHJvZmlsZQAAKJF9kTtIw0Acxr+mig+qDlYQcchQnSz4xlGrUIQKoVZo1cHk0hc0aUhSXBwF14KDj8Wqg4uzrg6ugiD4AHFydFJ0kRL/lxRaxHpw3I/v7vu4+w4QKgWmWS2jgKbbZjwaEZOpVbHtFR3oQzemMCYzy5iTpBiajq97+Ph6F+ZZzc/9ObrUtMUAn0g8ywzTJt4gnt60Dc77xEGWk1Xic+IRky5I/Mh1xeM3zlmXBZ4ZNBPxeeIgsZhtYKWBWc7UiCeJQ6qmU76Q9FjlvMVZK5RY7Z78hYG0vrLMdZqDiGIRS5AgQkEJeRRgI0yrToqFOO1HmvgHXL9ELoVceTByLKAIDbLrB/+D391amYlxLykQAVpfHOdjCGjbBaplx/k+dpzqCeB/Bq70ur9YAWY+SS/XtdAR0LMNXFzXNWUPuNwB+p8M2ZRdyU9TyGSA9zP6phTQewt0rnm91fZx+gAkqKvYDXBwCAxnKXu9ybvbG3v790ytvx/W0XLPAuUPuQAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB+QJFQ43OwBEUvIAAAGHSURBVEjHYwwNDf3PMACAiWGAAAuMsXr1akZ6WAgL4QHz8ajFVAX/////T3eL8VlKM4sJWUoTi2/duv2fojh2dvNaQY6lqqoqlCUuZyeH8KTUjP+0sBSvxczMzAxzZ01n8PYPImj5jp27SLIUr8VcXFwMDAwMDFs2rGXw9A38j89SdzdXrHLTps8k3WI+Xl44e9umdQyOrp65pFi6ecs2huysDEaSLWbnYEfh79u1bRIyf868+Tgt3bRlK4Ofrzcj1bITLH/OmTf/f3JiAlY1x46fYPD39SFY07Hgkvj79x/JhcORo8cYbG2sGSlKXCtWrSEplR47foJoS/FavHn9asaY+GSiDLlx4yaDtZUlI1WyEwMDA8PSRfMYM7LzCFqqqalBcuuFYOKaOW0yY3llDVUtJTpVd3W0MrZ3dqOIvX37jmxLScpOVRVljKvXrGNgYGBgeP3mDUNIRHQgVVqZxICw0GDGKdNm/F+1dr3Yob07X9PNYgYGBoYcPMXgaGMPH2AccX0nAG78jzcJ3eJlAAAAAElFTkSuQmCC"

	if [ ! -f "$STLICON" ]; then
		base64 -d <<< "$checked64" > "$STLICON"
	fi

	onepix64="R0lGODlhAQABAIAAAP///wAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw=="

	if [ ! -f "$NOICON" ]; then
		base64 -d <<< "$onepix64" > "$NOICON"
	fi
		
	if [ "$USESTLCSS" -eq 1 ]; then
		unchecked64="iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAABhGlDQ1BJQ0MgcHJvZmlsZQAAKJF9kTtIw0Acxr+mig+qDlYQcchQnSz4xlGrUIQKoVZo1cHk0hc0aUhSXBwF14KDj8Wqg4uzrg6ugiD4AHFydFJ0kRL/lxRaxHpw3I/v7vu4+w4QKgWmWS2jgKbbZjwaEZOpVbHtFR3oQzemMCYzy5iTpBiajq97+Ph6F+ZZzc/9ObrUtMUAn0g8ywzTJt4gnt60Dc77xEGWk1Xic+IRky5I/Mh1xeM3zlmXBZ4ZNBPxeeIgsZhtYKWBWc7UiCeJQ6qmU76Q9FjlvMVZK5RY7Z78hYG0vrLMdZqDiGIRS5AgQkEJeRRgI0yrToqFOO1HmvgHXL9ELoVceTByLKAIDbLrB/+D391amYlxLykQAVpfHOdjCGjbBaplx/k+dpzqCeB/Bq70ur9YAWY+SS/XtdAR0LMNXFzXNWUPuNwB+p8M2ZRdyU9TyGSA9zP6phTQewt0rnm91fZx+gAkqKvYDXBwCAxnKXu9ybvbG3v790ytvx/W0XLPAuUPuQAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB+QJFQ43ClGaUsgAAABASURBVEjH7dexDQAgCERRzrgrM920UjGBiRT+X9G9QIcy88RAK4baPdjWC7AvPLYxMDAwMDAwMDAwMPB9+u53Kvy2CKXoQHekAAAAAElFTkSuQmCC"

		uncheckedpng="$STLSHM/stl-steam-unchecked.png"

		if [ ! -f "$uncheckedpng" ]; then
			base64 -d <<< "$unchecked64" > "$uncheckedpng"
		fi

		STLTHEME="${PROGCMD}-steam"
		CSSDIR="$HOME/.local/share/themes/$STLTHEME/gtk-3.0"

		if [ ! -d "$CSSDIR" ]; then
			mkdir -p "$CSSDIR" 2>/dev/null
		fi
		
		if [ ! -f "$CSSDIR/gtk.css" ]; then
			if [ -z "$1" ]; then
				writelog "INFO" "${FUNCNAME[0]} - installing '$PROGNAME' Steam Theme to '$CSSDIR/gtk.css'"
			fi

			if [ "$(USEDLGLOBAL)" -ge 1 ]; then
				SRCCSS="$GLDLMISCDIR/gtk.css"
			else
				SRCCSS="$GLOBALMISCDIR/gtk.css"
			fi

			if [ -f "$SRCCSS" ] ; then
				cp "$SRCCSS" "$CSSDIR/gtk.css"
			fi
		fi

		if [ -f "$CSSDIR/gtk.css" ] ; then
			if [ -z "$1" ]; then
				writelog "INFO" "${FUNCNAME[0]} - setting 'GTK_THEME=$STLTHEME'"
			fi
			export GTK_THEME="$STLTHEME"
		fi
	fi
}

function createDefaultCfgs {
	createProjectDirs

	mkdir -p "$STLSHM" 2>/dev/null

	if [ -f "$TEMPLOG" ]; then
		rm "$TEMPLOG"
	fi

	loadLanguage "$@"

	saveCfg "$STLDEFGLOBALCFG" X
	loadCfg "$STLDEFGLOBALCFG" X

	saveCfg "$STLGUICFG" X
	saveCfg "$STLURLCFG" X
	loadCfg "$STLURLCFG" X

	prepareGUI

	checkSTLCSS X
	createProjectDirs
	
	getAvailableProtonVersions "n"

	checkStartMode
	saveCfg "$STLDEFGAMECFG" X
	saveCfg "$STLVORTEXCFG"  X
	createProjectDirs

	setGlobalAIDCfgs
}

function checkSTLDLGlobal {
	if [ "$(USEDLGLOBAL)" -ge 1 ]; then
		MAXAGE=1440
		if [ ! -f "$GLDLSTLTXT" ] || [ ! -d "$SYSTEMSTLCFGDIR" ] || test "$(find "$GLDLSTLTXT" -mmin +"$MAXAGE")"; then
			gitPullStl
			date > "$GLDLSTLTXT"
		fi
	fi
}

# updates or creates option $1 with value $2 in configfile $3:
function updateConfigEntry {
	CFGCAT="$1"
	CFGVALUE="$2"
	CFGFILE="$3"

	if [ -z "$3" ]; then
		writelog "SKIP" "${FUNCNAME[0]} - expected 3 arguments - only got $*"
	else
		if [ ! -f "$CFGFILE" ]; then
			writelog "SKIP" "${FUNCNAME[0]} - configfile $CFGFILE does not exist - skipping config update"
		else
			if [ -n "$CFGVALUE" ]; then
				if [ "$CFGVALUE" == "TRUE" ]; then
					CFGVALUE="1"
				elif [ "$CFGVALUE" == "FALSE" ]; then
					CFGVALUE="0"
				fi	
		
				if [ "$CFGVALUE" == "DUMMY" ]; then
					CFGVALUE=""
				fi

				# only save value if it changed
				if [ "${!CFGCAT}" != "$CFGVALUE" ]; then
					if [ "$(grep -c "#${CFGCAT}=" "$CFGFILE")" -eq 1 ]; then
						writelog "INFO" "${FUNCNAME[0]} - option $CFGCAT commented out in config - activating it with the new value $CFGVALUE"
						sed -i "/^#${CFGCAT}=/c$CFGCAT=\"$CFGVALUE\"" "$CFGFILE"
					elif [ "$(grep -c "${CFGCAT}=" "$CFGFILE")" -eq 0 ]; then
						writelog "INFO" "${FUNCNAME[0]} - $CFGCAT option missing in config - adding a new line"
						echo "$CFGCAT=\"$CFGVALUE\"" >> "$CFGFILE"
					else
						writelog "INFO" "${FUNCNAME[0]} - option $CFGCAT is updated with the new value $CFGVALUE"
						sed -i "/^${CFGCAT}=/c$CFGCAT=\"$CFGVALUE\"" "$CFGFILE"
					fi
				fi
			fi
		fi
	fi

	CFGCAT=""
	CFGVALUE=""
	CFGFILE=""
}

# autoapply configuration settings based on the steam categories the game is in:
function autoCategorySettings {
	if [ "$CHECKCATEGORIES" -eq 1 ]; then
		if [ -d "$SUSDA" ]; then
			STEAMUSERID="$(find "$SUSDA" -maxdepth 1 -type d -name "[1-9]*")"
			SC="$STEAMUSERID/$SRSCV"

			if [ ! -f "$SC" ]; then
				writelog "SKIP" "${FUNCNAME[0]} - file '$(basename "$SC")' not found in steam userid dir - skipping"
			else
				writelog "INFO" "${FUNCNAME[0]} - file '$(basename "$SC")' found in steam userid dir - searching categories for game '$AID'"

				while read -r SCAT; do
					if [ "$(USEDLGLOBAL)" -ge 1 ]; then
						GLOBALSCATCONF="$GLDLCATEGORYDIR/$SCAT.conf"
					else
						GLOBALSCATCONF="$GLOBALCATEGORYDIR/$SCAT.conf"
					fi

					if [ -f "$GLOBALSCATCONF" ]; then
						writelog "OK" "${FUNCNAME[0]} - config '$GLOBALSCATCONF' found - loading its settings"
						loadCfg "$GLOBALSCATCONF"
					else
						writelog "SKIP" "${FUNCNAME[0]} - config '$GLOBALSCATCONF' not found - skipping"
					fi

					SCATCONF="$STLCATEGORYDIR/$SCAT.conf"
					if [ -f "$SCATCONF" ]; then
						writelog "OK" "${FUNCNAME[0]} - config '$SCATCONF' found - loading its settings"
						loadCfg "$SCATCONF"
					else
						writelog "SKIP" "${FUNCNAME[0]} - config '$SCATCONF' not found - skipping"
					fi

				done <<< "$(sed -n "/\"$AID\"/,/}/p;" "$SC" | sed -n "/\"tags\"/,/}/p" | sed -n "/{/,/}/p" | grep -v '{\|}' | awk '{print $2}' | sed "s:\"::g")"
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - '$SUSDA' not found - this should not happen! - skipping"
		fi
	fi
}
	
function stracerun {
	writelog "INFO" "${FUNCNAME[0]} - starting stracerun"
	waitForGamePid
	writelog "INFO" "${FUNCNAME[0]} - $STRACE -p $(GAMEPID) $STRACEOPTS -o $STRACEDIR/$AID.log"
	IFS=" " read -r -a RUNSTRACEOPTS <<< "$STRACEOPTS"

	"$STRACE" -p "$(GAMEPID)" "${RUNSTRACEOPTS[@]}" -o "$STRACEDIR/$AID.log"
}

function checkStraceLaunch {
	if [ -n "$STRACERUN" ]; then
		if [ "$STRACERUN" -eq 1 ]; then
			stracerun &
		fi
	fi
}

function netrun {
	writelog "INFO" "${FUNCNAME[0]} - starting network traffic monitor"

	waitForGamePid

	if [ -n "$NETMONDIR" ]; then
		if [ ! -d "$NETMONDIR" ]; then
			writelog "INFO" "${FUNCNAME[0]} - $NETMON dest directory $NETMONDIR does not exist - trying to create it"
			mkdir "$NETMONDIR" 2>/dev/null
		fi

		if [ -d "$NETMONDIR" ]; then
			writelog "INFO" "${FUNCNAME[0]} - writing network traffic for $AID int dest directory $NETMONDIR"
			if [ -f "$NETMONDIR/$AID-$NETMON.log" ]; then
				writelog "INFO" "${FUNCNAME[0]} - removing old $NETMONDIR/$AID-$NETMON.log"
				rm "$NETMONDIR/$AID-$NETMON.log"
			fi
			IFS=" " read -r -a RUNNETOPTS <<< "$NETOPTS"
			"$NETMON" "${RUNNETOPTS[@]}" | grep "wineserver" | grep -v "localhost\|0.0.0.0" >> "$NETMONDIR/$AID-$NETMON.log"
		else
			writelog "SKIP" "${FUNCNAME[0]} - $NETMON dest directory $NETMONDIR still does not exist - skipping"
		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - $NETMON dest directory variable NETMONDIR is empty"
	fi
}

function checkNetMonLaunch {
	if [ "$USENETMON" -eq 1 ]; then
		if [ -n "$NETMON" ]; then
			netrun &
		fi
	fi
}

function checkXliveless {
	if [ -n "$NOGFWL" ]; then
		if [ "$NOGFWL" -eq 1 ]; then
			rm -rf "$GPFX/drive_c/Program Files (x86)/Microsoft Games for Windows - LIVE"
			rm -rf "$GPFX/drive_c/Program Files/Common Files/Microsoft Shared/Windows Live"
			WLID="WLIDSvcM.exe"
			if "$PGREP" "$WLID" >/dev/null; then
				writelog "INFO" "${FUNCNAME[0]} - GFWL starts '$WLID' directly after installation and it never exists - killing it now"
				"$PKILL" -9 "$WLID"
			fi

			XLIVEDLL="xlive.dll"
			XLDL="$STLDLDIR/xlive/"
			mkdir -p "$XLDL" 2>/dev/null

			writelog "INFO" "${FUNCNAME[0]} - game '$GN ($AID)' needs '$XLIVEDLL' - checking"
			if [ -f "$EFD/$XLIVEDLL" ]; then
				writelog "SKIP" "${FUNCNAME[0]} - found '$XLIVEDLL' in dir $EFD - nothing to do"
			else
				writelog "INFO" "${FUNCNAME[0]} - '$XLIVEDLL' not found in gamedir '$EFD'"
				if [ ! -f "$XLDL/$XLIVEDLL" ]; then
					writelog "INFO" "${FUNCNAME[0]} - '$XLDL/$XLIVEDLL' not found - downloading automatically from '$XLIVEURL'"
					"$WGET" "$XLIVEURL" -P "$XLDL"
					"$UNZIP" "$XLDL/$(basename "$DLURL")" -d "$XLDL"
					if [ -f "$XLDL/dinput8.dll" ]; then
						mv "$XLDL/dinput8.dll" "$XLDL/$XLIVEDLL"
					fi
				fi
				if [ -f "$XLDL/$XLIVEDLL" ]; then
					writelog "OK" "${FUNCNAME[0]} - found '$XLIVEDLL' in '$XLDL' - copying into gamedir '$EFD'"
					extRun cp "$XLDL/$XLIVEDLL" "$EFD"
				fi
			fi
		fi
	fi
}

#### protonfixes 
PFATDLDIR="$ATDLDIR/$PF"
GFDIR="$PFATDLDIR/$PF/gamefixes"

function dlPF {
	if [ -n "$PFATDLDIR" ]; then
		gitUpdate "$PFATDLDIR" "$PFDURL"
	else
		writelog "SKIP" "${FUNCNAME[0]} - ERROR - variable PFATDLDIR is empty - skipping $PF update"
	fi
}

function createAutoTweakPF {
	writelog "INFO" "${FUNCNAME[0]} - analyzing file $GFPY"
	PFID="$1"
	PFTWEAKCFG="$PFTWEAKDIR/$PFID.conf"	

	if [ -f "$PFTWEAKCFG" ]; then
		writelog "SKIP" "${FUNCNAME[0]} - $PF tweakfile $PFTWEAKCFG already exists"
	else
		writelog "INFO" "${FUNCNAME[0]} - auto creating tweakfile $PFTWEAKCFG from $PF gamefix"

		WINETRICKSPAKS="$(grep "util.protontricks" "$GFPY" | grep -o -P "(?<=').*(?=')" | tr '\n' ' ' | awk '{$1=$1};1')"
		if [ -n "$WINETRICKSPAKS" ]; then
			writelog "INFO" "${FUNCNAME[0]} - adding WINETRICKSPAKS=\"$WINETRICKSPAKS\" to the tweakfile $PFTWEAKCFG"
			echo "WINETRICKSPAKS=\"$WINETRICKSPAKS\"" >> "$PFTWEAKCFG"
		fi

		CUSTOMCMD="$(grep "util.replace_command" "$GFPY" | cut -d ',' -f2 | grep -o -P "(?<=').*(?=')")"
		if [ -n "$CUSTOMCMD" ]; then
			writelog "INFO" "${FUNCNAME[0]} - adding CUSTOMCMD=$CUSTOMCMD to the tweakfile $PFTWEAKCFG"
			{
			echo "CUSTOMCMD=\"$CUSTOMCMD\""
			echo "RUN_CUSTOMCMD=\"1\""
			echo "ONLY_CUSTOMCMD=\"1\""
			} >> "$PFTWEAKCFG"
		fi

		PFENV="$(grep "util.set_environment" "$GFPY" | grep -o -P "(?<=').*(?=')" | sed "s:', ':=:g")"
		if [ -n "$PFENV" ]; then
			writelog "INFO" "${FUNCNAME[0]} - adding $PFENV to the tweakfile $PFTWEAKCFG"
			echo "$PFENV" >> "$PFTWEAKCFG"
		fi
		
		WINEDLLOVERRIDES="$(grep "util.winedll_override" "$GFPY" | grep -o -P "(?<=').*(?=')" | tr '\n' ' ' | sed "s:', ':=:g"  | awk '{$1=$1};1' | tr ' ' ';')"
		if [ -n "$WINEDLLOVERRIDES" ]; then
			writelog "INFO" "${FUNCNAME[0]} - adding WINEDLLOVERRIDES=$WINEDLLOVERRIDES to the tweakfile $PFTWEAKCFG"
			echo "WINEDLLOVERRIDES=\"$WINEDLLOVERRIDES\"" >> "$PFTWEAKCFG"
		fi

		if grep -q "util.disable_[e,f]sync" "$GFPY"; then
			writelog "INFO" "${FUNCNAME[0]} - disabling ESYNC and FSYNC in $PFTWEAKCFG"
			echo "PROTON_NO_ESYNC=\"1\"" >> "$PFTWEAKCFG"
			echo "PROTON_NO_FSYNC=\"1\"" >> "$PFTWEAKCFG"
		fi
		
		GAMEARGS="$(grep "util.append_argument\|sys.argv.append" "$GFPY" | grep -o -P "(?<=').*(?=')" | tr '\n' ' ' | awk '{$1=$1};1')"
		if [ -n "$GAMEARGS" ]; then
			writelog "INFO" "${FUNCNAME[0]} - adding GAMEARGS=$GAMEARGS to the tweakfile $PFTWEAKCFG"
			echo "GAMEARGS=\"$GAMEARGS\"" >> "$PFTWEAKCFG"
		fi

		if grep -q "util.disable_dxvk" "$GFPY"; then
			writelog "INFO" "${FUNCNAME[0]} - disabling dxvk in $PFTWEAKCFG"
			echo "PROTON_USE_WINED3D11=\"1\"" >> "$PFTWEAKCFG"
			echo "PROTON_USE_WINED3D=\"1\"" >> "$PFTWEAKCFG"
		fi


		if [ -f "$PFTWEAKCFG" ]; then

			# remove duplicate lines:
			awk -i inplace '!visited[$0]++' "$PFTWEAKCFG"

			writelog "CREATE" "${FUNCNAME[0]} - '$PFGN ($PFID)' $PF-autotweak created: '$PFTWEAKCFG'"

			sed  "1s/^/#########\n/" -i "$PFTWEAKCFG"
			sed  "1s/^/#autogenerated from $PF data\n/" -i "$PFTWEAKCFG"
			sed  "1s/^/#GAMEID=\"$PFID\"\n/" -i "$PFTWEAKCFG"
			sed  "1s/^/#GAMENAME=\"$PFGN\"\n/" -i "$PFTWEAKCFG"
			sed  "1s/^/#########\n/" -i "$PFTWEAKCFG"
		fi
	fi
}

function getAutoTweakInfoPF {
	PFID="$1"
	PFTWEAKCFG="$PFTWEAKDIR/$PFID.conf"	

	if [ ! -d "$PFTWEAKDIR" ]; then
		mkdir -p "$PFTWEAKDIR"
	fi

	if [ ! -f "$PFTWEAKCFG" ]; then

		if [ -f "$GFDIR/$1.py" ]; then
			GFPY="$GFDIR/$1.py"
		fi
		
		if [ ! -f "$GFPY" ]; then
			writelog "INFO" "${FUNCNAME[0]} - no $PF sourcefiles found - updating sourcefiles, maybe it was added upstream"
			dlPF
			GFPY="$GFDIR/$1.py"
		fi
		
		if [ -n "$GFPY" ]; then
			if [ -f "$GFPY" ]; then

				# sorting out deprecated and fixes with only custom file configurations (for now)
				if grep -q "DeprecatedSince" "$GFPY"; then
					writelog "SKIP" "${FUNCNAME[0]} - found $PF file $GFPY is marked as deprecated - skipping"
				elif grep -q "Mania\|Potatoman\|Slug\|Crashday" "$GFPY"; then
					writelog "SKIP" "${FUNCNAME[0]} - found $PF file $GFPY is currently not supported by stl - skipping"
				else
					PFGN="$(head -n1 "$GFPY" | awk -F 'Game fix ' '{print $2}' | sed "s:^for ::g" | sed "s:/::g")"
					createAutoTweakPF "$PFID"
				fi
			else
				writelog "SKIP" "${FUNCNAME[0]} - file $GFPY not found - skipping"
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - invalid parameter $1 - skipping"
		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - tweak file '$PFTWEAKCFG' already exists - no need to create it"
	fi
}

function createTweakprotonfixes {
	createDefaultCfgs
	if [ -n "$1" ]; then
		getAutoTweakInfoPF "$1"
	else
		if [ "$AID" == "$PLACEHOLDERAID" ]; then
			if [ ! -f "$GFDIR/default.py" ]; then
				writelog "INFO" "${FUNCNAME[0]} - no $PF sourcefiles found - downloading now"
				dlPF
			fi

			while read -r fix; do
				writelog "INFO" "${FUNCNAME[0]} - analyzing $fix"
				PFID="$(basename "$fix" | cut -d '.' -f1)"
				getAutoTweakInfoPF "$PFID"
			done < <(find "$GFDIR" -name "[0-9]*.py")
		else
			getAutoTweakInfoPF "$AID"
		fi
	fi
}


#### lutris
ATDLDIR="$STLDLDIR/autotweak"
LUATDLDIR="$ATDLDIR/$LU"
DLUDIR="$LUATDLDIR/dl"
WLUDIR="$LUATDLDIR/wip"
WPDIR="$WLUDIR/pages"
WGDIR="$WLUDIR/games"

LULIST="$LUATDLDIR/$LU-full.txt"
LUBACK="$LUATDLDIR/$LU-full-back.txt"
LUSTEAMLIST="$LUATDLDIR/$LU-steam.txt"
LUSTEAMFLIST="$LUATDLDIR/$LU-steam-full.txt"

# dl one $LU page:
function dlLUpage {
	mkdir "$DLUDIR" 2>/dev/null

	PAGE="$1"
	if [ ! -f "$DLUDIR/$PAGE.txt" ]; then
		writelog "INFO" "${FUNCNAME[0]} downloading $LU page $PAGE to $DLUDIR/$PAGE.txt)"
		"$WGET" -q "$LUDURL?page=$PAGE" -O - | sed "s:},{\"id:},\n{\"id:g" > "$DLUDIR/$PAGE.txt"
	fi
}

# download all $LU pages and join them to one big list "$LULIST":
function dlLU {
	mkdir "$DLUDIR" 2>/dev/null
	mkdir -p "$WPDIR" 2>/dev/null

	# first redownload page one, as it contains the game count GAMECOUNT required for calculating the pages to download
	PONE="$DLUDIR/1.txt"
	if [ -f "$PONE" ]; then
		rm "$PONE"
	fi
	dlLUpage 1

	GAMECOUNT="$(head -n1 "$PONE" | grep -oE 'count":[^\,]+' | cut -d ':' -f2)"
	PCNTOUT=$((GAMECOUNT / 250))
	# there might be some more pages than PCNTOUT - trying next PCNTOUTPLUS as well
	PCNTOUTPLUS=3
	PCNTOUTBONUS=$((PCNTOUT + PCNTOUTPLUS))

	# backup the full list before recreating it
	if [ -f "$LULIST" ]; then
		mv "$LULIST" "$LUBACK"
	fi

	writelog "INFO" "${FUNCNAME[0]} calculated $PCNTOUT pages to download, and trying $PCNTOUTPLUS more"

	for ((PCUR=1; PCUR<PCNTOUTBONUS; PCUR++)); do
		dlLUpage "$PCUR"
		DLPAGE="$DLUDIR/$PAGE.txt"

		# remove empty downloads
		if [ ! -s "$DLPAGE" ]; then
			writelog "INFO" "${FUNCNAME[0]} remove empty file $DLPAGE"
			rm "$DLPAGE"
		else
			WORKPAGE="$WPDIR/$PAGE.txt"
			cp "$DLPAGE" "$WORKPAGE"
			# prepare the page to be merged into the big one
			
			# add a line break so the first line can be removed completely in the following step:
			sed "s:results\"\:\[:\n:g" -i "$WORKPAGE"
			# remove first line completely:
			sed "1d" -i "$WORKPAGE"
			# replace closing ']}' with a ',' in every file:
			sed '1h;1!H;$!d;g;s/\(.*\)]}/\1,/' -i "$WORKPAGE"
			# add a new line if missing at the end of each file:
			sed '${/^$/!s/$/\n/;}' -i "$WORKPAGE"
			# merge all pages into one list
			cat "$WORKPAGE" >> "$LULIST"
		fi
	done
}

# create a list as steam relevant as possible. filter might be improvable.
function createLUSteamList {
	if [ ! -f "$LULIST" ]; then
		writelog "INFO" "${FUNCNAME[0]} source list $LULIST not found - downloading data and creating it now"
		dlLU
	fi
		
	awk -F '"script"' '{print $NF}' < "$LULIST" | grep "\"appid\"" | awk 'length($0)>100' | sort -u  > "$LUSTEAMFLIST"
	awk -F '"content"' '{print $1}' < "$LUSTEAMFLIST" | grep -v "run_without_steam\| select \|GOG\|bms\|Itch.io" | sort -u  > "$LUSTEAMLIST"
	writelog "INFO" "${FUNCNAME[0]} full $LU steam list ready at $LUSTEAMLIST"
}

function createAutoTweakLU {
	ATF="$1"
	LUTF="$(basename "${ATF//.txt/.conf}")"
	LUTWEAKCFG="$LUTWEAKDIR/$LUTF"	
	mkdir -p "$LUTWEAKDIR" 2>/dev/null

	ARGARR=()
	WTARR=()
	LUGN=""
	GAMEID="$(cut -d '_' -f1 <<< "${LUTF//.conf/}")"
	
	if [ -f "$LUTWEAKCFG" ]; then
		writelog "SKIP" "${FUNCNAME[0]} tweakfile '$LUTWEAKCFG' already exists!"
	else
		writelog "INFO" "${FUNCNAME[0]} - auto creating tweakfile '$LUTWEAKCFG'"

		if [ -n "$LUATDEBUG" ]; then
			if [ "$LUATDEBUG" -eq 1 ]; then
				LUTWEAK1DEBUG="$STLSHM/LUTWEAKDEBUG-raw.txt"
				LUTWEAKDEBUG="$STLSHM/LUTWEAKDEBUG.txt"
			fi
		fi

		# read raw $LU file line by line and search for importable data
		while read -r line; do

			# if LINECONV is still 0 at the end it can be logged into a temp. unused file later
			LINECONV=0

			# winetricks
			if grep -q "\"name\":\"winetricks\"" <<< "$line"; then
				IFS=" " read -r -a ALINE <<< "$(grep -oE 'app[^\,]+' <<< "$line" | cut -d ':' -f2 | sed "s:\"::g")"
				for i in "${ALINE[@]}"; do
				if grep -q "gfw" <<< "$i"; then
					writelog "INFO" "${FUNCNAME[0]} - not adding gfw to WINETRICKSPAKS, setting NOGFWL instead"
					echo "NOGFWL=\"1\"" >> "$LUTWEAKCFG"
				else
					WTARR+=("$i")
				fi
				done
				LINECONV=1
			fi

			# command line args
			if grep -oE 'game\"[^\}]+' <<< "$line" | grep -q "\"args\":"; then
			IFS=" " read -r -a ARGS <<< "$(grep -oE 'game\"[^\}]+' <<< "$line" | grep "\"args\":" | awk -F '"args":"' '{print $2}' | cut -d'"' -f1)"
				for i in "${ARGS[@]}"; do
					if grep -q "^PROTON\|^RADV" <<< "$i"; then
						writelog "INFO" "${FUNCNAME[0]} - '$i' is a variable - adding to '$LUTWEAKCFG'"
						echo "$i" >> "$LUTWEAKCFG"
					elif ! grep -q "%command%\|nojoy\|applaunch" <<< "$i"; then
						ARGARR+=("$i")
					fi
				done
				LINECONV=1
			fi

			# system - currently only env variables
			if grep -q -oE 'system\"[^\}]+' <<< "$line"; then
				writelog "INFO" "${FUNCNAME[0]} - found system config"
				if  grep -q "\"env\":" <<< "$line"; then
					writelog "INFO" "${FUNCNAME[0]} - found variables"
					while read -r luvar; do
						if ! grep -q "CACHE_PATH\|DXVK_CONFIG_FILE\|WINEPREFIX\|INPUT_HUD\|\"WINE\"\|__GL\|DXVK_HUD\|VK_ICD_FILENAMES\|RESOLUTIONx32\|PBA_ENABLE" <<< "$luvar"; then
							writelog "INFO" "${FUNCNAME[0]} - found variable $luvar"
							echo "$luvar" >> "$LUTWEAKCFG"
						fi
					done <<< "$(grep -oE 'env\"[^\}]+' <<< "$line" | awk -F':{' '{print $2}' | sed "s:,:\n:g" | sed "s:\"::g" | sed "s:\::=:g")"
				fi
				LINECONV=1
			fi

			# dll overrides
			if grep -q -oE 'overrides\"[^\}]+' <<< "$line"; then
				writelog "INFO" "${FUNCNAME[0]} - found overrides"
				ORLINE="$(grep -oE 'overrides\"[^\}]+' <<< "$line" | awk -F':{' '{print $2}' | sed "s:\",:;:g" | sed "s:\"::g" | sed "s:\::=:g" | sed "s:disabled:d:g" | sed "s:native:n:g" | sed "s:builtin:b:g")"
				echo "WINEDLLOVERRIDES=\"$ORLINE\"" >> "$LUTWEAKCFG"
				LINECONV=1
			fi

			# pulseaudio 
			if grep -q "pulse_latency" <<< "$line"; then
				writelog "INFO" "${FUNCNAME[0]} - found pulse_latency - setting PULSE_LATENCY_MSEC=60"

				echo "CHANGE_PULSE_LATENCY=\"1\"" >> "$LUTWEAKCFG"
				echo "STL_PULSE_LATENCY_MSEC=\"60\"" >> "$LUTWEAKCFG"
				LINECONV=1
			fi


			# xlive 
			if grep -q "xlive\|gfw" <<< "$line"; then
				writelog "INFO" "${FUNCNAME[0]} - found xlive - setting NOGFWL"
				echo "NOGFWL=\"1\"" >> "$LUTWEAKCFG"
				LINECONV=1
			fi

			# write_config 
			if grep -q "write_config" <<< "$line"; then
				writelog "INFO" "${FUNCNAME[0]} - found write_config setting TWEAKCMD"
					echo "TWEAKCMD=\"$GAMEID.sh\"" >> "$LUTWEAKCFG"
					TWEAKLUCMD="$TWEAKCMDDIR/$GAMEID.sh"
					if [ -f "$TWEAKLUCMD" ];then
						writelog "SKIP" "${FUNCNAME[0]} - TWEAKCMD $TWEAKLUCMD does already exists - not autogenerating"
					else
						writelog "INFO" "${FUNCNAME[0]} - creating TWEAKCMD $TWEAKLUCMD"
						WCFILE="$(grep -oE '"file":"[^\",]+' <<< "$line" | cut -d':' -f2 | sed "s:^\"::" | sed "s:\$GAMEDIR/prefix:\$GPFX:"| sed "s:\$GAMEDIR:\"\$GPFX\":" | sed  "s:\$USER:steamuser:")"
						WCKEY="$(grep -oE '"key":"[^\",]+' <<< "$line" | cut -d':' -f2 | sed "s:^\"::")"
						WCSECTION="$(grep -oE '"section":"[^\",]+' <<< "$line" | cut -d':' -f2 | sed "s:^\"::")"
						WCVALUE="$(grep -oE '"value":"[^\",]+' <<< "$line" | cut -d':' -f2 | sed "s:^\"::")"
						{
							echo "# $line"
							echo ""
							echo "GPFX=\"\$STEAM_COMPAT_DATA_PATH/pfx\""
							echo ""
							echo "FILE=\"$WCFILE\""
							echo "FILEDIR=\"\$(dirname \"\$FILE\")\""
							echo "mkdir -p \"\$FILEDIR\" 2>/dev/null"
							echo "KEY=\"$WCKEY\""
							echo "SECTION=\"$WCSECTION\""
							echo "VALUE=\"$WCVALUE\""
							echo "if [ ! -f \"\$FILE\" ]; then"
							echo " echo \"[\$SECTION]\" >> \"\$FILE\""
							echo " echo \"\$KEY:\$VALUE\" >> \"\$FILE\""
							echo "fi"
						} >> "$TWEAKLUCMD"

					fi
				LINECONV=1
			fi

			# download urls and extraction lines are just added as commented out raw lines to the tweakfile:
			if grep -q "\"http\|\"extract\"" <<< "$line"; then
				echo "## RAW # '$line'" >> "$LUTWEAKCFG"
				LINECONV=1
			fi

			
			if [ -n "$LUATDEBUG" ]; then
				if [ "$LUATDEBUG" -eq 1 ]; then
					if [ "$LINECONV" -eq 0 ]; then
						echo "## TODO # $GAMEID ### '$line'" >> "$LUTWEAK1DEBUG"
					fi
				fi
			fi
		done < "$ATF"

		if [ -n "$LUATDEBUG" ]; then
			if [ "$LUATDEBUG" -eq 1 ]; then
				awk -i inplace '!visited[$0]++' "$LUTWEAK1DEBUG"
				grep -v "write_config\|KB976932\|appid\|insert-disc\|\"winesteam\"\|''\|create_prefix\|winekill\|\"description\"\|N\/A\|\"files\"" "$LUTWEAK1DEBUG" >> "$LUTWEAKDEBUG"
				awk -i inplace '!visited[$0]++' "$LUTWEAKDEBUG"
			fi
		fi

		# add collected winetricks packages to $LUTWEAKCFG as WINETRICKSPAKS
		if [ -n "${WTARR[0]}" ]; then
			writelog "INFO" "${FUNCNAME[0]} - found following winetricks packages: '${WTARR[*]}'"

			# 12170 glitches with result "WINETRICKSPAKS=mfc42}}]}"
			if [ "$GAMEID" == "12170" ]; then
				echo "WINETRICKSPAKS=\"mfc42\"" >> "$LUTWEAKCFG"
			else
				WTO="$(echo "${WTARR[*]}" | tr ' ' '\n' | sort -u | tr '\n' ' ' | awk '{$1=$1};1')"	
				echo "WINETRICKSPAKS=\"$WTO\"" >> "$LUTWEAKCFG"
			fi
		fi

		# add GAMEARGS to $LUTWEAKCFG
		if [ -n "${ARGARR[0]}" ]; then
			writelog "INFO" "${FUNCNAME[0]} - found following game arguments: '${ARGARR[*]}'"
			echo "GAMEARGS=\"${ARGARR[*]}\"" >> "$LUTWEAKCFG"
		fi

		if [ -f "$LUTWEAKCFG" ]; then
			# remove duplicate lines:
			awk -i inplace '!visited[$0]++' "$LUTWEAKCFG"

			LUGN="$(grep -m1 "\"appid\":$GAMEID," "$LULIST" | awk -F '"name":' '{print $2}' | cut -d ',' -f1 | sed "s:/::g")"
			if [ -z "$LUGN" ]; then
				LUGN="$(grep -m1 "\"appid\":$GAMEID}" "$LULIST" | awk -F '"name":' '{print $2}' | cut -d ',' -f1 | sed "s:/::g")"
			fi
			
			writelog "CREATE" "${FUNCNAME[0]} - '$LUGN ($GAMEID)' $LU-autotweak created: '$LUTWEAKCFG'"

			sed  "1s/^/#########\n/" -i "$LUTWEAKCFG"
			sed  "1s/^/#autogenerated from $LU data\n/" -i "$LUTWEAKCFG"
			sed  "1s/^/#GAMEID=\"$GAMEID\"\n/" -i "$LUTWEAKCFG"
			sed  "1s/^/#GAMENAME=\"$LUGN\"\n/" -i "$LUTWEAKCFG"
			sed  "1s/^/#########\n/" -i "$LUTWEAKCFG"
		fi
		
		if [ -f "$TWEAKLUCMD" ];then
			awk -i inplace '!visited[$0]++' "$TWEAKLUCMD"
			LUGN="$(grep -m1 "\"appid\":$GAMEID," "$LULIST" | awk -F '"name":' '{print $2}' | cut -d ',' -f1 | sed "s:/::g")"
			if [ -z "$LUGN" ]; then
				LUGN="$(grep -m1 "\"appid\":$GAMEID}" "$LULIST" | awk -F '"name":' '{print $2}' | cut -d ',' -f1 | sed "s:/::g")"
			fi

			writelog "CREATE" "${FUNCNAME[0]} - '$LUGN ($GAMEID)' TWEAKCMD created: '$TWEAKLUCMD'"
			
			if ! grep -q "^#" <<< "$(head -n1 "$TWEAKLUCMD")"; then
				sed  "1s/^/#########\n/" -i "$TWEAKLUCMD"
				sed  "1s/^/#autogenerated from $LU data\n/" -i "$TWEAKLUCMD"
				sed  "1s/^/#GAMEID=\"$GAMEID\"\n/" -i "$TWEAKLUCMD"
				sed  "1s/^/#GAMENAME=\"$LUGN\"\n/" -i "$TWEAKLUCMD"
				sed  "1s/^/#########\n/" -i "$TWEAKLUCMD"
				sed  "1s/^/#\!\/bin\/bash\n/" -i "$TWEAKLUCMD"
			fi
			chmod +x "$TWEAKLUCMD"
		fi
	fi
}

function getLUgameData {
	LUAID="$1"
	RAWLINE="$2"

	if [ -n "$3" ];then
		writelog "INFO" "${FUNCNAME[0]} creating raw datafile '$WGDIR/${LUAID}_$3.txt'"
		echo "$RAWLINE" | sed 's/},/},\n/g' | sed 's/],/],\n/g' > "$WGDIR/${LUAID}_$3.txt"
		createAutoTweakLU "$WGDIR/${LUAID}_$3.txt"
	else
		writelog "INFO" "${FUNCNAME[0]} creating raw datafile '$WGDIR/$LUAID.txt'"
		echo "$RAWLINE" | sed 's/},/},\n/g' | sed 's/],/],\n/g' > "$WGDIR/$LUAID.txt"
		createAutoTweakLU "$WGDIR/$LUAID.txt"
	fi
}

function getAutoTweakInfoLU {

	if [ ! -f "$LUSTEAMLIST" ]; then
		writelog "INFO" "${FUNCNAME[0]} list '$LUSTEAMLIST' not found - creating it now"
		createLUSteamList
	fi

	if [ -z "$1" ];then
		writelog "SKIP" "${FUNCNAME[0]} need steamID as arg1!"
	else
		LUAID="$1"

		LUTWEAKCFG="$LUTWEAKDIR/$LUAID.conf"	
	
		if [ -f "$LUTWEAKCFG" ]; then
			writelog "SKIP" "${FUNCNAME[0]} tweakfile '$LUTWEAKCFG' already exists - no need to create it"
		else
			mkdir "$WGDIR" 2>/dev/null
			if [ -f "$WGDIR/$LUAID.txt" ]; then
				writelog "INFO" "${FUNCNAME[0]} already found raw data for game under '$WGDIR/$LUAID.txt' - working on it"
					createAutoTweakLU "$WGDIR/$LUAID.txt"
			else
				LUGC="$(grep -c "\"appid\":$LUAID\|\"appid\":\"$LUAID" "$LUSTEAMLIST")"

				if [ "$LUGC" -gt 0 ]; then
					writelog "INFO" "${FUNCNAME[0]} found data for game '$LUAID' - working on it"

					getLUgameData "$LUAID" "$(grep "\"appid\":$LUAID\|\"appid\":\"$LUAID" "$LUSTEAMLIST")"

					if [ "$LUGC" -eq 1 ]; then
						writelog "INFO" "${FUNCNAME[0]} there's one explicit match"
					else
						writelog "INFO" "${FUNCNAME[0]} the game has '$LUGC' entries in the '$LU' db"
						for ((GCUR=2; GCUR<=LUGC; GCUR++)); do
							writelog "INFO" "${FUNCNAME[0]} working on entry '$GCUR/$LUGC'"
							RAWLINE="$(grep -m "$GCUR" "\"appid\":$LUAID" "$LUSTEAMLIST" | tail -n1)"
							getLUgameData "$LUAID" "$RAWLINE" "$GCUR"
						done
					fi
				else
					writelog "SKIP" "${FUNCNAME[0]} no data found for game '$LUAID'!"
				fi
			fi
		fi
	fi
}

function createTweaklutris {
	createDefaultCfgs
	if [ -n "$1" ]; then
		getAutoTweakInfoLU "$1"
	else
		if [ ! -f "$LUSTEAMLIST" ]; then
			createLUSteamList
		fi

		if [ "$AID" == "$PLACEHOLDERAID" ]; then
			while read -r line; do
				getAutoTweakInfoLU "$line"
			done <<< "$(awk -F '"appid":' '{print $2}' < "$LUSTEAMLIST" | cut -d ',' -f1 | grep -Eo '[0-9]{1,10}' | sort -u)"
		else
			getAutoTweakInfoLU "$AID"
		fi
	fi
}

function guiLoadCfg {
	GUICFG="$1"

	TITLE="${PROGNAME}-AskLoadTweak"

	loadCfg "$STLGUICFG" X
	updateWinRes "$TITLE" "$STLGUICFG" "ALTREQWIDTH" "ALTREQHEIGHT" &

	writelog "INFO" "${FUNCNAME[0]} - requester asking if '$GUICFG' should be loaded"
	if [ "$USEGUI" == "$YAD" ]; then
		LC_ALL="" "$YAD" --borders="$YADBORDER" --window-icon="$STLICON" --form --center --on-top "$WINDECO" \
		--title="$TITLE" \
		--geometry="$ALTREQWIDTH"x"$ALTREQHEIGHT"+0+0 \
		--field="$GUI_LOADATCFG '$VALCFG'?":LBL \
		--field="<span font=\"italic\">($GUI_SKIPLOADATFOR '$GN ($AID)')</span>":LBL \
		--button="$BUT_SKIP":0  \
		--button="$BUT_LOAD":1  \
		--button="$BUT_IGNORE":2  \
		--timeout="$WAITEDITOR" \
		--timeout-indicator=top
		case $? in
			0)  writelog "SKIP" "${FUNCNAME[0]} - selected to skip '$GUICFG'"
			;; 
			1)	LOADAUTOCFG="$GUICFG"
				writelog "INFO" "${FUNCNAME[0]} - marked '$LOADAUTOCFG' for loading"
			;;
			2)	writelog "INFO" "${FUNCNAME[0]} - adding 'IGNOREAUTOTWEAKS=\"1\"' to '$TWEAKCFG'"
				updateConfigEntry "IGNOREAUTOTWEAKS" "1" "$STLGAMECFG"
			;;
		esac
	elif [ "$USEGUI" == "$ZENITY" ]; then
		ZENSEL="$("$ZENBIN" --list --title="$PROGNAME ($PROGCMD) - $PROGVERS" --text="$GUI_LOADATCFG\n'VALCFG'?\n($GUI_SKIPLOADATFOR '$GN ($AID)')" --radiolist --column "Choose" --column "Option" FALSE "Load" FALSE "Skip" FALSE "Ignore" --timeout="$WAITEDITOR" --width="$ALTREQWIDTH" --height="$ALTREQHEIGHT" 2>/dev/null)"
		if [ "$ZENSEL" == "Load" ]; then
			LOADAUTOCFG="$GUICFG"
			writelog "INFO" "${FUNCNAME[0]} - marked '$LOADAUTOCFG' for loading"
		elif [ "$ZENSEL" == "Skip" ]; then
			writelog "SKIP" "${FUNCNAME[0]} - selected to skip '$GUICFG'"
		elif [ "$ZENSEL" == "Ignore" ]; then
			if [ -f "$TWEAKCFG" ]; then
				writelog "INFO" "${FUNCNAME[0]} - adding 'IGNOREAUTOTWEAKS=\"1\"' to '$TWEAKCFG'"
				updateConfigEntry "IGNOREAUTOTWEAKS" "1" "$TWEAKCFG"
			else
				writelog "INFO" "${FUNCNAME[0]} - adding 'IGNOREAUTOTWEAKS=\"1\"' to '$STLGAMECFG'"
				updateConfigEntry "IGNOREAUTOTWEAKS" "1" "$STLGAMECFG"
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - Nothing selected - skipping '$GUICFG'"
		fi	
	fi
}

function validateATCfg {
	VALCFG="$1"
	
	if [ -z "$ATVALIDATE" ]; then
		ATVALIDATE="$WAITEDITOR"
	fi

	if [ "$ATVALIDATE" -ge 1 ]; then

		TITLE="${PROGNAME}-AskEditTweak"
		loadCfg "$STLGUICFG" X
		updateWinRes "$TITLE" "$STLGUICFG" "AETREQWIDTH" "AETREQHEIGHT" &

		writelog "INFO" "${FUNCNAME[0]} - gui asking if '$VALCFG' should be edited as ATVALIDATE is '$ATVALIDATE', autoloaded, skipped or ignored"
		
		if [ "$USEGUI" == "$YAD" ]; then
			LC_ALL="" "$YAD" --borders="$YADBORDER" --window-icon="$STLICON" --form --center --on-top "$WINDECO" \
			--title="$TITLE" \
			--geometry="$AETREQWIDTH"x"$AETREQHEIGHT"+0+0 \
			--field="$GUI_FOUNDATCFG '$VALCFG'":LBL \
			--field="<span font=\"italic\">($GUI_EDIT/$GUI_SKIPLOADATFOR '$GN ($AID)')</span>":LBL \
			--button="$BUT_EDIT":0  \
			--button="$BUT_SKIP":1  \
			--button="$BUT_LOAD":2  \
			--button="$BUT_IGNORE":3  \
			--timeout="$ATVALIDATE" \
			--timeout-indicator=top
			case $? in
				0)	writelog "INFO" "${FUNCNAME[0]} - selected EDIT - opening '$VALCFG' with the editor now"
					"$STLEDITOR" "$VALCFG"
					guiLoadCfg "$VALCFG"
				;;
				1)  writelog "SKIP" "${FUNCNAME[0]} - selected SKIP"
				;; 
				2)	LOADAUTOCFG="$GUICFG"
					writelog "INFO" "${FUNCNAME[0]} - selected LOAD - marked '$LOADAUTOCFG' for loading"
				;;
				3)	writelog "INFO" "${FUNCNAME[0]} - selected IGNORE - adding 'IGNOREAUTOTWEAKS=\"1\"' to '$STLGAMECFG'"
					updateConfigEntry "IGNOREAUTOTWEAKS" "1" "$STLGAMECFG"
				;;
				70) writelog "SKIP" "${FUNCNAME[0]} - TIMEOUT - skipping"
				;;
			esac
		elif [ "$USEGUI" == "$ZENITY" ]; then
				ZENSEL="$("$ZENBIN" --list --title="$PROGNAME ($PROGCMD) - $PROGVERS" --text="$GUI_FOUNDATCFG '$VALCFG'.\n($GUI_EDIT/$GUI_SKIPLOADATFOR '$GN ($AID)')" --radiolist --column "Choose" --column "Option" FALSE "Edit" FALSE "Skip" FALSE "Load" FALSE "Ignore" --timeout="$ATVALIDATE" --width="$AETREQWIDTH" --height="$AETREQHEIGHT" 2>/dev/null)"
				if [ "$ZENSEL" == "Edit" ]; then
					writelog "INFO" "${FUNCNAME[0]} - selected EDIT - opening '$VALCFG' with the editor now"
					"$STLEDITOR" "$VALCFG"
					guiLoadCfg "$VALCFG"
				elif [ "$ZENSEL" == "Load" ]; then
					LOADAUTOCFG="$GUICFG"
					writelog "INFO" "${FUNCNAME[0]} - selected LOAD - marked '$LOADAUTOCFG' for loading"
				elif [ "$ZENSEL" == "Skip" ]; then
					writelog "SKIP" "${FUNCNAME[0]} - selected to skip '$GUICFG'"
				elif [ "$ZENSEL" == "Ignore" ]; then
					writelog "INFO" "${FUNCNAME[0]} - selected IGNORE - adding 'IGNOREAUTOTWEAKS=\"1\"' to '$STLGAMECFG'"
					updateConfigEntry "IGNOREAUTOTWEAKS" "1" "$STLGAMECFG"
				else
					writelog "SKIP" "${FUNCNAME[0]} - Nothing selected - skipping '$GUICFG'"
				fi
		else
			LOADAUTOCFG="$VALCFG"
			writelog "WARN" "${FUNCNAME[0]} - USEGUI '$USEGUI' invalid - marked '$VALCFG' for loading automatically"
		fi
	else
		LOADAUTOCFG="$VALCFG"
		writelog "INFO" "${FUNCNAME[0]} - ATVALIDATE is '$ATVALIDATE' - marked '$VALCFG' for loading automatically"
	fi
}

function AdoptAutoTweak {
	if [ -f "$TWEAKCFG" ]; then
		mv "$TWEAKCFG" "${TWEAKCFG}_old"
		writelog "INFO" "${FUNCNAME[0]} - moved exiting tweakfile '$TWEAKCFG' to'${TWEAKCFG}_old'"
	fi
	
	cp "$LOADAUTOCFG" "$TWEAKCFG"
	echo "IGNOREAUTOTWEAKS=\"1\"" >> "$TWEAKCFG"
	sed "/^#GAMENAME.*/a #GAMEEXE=\"$GE\"" -i "$TWEAKCFG"
	sed "/^#GAMEID.*/a #PROTONVERSION=\"$PROTONVERSION\"" -i "$TWEAKCFG"

	writelog "INFO" "${FUNCNAME[0]} - changed the autotweakfile '$LOADAUTOCFG' to '$TWEAKCFG'"
}

function AskAdoptAutoTweak {
	if [ "$USEGUI" == "$YAD" ]; then

		TITLE="${PROGNAME}-ConvertAutoTweak"

		loadCfg "$STLGUICFG" X
		updateWinRes "$TITLE" "$STLGUICFG" "CATREQWIDTH" "CATREQHEIGHT" &
	
		LC_ALL="" "$YAD" --borders="$YADBORDER" --window-icon="$STLICON" --form --center --on-top "$WINDECO" \
		--title="$TITLE" \
		--geometry="$CATREQWIDTH"x"$CATREQHEIGHT"+0+0 \
		--text="<span font_weight='bold'>$GN ($AID) - $GUI_ASKCOBERTAT</span>" \
		--field=" ":LBL " " \
		--field="$(strFix "$GUI_ADOPTANDSKIP" "$GN" "$AID")":LBL \
		--field="<span font=\"italic\">($GUI_WILLBEBACKED)</span>":LBL \
		--field=" ":LBL " " \
		--button="$BUT_ADOPT":0  \
		--button="$BUT_CANCEL":1  \
		--timeout="$WAITEDITOR" \
		--timeout-indicator=top
		case $? in
			0) writelog "INFO" "${FUNCNAME[0]} - selected ADOPT - converting '$LOADAUTOCFG' to a regular tweakfile"
			   AdoptAutoTweak
			;;
			1) writelog "SKIP" "${FUNCNAME[0]} - selected CANCEL - not using '$LOADAUTOCFG' as regular tweakfile for '$GN ($AID)'"
			;;
			70) writelog "INFO" "${FUNCNAME[0]} - TIMEOUT - doing nothing"
			;;
		esac
	elif [ "$USEGUI" == "$ZENITY" ]; then
		ZENSEL="$("$ZENBIN" --list --title="$PROGNAME ($PROGCMD) - $PROGVERS" --text="$GUI_ASKCOBERTAT" --radiolist --column "Choose" --column "Option" FALSE "Adobt" FALSE "Cancel" --timeout="$WAITEDITOR" --width="$CATREQWIDTH" --height="$CATREQHEIGHT" 2>/dev/null)"
		if [ "$ZENSEL" == "Adobt" ]; then
			writelog "INFO" "${FUNCNAME[0]} - selected ADOPT - converting '$LOADAUTOCFG' to a regular tweakfile"
		   AdoptAutoTweak
		elif [ "$ZENSEL" == "Cancel" ]; then
			writelog "SKIP" "${FUNCNAME[0]} - selected CANCEL - not using '$LOADAUTOCFG' as regular tweakfile for '$GN ($AID)'"
		else
			writelog "INFO" "${FUNCNAME[0]} - TIMEOUT - doing nothing"
		fi
	fi
}


# load autogenerated tweak config
function getprotonfixesCfg {	
	if [ -f "$PFTWEAKCFG" ]; then
		writelog "INFO" "${FUNCNAME[0]} - '$PF' imported autotweak config found at '$PFTWEAKCFG'"
		validateATCfg "$PFTWEAKCFG"
	fi
}

function getlutrisCfg {
	if [ -f "$LUTWEAKCFG" ]; then
		writelog "INFO" "${FUNCNAME[0]} - '$LU' imported autotweak config found at '$LUTWEAKCFG'"
		validateATCfg "$LUTWEAKCFG"
	fi

	while read -r addfile; do
		writelog "INFO" "${FUNCNAME[0]} - additional '$LU' imported autotweak config found at '$addfile'"
		if [ -f "$addfile" ]; then
			validateATCfg "$addfile"
		fi
	done <<< "$(find "$LUTWEAKDIR" -mindepth 1 -maxdepth 1 -type f -name "${AID}_*.conf")"
}

#### generic autoTweak :
function autoGenTweak {
	
	if grep -q "^IGNOREAUTOTWEAKS=\"1\"" "$STLGAMECFG"; then
		writelog "SKIP" "${FUNCNAME[0]} - IGNOREAUTOTWEAKS set in '$STLGAMECFG'"
	elif  grep -q "^IGNOREAUTOTWEAKS=\"1\"" "$TWEAKCFG"; then
		writelog "SKIP" "${FUNCNAME[0]} - IGNOREAUTOTWEAKS set in '$TWEAKCFG'"
	elif  grep -q "^IGNOREAUTOTWEAKS=\"1\"" "$STLDEFGLOBALCFG"; then
		writelog "SKIP" "${FUNCNAME[0]} - IGNOREAUTOTWEAKS set in '$STLDEFGLOBALCFG'"
	else
		if [ -n "$AUTOTWEAKS" ]; then

			writelog "INFO" "${FUNCNAME[0]} - AUTOTWEAKS defined as '$AUTOTWEAKS' trying to import from supported platforms"
			while read -r ATCAND; do
				if grep -q "$ATCAND" <<< "$AUTOTWEAKPLATFORMS" ; then
					writelog "INFO" "${FUNCNAME[0]} - '$ATCAND' is a supported platform"
					createTweak"$ATCAND"
					get"$ATCAND"Cfg
				else
					writelog "SKIP" "${FUNCNAME[0]} - '$ATCAND' is no supported platform"
				fi
			done <<< "$(tr ' ' '\n' <<< "$AUTOTWEAKS")"
		fi
	fi
}

function launchCustomProg {
	if [ -z "$CUSTOMCMD" ] || [ "$CUSTOMCMD" == "$("$WHICH" echo 2>/dev/null)" ]; then

		writelog "INFO" "${FUNCNAME[0]} - CUSTOMCMD variable is empty - opening file requester"

		TITLE="${PROGNAME}-OpenCustomProgram"

		loadCfg "$STLGUICFG" X
		updateWinRes "$TITLE" "$STLGUICFG" "CUSTPROGREQWIDTH" "CUSTPROGREQHEIGHT" &

		if [ "$USEGUI" == "$YAD" ]; then
			ZCUST="$(LC_ALL="" "$YAD" --window-icon="$STLICON" --borders="$YADBORDER" --form --center --on-top "$WINDECO" \
			--title="$TITLE" \
			--geometry="$CUSTPROGREQWIDTH"x"$CUSTPROGREQHEIGHT"+0+0 \
			--text="<span font_weight='bold'>$GN ($AID) - $GUI_SELECTCUSTOMEXE</span>" \
			--field=" ":LBL " " \
			--field="$GUI_SELECTEXE":FL)"

		elif [ "$USEGUI" == "$ZENITY" ]; then
			ZCUST="$("$ZENBIN" --file-selection --width="$CUSTPROGREQWIDTH" --height="$CUSTPROGREQHEIGHT" --title="$GUI_SELECTCUSTOMEXE" 2>/dev/null)"
		fi

		if [ -n "$ZCUST" ]; then
			if [ "$RUN_CUSTOMCMD" -eq 2 ]; then
				writelog "INFO" "${FUNCNAME[0]} - '${ZCUST//|/}' selected for CUSTOMCMD - not updating configfile '$STLGAMECFG' as RUN_CUSTOMCMD is '$RUN_CUSTOMCMD'"
			else
				writelog "INFO" "${FUNCNAME[0]} - '${ZCUST//|/}' selected for CUSTOMCMD - updating configfile '$STLGAMECFG'"
				updateConfigEntry "CUSTOMCMD" "${ZCUST//|/}" "$STLGAMECFG"
			fi
			CUSTOMCMD="${ZCUST//|/}"
		else
			writelog "SKIP" "${FUNCNAME[0]} - nothing selected for CUSTOMCMD - skipping"
			if [ "$ONLY_CUSTOMCMD" -eq 1 ]; then
				writelog "SKIP" "${FUNCNAME[0]} - ONLY_CUSTOMCMD is enabled - bailing out here"
				closeSTL
				writelog "INFO" " ######### STOP EARLY '$PROGNAME $PROGVERS' #########"
				exit
			else
				writelog "SKIP" "${FUNCNAME[0]} - continuing with the main game"
				return
			fi
		fi
	fi
	
	if [ -z "$CUSTOMCMD" ]; then
		writelog "ERROR" "${FUNCNAME[0]} - CUSTOMCMD variable is empty - but it shouldn't be empty here!"
	fi	
		
	if  [ -x "$(command -v "$CUSTOMCMD" 2>/dev/null)" ]; then
		writelog "INFO" "${FUNCNAME[0]} - '$CUSTOMCMD' found in PATH"
		LACO="$CUSTOMCMD"
		CUSTCOM="$("$WHICH" "$CUSTOMCMD" 2>/dev/null)"
	else
		writelog "INFO" "${FUNCNAME[0]} - '$CUSTOMCMD' not in path - searching in gamedir"

		if [ -f "$EFD/$CUSTOMCMD" ]; then
			writelog "INFO" "${FUNCNAME[0]} - '$CUSTOMCMD' was found in gamedir '$EFD'"
			LACO="$EFD/$CUSTOMCMD"
			CUSTCOM="$EFD/$CUSTOMCMD"
		else
			writelog "INFO" "${FUNCNAME[0]} - '$CUSTOMCMD' also not in '$EFD/$CUSTOMCMD' - checking if absolute path was provided"

			if [ -f "$CUSTOMCMD" ]; then
				writelog "INFO" "${FUNCNAME[0]} - '$CUSTOMCMD' is absolute path"
				LACO="$CUSTOMCMD"
				CUSTCOM="$CUSTOMCMD"
			else
				writelog "INFO" "${FUNCNAME[0]} - CUSTOMCMD file '$CUSTOMCMD' not found - opening file requester"
			
				TITLE="${PROGNAME}-OpenCustomProgram"

				loadCfg "$STLGUICFG" X
				updateWinRes "$TITLE" "$STLGUICFG" "CUSTPROGREQWIDTH" "CUSTPROGREQHEIGHT" &
				
				if [ "$USEGUI" == "$YAD" ]; then
					ZCUST="$(LC_ALL="" "$YAD" --window-icon="$STLICON" --borders="$YADBORDER" --form --center --on-top "$WINDECO" \
					--title="$TITLE" \
					--geometry="$CUSTPROGREQWIDTH"x"$CUSTPROGREQHEIGHT"+0+0 \
					--text="<span font_weight='bold'>$GN ($AID) - $GUI_SELECTCUSTOMEXE</span>" \
					--field=" ":LBL " " \
					--field="$GUI_SELECTEXE":FL)"		
				elif [ "$USEGUI" == "$ZENITY" ]; then
					ZCUST="$("$ZENBIN" --file-selection --width="$CUSTPROGREQWIDTH" --height="$CUSTPROGREQHEIGHT" --title="$GUI_SELECTCUSTOMEXE" 2>/dev/null)"
				fi
				
				if [ -n "$ZCUST" ]; then
					writelog "INFO" "${FUNCNAME[0]} - '${ZCUST//|/}' selected for CUSTOMCMD - updating configfile '$STLGAMECFG'"
					updateConfigEntry "CUSTOMCMD" "${ZCUST//|/}" "$STLGAMECFG"
					LACO="${ZCUST//|/}"
					CUSTCOM="${ZCUST//|/}"
					CUSTOMCMD="${ZCUST//|/}"
				else
					writelog "SKIP" "${FUNCNAME[0]} - nothing selected for CUSTOMCMD - skipping"
					if [ "$ONLY_CUSTOMCMD" -eq 1 ]; then
						writelog "SKIP" "${FUNCNAME[0]} - ONLY_CUSTOMCMD is enabled - bailing out here"
						closeSTL
						writelog "INFO" " ######### STOP EARLY $PROGNAME $PROGVERS #########"
						exit
					else
						writelog "SKIP" "${FUNCNAME[0]} - continuing with the main game"
						return
					fi
				fi
			fi
		fi
	fi

	if [ -z "$LACO" ]; then
		writelog "SKIP" "${FUNCNAME[0]} - ERROR - launch command empty- skipping launch"
	else
		if [ -z "$CUSTOMCMD_ARGS" ] || [ "$CUSTOMCMD_ARGS" == "none" ]; then
			writelog "INFO" "${FUNCNAME[0]} - starting the custom program '$CUSTOMCMD' without args"
			RUNCUSTOMCMD_ARGS=""
		else
			writelog "INFO" "${FUNCNAME[0]} - starting the custom program '$CUSTOMCMD' with args: '$CUSTOMCMD_ARGS'"
			IFS=" " read -r -a RUNCUSTOMCMD_ARGS <<< "$CUSTOMCMD_ARGS"
		fi

		writelog "INFO" "${FUNCNAME[0]} - launching custom command with '$LACO' '$CUSTOMCMD_ARGS'"

		if [ "$(extRun file "$CUSTCOM" | grep -c "PE32")" -eq 1 ]; then
			writelog "INFO" "${FUNCNAME[0]} - '$CUSTCOM' seems to be a MS Windows exe - starting through proton"
			if [ "$(extRun file "$CUSTCOM" | grep -c "(console)")" -eq 1 ]; then
				writelog "INFO" "${FUNCNAME[0]} - '$CUSTCOM' seems to be a MS console program - starting using wineconsole"
				extWine64Run "$RUNWINE" wineconsole "$LACO" "${RUNCUSTOMCMD_ARGS[@]}"
			else
				writelog "INFO" "${FUNCNAME[0]} - '$CUSTCOM' seems to be a MS gui program - starting regularly"
				extWine64Run "$RUNWINE" "$LACO" "${RUNCUSTOMCMD_ARGS[@]}"
			fi
		else
			writelog "INFO" "${FUNCNAME[0]} - '$CUSTCOM' doesn't seem to be a MS Windows exe - regular start (without further analysing)"
			extRun "$LACO" "${RUNCUSTOMCMD_ARGS[@]}"
		fi
	fi
}

function wmp10toPFX {
		while [ ! -d "$SWOW" ]; do 
			writelog "WAIT" "${FUNCNAME[0]} - waiting for directory '$SWOW' to appear"
			sleep 1
			if [ -f "$CLOSETMP" ]; then
				writelog "WAIT" "${FUNCNAME[0]} - $PROGCMD is just closing - leaving loop"
				break
			fi
		done

		if [ -f "$STLDLDIR/$MP10S" ]; then
			writelog "INFO" "${FUNCNAME[0]} - extracting '$STLDLDIR/$MP10S' to '$SWOW'"
			notiShow "$(strFix "$NOTY_WMP2" "$MP10S" "$SWOW")"
			"$CABEXTRACT" -d "$SWOW" "$STLDLDIR/$MP10S" 2>/dev/null
			writelog "INFO" "${FUNCNAME[0]} - removing two wine dlls which come uppercase with '$MP10S'"
			rm "${SWOW}/wmasf.dll" 2>/dev/null
			rm "${SWOW}/wmvcore.dll" 2>/dev/null
			writelog "INFO" "${FUNCNAME[0]} - '$MP10S' dlls have been successfully installed into '$SWOW'"
		else
			writelog "SKIP" "${FUNCNAME[0]} - couldn't extract '$STLDLDIR/$MP10S' to '$SWOW'"
		fi
}

function wmp10hack {
	SWOW="$GPFX/drive_c/windows/syswow64"
	if [ -f "${SWOW}/WMASF.DLL" ] && [ -f "${SWOW}/wmasf.dll" ]; then
		rm "${SWOW}/wmasf.dll" 2>/dev/null
	fi

	if [ -f "${SWOW}/WMVCORE.DLL" ] && [ -f "${SWOW}/wmvcore.dll" ]; then
		rm "${SWOW}/wmvcore.dll" 2>/dev/null
	fi

	if [ -f "$SWOW/wmpasf.dll" ]; then
		writelog "SKIP" "${FUNCNAME[0]} - looks like wmp10 was already copied into '$GPFX' - nothing to do"
	else
		MP10S="MP10Setup.exe"
		if [ ! -f "$STLDLDIR/$MP10S" ]; then
			writelog "INFO" "${FUNCNAME[0]} - downloading '$MP10S' from '$WMP10URL'"
			notiShow "$(strFix "$NOTY_WMP1" "$MP10S" "$WMP10URL")"
			"$WGET" "$WMP10URL/$MP10S" -O "$STLDLDIR/$MP10S"
		else
			writelog "SKIP" "${FUNCNAME[0]} - found '$MP10S' in '$STLDLDIR' - nothing to download"
		fi

		wmp10toPFX &
	fi
}

function checkCustomLaunch {

	if [ -n "$HACKWMP10" ] ; then
		if [ "$HACKWMP10" -eq 1 ] ; then
			wmp10hack
			cd "$EFD" || return
		fi
	else
		# start a custom program:
		if [ -n "$RUN_CUSTOMCMD" ] ; then
			if [ "$RUN_CUSTOMCMD" -ge 1 ] ; then
				writelog "INFO" "${FUNCNAME[0]} - RUN_CUSTOMCMD is set to '$RUN_CUSTOMCMD' - trying to start custom program '$CUSTOMCMD'"
			# fork in background and continue
				if [ "$FORK_CUSTOMCMD" -eq 1 ]; then
					writelog "INFO" "${FUNCNAME[0]} - FORK_CUSTOMCMD is set to 1 -  forking the custom program in background and continue"
					launchCustomProg &
			# or wait
				else
					writelog "INFO" "${FUNCNAME[0]} - FORK_CUSTOMCMD is set to 0 - starting the custom program regularly"
					launchCustomProg
				fi


				if [ "$ONLY_CUSTOMCMD" -eq 1 ]; then
					writelog "INFO" "${FUNCNAME[0]} - ONLY_CUSTOMCMD is set to 1 means only custom program '$CUSTOMCMD' is supposed to start - exiting here"
					closeSTL
					writelog "INFO" " ######### STOP EARLY $PROGNAME $PROGVERS #########"
					exit
				fi
			else
				if [ -n "$CUSTOMCMD" ] && [ "$CUSTOMCMD" != "$("$WHICH" echo 2>/dev/null)" ]; then
					writelog "SKIP" "${FUNCNAME[0]} - RUN_CUSTOMCMD is set to 0 therefore skipping the custom program '$CUSTOMCMD'"
				fi
			fi
		fi
	fi
}

function toggleWindows {

	if [ -z "$MINIMIZEDWINDOWS" ]; then
		MINIMIZEDWINDOWS=""
	fi

	if [ -n "$TOGGLEWINDOWS" ]; then
		if [ "$TOGGLEWINDOWS" -eq 1 ]; then
			writelog "INFO" "${FUNCNAME[0]} - setting windows to $1"
			WSTATE="$1"

			while read -r WINNAME; do
				if "$XPROP" -id "$WINNAME" | grep "_NET_WM_ACTION_MINIMIZE" -q ;then
					if [ "$WSTATE" == "windowminimize" ]; then
						if "$XPROP" -id "$WINNAME" | grep "_NET_WM_STATE_HIDDEN" -q ;then
							MINIMIZEDWINDOWS="${MINIMIZEDWINDOWS} $WINNAME"
						else
							writelog "INFO" "${FUNCNAME[0]} - minimizing '$WINNAME'"
							"$XDO" "$WSTATE" "$WINNAME"
						fi
					elif [ "$WSTATE" == "windowraise" ]; then
						if grep -q "$WINNAME" <<< "$MINIMIZEDWINDOWS" ; then
							writelog "INFO" "${FUNCNAME[0]} - '$WINNAME' was already minimized - not raising it"
						else
							writelog "INFO" "${FUNCNAME[0]} - raising '$WINNAME'"
							"$XDO" "$WSTATE" "$WINNAME"
							# apparently sometimes windows don't raise although the command was executed ($XDO bug or executed too fast?)
							# so simply raising twice here
							"$XDO" "$WSTATE" "$WINNAME"
						fi
					fi
				fi
			done <<< "$("$WMCTRL" -l | cut -d ' ' -f1)"
			
			if [ "$1" == "windowminimize" ]; then
				writelog "INFO" "${FUNCNAME[0]} - following windows won't be raised on exit, as they are minimized: '$MINIMIZEDWINDOWS'"
			elif [ "$2" == "windowraise" ]; then
				writelog "INFO" "${FUNCNAME[0]} - following windows were not raised, as they were minimized: '$MINIMIZEDWINDOWS'"
			fi
		fi
	fi
}

function checkWinetricksInstPak {
	if [ -n "$WINETRICKSPAKS" ] && [ "$WINETRICKSPAKS" != "none" ] && [ "$WINETRICKSPAKS" != "0" ]; then
		IFS=" " read -r -a INSTWINETRICKSPAKS <<< "$WINETRICKSPAKS"
		WTLOG="$GPFX/winetricks.log"
		if [ ! -f "$WTLOG" ]; then
			writelog "INFO" "${FUNCNAME[0]} - installing '$WINETRICKSPAKS' silently with '$WINETRICKS'"
			# if everything goes well all packages are installed at once:
			extWine64Run "$WINETRICKS" --unattended "${INSTWINETRICKSPAKS[@]}"
		else
			NOTINSTALLEDLIST="$(comm -23 <(echo "${INSTWINETRICKSPAKS[*]}" | tr ' ' '\n' | sort) <(sort < "$WTLOG"))"
			NOTINSTALLED=()
			while IFS= read -r wp; do
				NOTINSTALLED+=("$wp")
			done <<< "$NOTINSTALLEDLIST"

			if [ -n "${NOTINSTALLED[0]}" ]; then
				writelog "INFO" "${FUNCNAME[0]} - installing following packages now: '${NOTINSTALLED[*]}'"
				extWine64Run "$WINETRICKS" --unattended "${NOTINSTALLED[@]}"
				# re-check here?
				# checkWinetricksInstPak
			else
				writelog "INFO" "${FUNCNAME[0]} - all packages of '$WINETRICKSPAKS' are already installed - nothing to do"
			fi
		fi
	fi
}

# start winetricks before game launch:
function checkWinetricksLaunch {
	# gui:
	if [ -n "$RUN_WINETRICKS" ]; then
		if [ "$RUN_WINETRICKS" -eq 1 ]; then
			writelog "INFO" "${FUNCNAME[0]} - launching '$WINETRICKS' before game start with following command line:"
			# several variables coming from steam have to be cleaned in order to get wine to work here
			writelog "INFO" "${FUNCNAME[0]} - '$WINETRICKS --gui'"
			extWine64Run "$WINETRICKS" --gui
		fi
	fi
	# silent
	checkWinetricksInstPak
}

# start $WINECFG before game launch:
function checkWineCfgLaunch {
	if [ -n "$RUN_WINECFG" ]; then
		if [ "$RUN_WINECFG" -eq 1 ]; then
			writelog "INFO" "${FUNCNAME[0]} - starting '$WINECFG' before game start:"
			# several variables coming from steam have to be cleaned in order to get wine to work here
			writelog "INFO" "${FUNCNAME[0]} - winecfg"
			extWine64Run "$WINECFG"
		fi
	fi
}

function regEdit {
	REGEDITCMD="regedit"
	if  [ -x "$(command -v "$REGEDITCMD" 2>/dev/null)" ]; then
		if [ -z "$1" ]; then
			writelog "INFO" "${FUNCNAME[0]} - starting $REGEDITCMD without arguments"
			extWine64Run "$REGEDITCMD"
		else
			writelog "INFO" "${FUNCNAME[0]} - starting $REGEDITCMD with argument $1"
			extWine64Run "$REGEDITCMD" "$1"
			writelog "INFO" "${FUNCNAME[0]} - disabling $REGEDITCMD in '$STLGAMECFG' - need a config to skip this?"
			updateConfigEntry "REGEDITCMD" "0" "$STLGAMECFG"
		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - command '$REGEDITCMD' not found - skipping"
	fi
}

function customRegs {
	if [ -n  "$VIRTUALDESKTOP" ]; then
		if [ "$VIRTUALDESKTOP" -eq 1 ]; then
			TEMPREG="$STLSHM/temp.reg"
			if [ -f "$TEMPREG" ]; then
				rm "$TEMPREG"
			fi

			if touch "$TEMPREG"; then
				writelog "INFO" "${FUNCNAME[0]} - VIRTUALDESKTOP is set to 1 - enabling virtual desktop"
				{
				echo "Windows Registry Editor Version 5.00"
				echo "[HKEY_CURRENT_USER\Software\Wine\Explorer]"
				echo "\"Desktop\"=\"Default\""
				echo "[HKEY_CURRENT_USER\Software\Wine\Explorer\Desktops]"
				echo "\"Default\"=\"$(xrandr | grep "\*" | awk '{print $1}')\""
				} >> "$TEMPREG"

				regEdit "$TEMPREG"

				if [ -f "$TEMPREG" ]; then
					rm "$TEMPREG"
				fi

			else
				writelog "SKIP" "${FUNCNAME[0]} - could not create '$TEMPREG' - skipping!"
			fi
		fi
	fi

	if [ "$REGEDIT" -eq 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - REGEDIT set, looking for '$AID' registry files"

		if [ -f "$AIDREG" ]; then
			regEdit "$AIDREG"
		fi
		
		if [ -f "$STLREGDIR/$AID.reg" ]; then
			regEdit "$STLREGDIR/$AID.reg"
		fi
	else
		if [ "$REGEDIT" -ne 0 ]; then
		
			if [ "$(USEDLGLOBAL)" -ge 1 ];then
				AIDREG="$GLDLREGDIR/$REGEDIT"
			else
				AIDREG="$GLOBALREGDIR/$REGEDIT"
			fi

			if [ -f "$AIDREG" ]; then
				regEdit "$AIDREG"
			fi

			if [ -f "$STLREGDIR/$REGEDIT" ]; then
				regEdit "$STLREGDIR/$REGEDIT"		
			fi

			if [ ! -f "$AIDREG" ] && [ ! -f "$STLREGDIR/$REGEDIT" ]; then
				writelog "SKIP" "${FUNCNAME[0]} - '$REGEDIT' neither found global nor local - skipping"
			fi
		fi
	fi
}

function useNyrna {
	if [ -n "$RUN_NYRNA" ]; then
		if [ "$RUN_NYRNA" -eq 1 ]; then
			if "$PGREP" -f "$NYRNA" >/dev/null; then
				writelog "SKIP" "${FUNCNAME[0]} - '$NYRNA' already running - skipping"
				RUN_NYRNA=0
			else
			writelog "INFO" "${FUNCNAME[0]} - starting '$NYRNA'"
			"$NYRNA" &
			fi
		fi
	fi
}

function useReplay {
	if [ -n "$RUN_REPLAY" ]; then
		if [ "$RUN_REPLAY" -eq 1 ]; then
			if "$PGREP" -f "$REPLAY" >/dev/null; then
				writelog "SKIP" "${FUNCNAME[0]} - '$REPLAY' already running - skipping"
				RUN_REPLAY=0
			else
			writelog "INFO" "${FUNCNAME[0]} - starting '$REPLAY'"
			"$REPLAY" &
			fi
		fi
	fi
}

# gameconqueror
function runGamCon {
	if [ -n "$RUN_GAMCON" ]; then
		if [ "$RUN_GAMCON" -eq 1 ]; then
			writelog "OK" "${FUNCNAME[0]} - starting '$GAMCON' process"

			if [ -n "$GAMCONWAITEXE" ] && [ "$GAMCONWAITEXE" != "$("$WHICH" echo 2>/dev/null)" ]; then
				if [ -f "$GAMCONWAITEXE" ]; then
					writelog "OK" "${FUNCNAME[0]} - waiting for alternative '$GAMCONWAITEXE' process"
					while [ -z "$("$PIDOF" "$GAMCONWAITEXE" | cut -d ' ' -f1)" ]; do 
						writelog "WAIT" "${FUNCNAME[0]} - waiting for '$GAMCONWAITEXE' PID"
						sleep 1
					done
					GCGPID="$("$PIDOF" "$GAMCONWAITEXE" | cut -d ' ' -f1)"
				else
					writelog "SKIP" "${FUNCNAME[0]} - alternative '$GAMCONWAITEXE' defined but file doesn't exist - continuing with regular game exe"
					waitForGamePid
					GCGPID="$(GAMEPID)"
				fi
			else
				waitForGamePid
				GCGPID="$(GAMEPID)"
			fi
			
			writelog "INFO" "${FUNCNAME[0]} - game process found at '$GCGPID'"
			writelog "INFO" "${FUNCNAME[0]} - starting  '$GAMCON $GCGPID'"
			"$GAMCON" "$GCGPID"
		fi
	fi
}

# start gameconqueror
function checkGamConLaunch {
	if [ -n "$RUN_GAMCON" ]; then
		if [ "$RUN_GAMCON" -ge 1 ]; then
			# start the whole GamCon start/wait/stop/process
			writelog "OK" "${FUNCNAME[0]} - starting '$GAMCON' process for '$AID'"
			if [ "$RUN_GAMCON" -eq 1 ]; then
				runGamCon &
			elif [ "$RUN_GAMCON" -gt 1 ]; then
				writelog "INFO" "${FUNCNAME[0]} - RUN_GAMCON is greater than 1 - starting '$GAMCON' delayed for RUN_GAMCON '$RUN_GAMCON' seconds"
				( sleep "$RUN_GAMCON"; runGamCon) &
			else
				writelog "SKIP" "${FUNCNAME[0]} - ERROR - RUN_GAMCON is '$RUN_GAMCON' which is invalid - setting to 0"
				RUN_GAMCON=0
			fi
		fi
	fi
}

function checkPulse {
	if [ "$CHANGE_PULSE_LATENCY" -eq 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - setting PULSE_LATENCY_MSEC to '$STL_PULSE_LATENCY_MSEC'"
		export PULSE_LATENCY_MSEC="$STL_PULSE_LATENCY_MSEC"
	fi
}

# Vortex:

function addVortexStage {

	if [ ! -f "$VORTEXSTAGELIST" ]; then 
		{
		echo "# List of directories, which Vortex uses as 'Stage directories'"
		echo "# (see README for a comprehensive description)"
		echo "################################################"
		} > "$VORTEXSTAGELIST"
	fi

	if [ -z "$1" ]; then
		TITLE="${PROGNAME}-AddVortexStage"

		loadCfg "$STLGUICFG" X
		updateWinRes "$TITLE" "$STLGUICFG" "AVSREQWIDTH" "AVSREQHEIGHT" &

		if [ "$USEGUI" == "$YAD" ]; then
			NEWVS="$(LC_ALL="" "$YAD" --window-icon="$STLICON" --borders="$YADBORDER" --form --center --on-top "$WINDECO" \
			--file --directory \
			--title="$TITLE" \
			--geometry="$AVSREQWIDTH"x"$AVSREQHEIGHT"+0+0 \
			--text="<span font_weight='bold'>$GUI_SELECTVORTEXDIR</span>" )"
		elif [ "$USEGUI" == "$ZENITY" ]; then
			NEWVS="$("$ZENITY" --file-selection --directory --width="$AVSREQWIDTH" --height="$AVSREQHEIGHT" --title="$GUI_SELECTVORTEXDIR" 2>/dev/null)"
		fi
	else
		if [ -d "$1" ]; then
			NEWVS="$1"
		elif [ -d "$(dirname "$1")" ]; then
			if mkdir "$1" 2>/dev/null; then
				NEWVS="$1"
			else
				writelog "SKIP" "${FUNCNAME[0]} - skipping invalid argument '$1'"
			fi
		fi
	fi
	
	if [ -n "$NEWVS" ];then
		echo "$NEWVS" >> "$VORTEXSTAGELIST"
		awk -i inplace '!visited[$0]++' "$VORTEXSTAGELIST"
	fi
}

function wineVortexRun {
	# leave LC_ALL=C else your "My Documents" will not be found!
	LC_ALL="C" PATH="$STLPATH" LD_LIBRARY_PATH="" LD_PRELOAD="" DXVK_LOG_PATH="$VORTEX_DXVK_LOG_PATH" DXVK_LOG_LEVEL="$VORTEX_DXVK_LOG_LEVEL" WINE="$VORTEXWINE"  WINEARCH="win64" WINEDEBUG="$VORTEXWINEDEBUG" WINEPREFIX="${VORTEXPREFIX//\"/}" "$@"
}

function installVortexDeps {
	writelog "INFO" "${FUNCNAME[0]} - installing Vortex dependencies"

	VORTEXDEPS="win10 corefonts dotnet48 dxvk"
	IFS=" " read -r -a INSTVORTEXPAKS <<< "$VORTEXDEPS"
	WTLOG="${VORTEXPREFIX//\"/}/winetricks.log"

	if [ ! -f "$WTLOG" ]; then
		writelog "INFO" "${FUNCNAME[0]} - installing '$VORTEXDEPS' silently with $WINETRICKS"
		wineVortexRun "$WINETRICKS" --unattended "${INSTVORTEXPAKS[@]}"
		writelog "INFO" "${FUNCNAME[0]} - $VORTEXDEPS installed"
	else
		NOTINSTALLEDLIST="$(comm -23 <(echo "${INSTVORTEXPAKS[*]}" | tr ' ' '\n' | sort) <(sort < "$WTLOG"))"
		NOTINSTALLED=()
		while IFS= read -r wp; do
			NOTINSTALLED+=("$wp")
		done <<< "$NOTINSTALLEDLIST"

		if [ -n "${NOTINSTALLED[0]}" ]; then
			writelog "INFO" "${FUNCNAME[0]} - installing following packages now: '${NOTINSTALLED[*]}'"
				wineVortexRun "$WINETRICKS" --unattended "${NOTINSTALLED[@]}"
		else
			writelog "INFO" "${FUNCNAME[0]} - all packages of '$VORTEXDEPS' are already installed - nothing to do"
		fi
	fi
}

function cleanVortex {
	MSCOR="mscorsvw.exe"
	if "$PGREP" "$MSCOR" >/dev/null; then
		writelog "INFO" "${FUNCNAME[0]} - killing leftovers of $MSCOR"
		"$PKILL" -9 "$MSCOR"
	fi
}

function setVortexDLMime {
	writelog "INFO" "${FUNCNAME[0]} - INFO: Linking Nexus Mods downloads to Vortex"

	VD="vortex-$PROGCMD-dl.desktop"
	FVD="$HOME/.local/share/applications/$VD"

	if [ ! -f "$FVD" ]; then
		writelog "INFO" "${FUNCNAME[0]} - creating new desktop file $FVD"
		{
		echo "[Desktop Entry]"
		echo "Type=Application"
		echo "Categories=Game;"
		echo "Name=Vortex ($PROGNAME - $PROGCMD)"
		echo "MimeType=x-scheme-handler/nxm;x-scheme-handler/nxm-protocol"
		echo "Terminal=false"
		echo "X-KeepTerminal=false"
		echo "Path=$(dirname "$VORTEXEXE")"
		echo "Exec=env LC_ALL=C WINEDEBUG=\"-all\" WINEPREFIX=\"${VORTEXPREFIX//\"/}\" \"$VORTEXWINE\" Vortex.exe -d %u"
		echo "NoDisplay=true"
		} >> "$FVD"
	else
		if grep -q "$VORTEXPREFIX" "$FVD"; then
			writelog "INFO" "${FUNCNAME[0]} - desktopfile $FVD seems to be up2date"
			return
		else
			writelog "INFO" "${FUNCNAME[0]} - renaming desktopfile $FVD and creating a new one for $PROGCMD"
			mv "$FVD" "$FVD-old"
			setVortexDLMime
		fi	
	fi

	# setting mime types for nxm
	XDGMIME="xdg-mime"

	if  [ -x "$(command -v "$XDGMIME" 2>/dev/null)" ]; then
		writelog "INFO" "${FUNCNAME[0]} - setting download defaults for nexusmod protocol via $XDGMIME pointing at $VD"
		"$XDGMIME" default "$VD" x-scheme-handler/nxm
		"$XDGMIME" default "$VD" x-scheme-handler/nxm-protocol
	else
		writelog "SKIP" "${FUNCNAME[0]} - $XDGMIME not found - couldn't set download defaults for nexusmod protocol - skipping"
	fi
}

function installVortex {
	writelog "OK" "${FUNCNAME[0]} - VORTEXINSTALL is set to 1 - trying to install Vortex into VORTEXPREFIX $VORTEXPREFIX"
	
	if [ -n "$VORTEXVERSION" ]; then
		writelog "OK" "${FUNCNAME[0]} - installing VORTEXVERSION $VORTEXVERSION"
		VORTEXSETUP="vortex-setup-$VORTEXVERSION.exe"
		VORTEXDLDIR="$STLDLDIR/Vortex"

		# download:
		if [ ! -d "$VORTEXDLDIR" ]; then
			mkdir -p "$VORTEXDLDIR" 2>/dev/null
		fi
		
		if [ ! -f "$VORTEXDLDIR/$VORTEXSETUP" ];then
			writelog "OK" "${FUNCNAME[0]} - downloading $VORTEXSETUP to $VORTEXDLDIR from $VORTEXURL$VORTEXVERSION/$VORTEXSETUP"
			if [ -n "$VORTEXURL" ]; then
				"$WGET" "$VORTEXURL$VORTEXVERSION/$VORTEXSETUP" -O "$VORTEXDLDIR/$VORTEXSETUP"
			fi

			if [ -f "$VORTEXDLDIR/$VORTEXSETUP" ];then
				writelog "OK" "${FUNCNAME[0]} - download succeeded - continuing installation"
			else
				return
			fi
		fi

		# install:
		writelog "OK" "${FUNCNAME[0]} - installing Vortex installation with into WINEPREFIX ${VORTEXPREFIX//\"/} with command $VORTEXWINE $VORTEXDLDIR/$VORTEXSETUP"

		wineVortexRun "$VORTEXWINE" "$VORTEXDLDIR/$VORTEXSETUP" /S
		writelog "OK" "${FUNCNAME[0]} - Vortex installation succeeded"
	else
		writelog "SKIP" "${FUNCNAME[0]} - no VORTEXVERSION defined - nothing to download - skipping"
	fi
}

function linkVortex {
	LNSRC="$1"
	LNDST="$2"
	
	if readlink "$LNDST" >/dev/null ; then
		writelog "OK" "${FUNCNAME[0]} - symlink $LNDST already exists"
		if [ "$(readlink "$LNDST")" == "$LNSRC" ]; then
			writelog "OK" "${FUNCNAME[0]} - symlink $LNDST already points to the correct directory $LNSRC"
		else
			writelog "OK" "${FUNCNAME[0]} - symlink $LNDST points to $(readlink "$LNDST") which is not the correct directory $LNSRC - renewing!"
			rm "$LNDST"
			ln -s "$LNSRC" "$LNDST"
		fi
	else
		if [ -d "$LNDST" ]; then
			writelog "OK" "${FUNCNAME[0]} - $LNDST is a real directory - renaming it to $LNDST-$(date +%y-%m-%d)"
			mv "$LNDST" "$LNDST-$(date +%y-%m-%d)"
		fi
		writelog "OK" "${FUNCNAME[0]} - symlink from '$LNSRC' to '$LNDST' does not exist yet - creating it now"
		ln -s "$LNSRC" "$LNDST"
	fi
}

function getVortexStage {
	if [ -z "$VORTEXSTAGING" ]; then
		WANTSTAGE="$1"
		mkdir "$WANTSTAGE" 2>/dev/null
		if [ -d "$WANTSTAGE" ]; then
			writelog "INFO" "${FUNCNAME[0]} - created dir '$WANTSTAGE' $PARTLOG"
			VORTEXSTAGING="$WANTSTAGE"
		fi
	fi 	
}

function setupGameVortex {

	if [ -d "$VORTEXINSTDIR" ]; then
		VBP="$VORTEXINSTDIR/resources/app.asar.unpacked/bundledPlugins"
		writelog "INFO" "${FUNCNAME[0]} - trying to find the Nexus GameID for the game '$GN ($AID)' in Vortex Install dir $VORTEXINSTDIR"

		SEARCH="$AID"
		if [ "$AID" == "22370" ]; then # Fallout 3 German is not detected by vortex
			SEARCH="22300"
		fi

		NEXUSGAMEFILE="$(grep -r -i "$SEARCH" "$VBP"/game-*/index.js | grep -i "steamAppId\|STEAM_ID" | grep -oE '^[^\:]+' | sort -u | head -n1)"

		if [ -n "$NEXUSGAMEFILE" ]; then
			if [ -f "$NEXUSGAMEFILE" ]; then
				writelog "INFO" "${FUNCNAME[0]} - found NEXUSGAMEFILE $NEXUSGAMEFILE for the game '$GN ($AID)'"

				if [ -n "$NEXUSGAMEID" ] ;then
					writelog "INFO" "${FUNCNAME[0]} - found Nexus GameID '$NEXUSGAMEID' for the game '$GN ($AID)' in game config"
				else
					NEXUSGAMEID="$(awk -F 'game-' '{print $2}' <<< "$(basename "$(awk -F '/index.js' '{print $1}' <<< "$NEXUSGAMEFILE")")")"
					if [ -n "$NEXUSGAMEID" ]; then
						writelog "OK" "${FUNCNAME[0]} - autodetected Nexus GameID '$NEXUSGAMEID' - adding it to the game config '$STLGAMECFG'"
						updateConfigEntry "NEXUSGAMEID" "$NEXUSGAMEID" "$STLGAMECFG"
						writelog "INFO" "${FUNCNAME[0]} - cut the Nexus GameID '$NEXUSGAMEID' for the game '$GN ($AID)' out of the filename '$NEXUSGAMEFILE'"
					fi
				fi
			else
				writelog "SKIP" "${FUNCNAME[0]} - NEXUSGAMEFILE '$NEXUSGAMEFILE' is not a valid file"
				return
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - looks like the game '$GN ($AID)' is not supported in Vortex/Nexus, or autodetecting failed"
		fi
	else
		writelog "ERROR" "${FUNCNAME[0]} - Vortex Install dir '$VORTEXINSTDIR' not found - this shouldn't happen"
	fi


	# configure Game Specific Vortex Settings:
	if [ -n "$NEXUSGAMEID" ]; then

		# configure Vortex Download Dir:
		if [ -z "$VORTEXDOWNLOADPATH" ]; then
			VORTEXDOWNLOADPATH="$STLDLDIR"
			writelog "INFO" "${FUNCNAME[0]} - VORTEXDOWNLOADPATH was not set - set default to '$VORTEXDOWNLOADPATH'"
		fi

		if [ -n "$VORTEXDOWNLOADPATH" ]; then
			writelog "INFO" "${FUNCNAME[0]} - configuring $VORTEXDOWNLOADPATH as Vortex Download Path"

			if [ ! -d "$VORTEXDOWNLOADPATH" ]; then
				writelog "INFO" "${FUNCNAME[0]} - creating Vortex Download Dir '$VORTEXDOWNLOADPATH'"
				mkdir -p "$VORTEXDOWNLOADPATH"
			fi

			VDPF="$VORTEXDOWNLOADPATH/__vortex_downloads_folder"
			if [ ! -f "$VDPF" ]; then
				echo "{\"instance\":\"empty\"}" > "$VDPF"
			fi

			VORTEXDOWNLOADWINPATH="$(wineVortexRun "$VORTEXWINE" winepath -w "$VORTEXDOWNLOADPATH" | sed "s/\\\/\\\\\\\/g")"
			writelog "INFO" "${FUNCNAME[0]} - setting Vortex Download WinDir '$VORTEXDOWNLOADWINPATH' in Vortex"
			cd "$VORTEXINSTDIR" || return
			wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --set settings.downloads.path=true
			wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --set settings.downloads.path=\""$VORTEXDOWNLOADWINPATH"\"
			cd - || return
		fi

		# Game Settings:

		# autodiscover our "manual added" game
		GDNP="C:\\\Program Files (x86)\\\Steam\\\steamapps\\\common\\\\$GN"
		
		cd "$VORTEXINSTDIR" || return
		wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --set settings.gameMode.discovered."$NEXUSGAMEID".hidden=false
		wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --set settings.gameMode.discovered."$NEXUSGAMEID".path=true
		wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --set settings.gameMode.discovered."$NEXUSGAMEID".path=\""$GDNP"\"
		wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --set settings.mods.activator."$NEXUSGAMEID"=true
		wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --set settings.mods.activator."$NEXUSGAMEID"=\"hardlink_activator\"
		cd - || return

		if [ -f "$NEXUSGAMEFILE" ]; then
			if grep -q -E 'getPath.*documents' "$NEXUSGAMEFILE"; then
				writelog "INFO" "${FUNCNAME[0]} - found Modpath in $NEXUSGAMEFILE - creating it in '$GPFX'"
				# LOAD_ORDER_FILENAME exclude for witcher3
				GMODPATH="$(grep -E 'getPath.*documents' "$NEXUSGAMEFILE" | grep -v "LOAD_ORDER_FILENAME\|()" | awk -F ')\, ' '{print $NF}' |  awk -F ')' '{print $1}'  | sed "s:, :\/:g" | sed "s:'::g")"
				if [ -n "$SteamUserMyDocs" ] && [ -n "$GMODPATH" ]; then
					writelog "INFO" "${FUNCNAME[0]} - creating directory $SteamUserMyDocs/$GMODPATH"
					mkdir -p "$SteamUserMyDocs/$GMODPATH" 2>/dev/null
				fi
			fi

			# find matching Staging Directory:
			GAMEMP="$(df -P "$GP" | awk 'END{print $NF}')"
			writelog "INFO" "${FUNCNAME[0]} - mount point of partition where the game is installed: '$GAMEMP'"
			CONFSTAGE=""

			if [ -f "$VORTEXSTAGELIST" ]; then
				CONFSTAGE="$(grep "$GAMEMP" "$VORTEXSTAGELIST")"
			fi

			if [ -n "$CONFSTAGE" ]; then
				if [ -d "$CONFSTAGE" ]; then
					writelog "INFO" "${FUNCNAME[0]} - configured VORTEXSTAGING dir found: '$CONFSTAGE'"
					VORTEXSTAGING="$CONFSTAGE"
				else
					writelog "ERROR" "${FUNCNAME[0]} - configured entry '$CONFSTAGE' found in '$VORTEXSTAGELIST', but this isn't a useable directory"
				fi
			fi

			if [ -z "$VORTEXSTAGING" ]; then
				if [ "$DISABLE_AUTOSTAGES" -eq 1 ]; then
					writelog "SKIP" "${FUNCNAME[0]} - VORTEXSTAGING is empty and you disabled autostages - skipping vortex"
					VORTEXMODE="disabled"
				else
					PARTLOG=" - using that as VORTEXSTAGING dir for all games on partition' $GAMEMP'"
					HOMEMP="$(df -P "$STLVORTEXDIR" | awk 'END{print $NF}')"
					writelog "INFO" "${FUNCNAME[0]} - HOMEMP is $HOMEMP and GAMEMP is $GAMEMP"

					# don't pollute base steam installation with a ~/.steam/steam/Vortex dir, so default to $STLVORTEXDIR/stageing
					if [ "$GAMEMP" == "$HOMEMP" ]; then	
						getVortexStage "$STLVORTEXDIR/staging"
					fi

					# try in base directory of the partition:
					getVortexStage "$GAMEMP/Vortex"

					# then try in the current SteamLibrary dir besides steamapps, as it should be writeable by the user and is unused from steam(?):
					getVortexStage "$(awk -F 'steamapps' '{print $1}' <<< "$GP")Vortex"

					# updating Vortex config with the new found VORTEXSTAGING dir:
					if [ -n "$VORTEXSTAGING" ]; then
						if ! grep -q "$VORTEXSTAGING" < "$VORTEXSTAGELIST"; then
							writelog "INFO" "${FUNCNAME[0]} - adding '$VORTEXSTAGING' to the Vortex Stage List '$VORTEXSTAGELIST'"
							addVortexStage "$VORTEXSTAGING"
						fi
					fi
				fi
			fi

			if [ -z "$VORTEXSTAGING" ]; then
				writelog "SKIP" "${FUNCNAME[0]} - no useable staging directory autodetected - giving up"
				VORTEXMODE="disabled"
			fi

			if [ -n "$VORTEXSTAGING" ]; then
				writelog "INFO" "${FUNCNAME[0]} - VORTEXSTAGING set to '$VORTEXSTAGING' - configuring '$NEXUSGAMEID' installPath"
				VGSGM="$VORTEXSTAGING/$NEXUSGAMEID/mods"

				writelog "INFO" "${FUNCNAME[0]} - creating Vortex Staging folder '$VGSGM'"
				mkdir -p "$VGSGM"

				VGSGMSF="$VGSGM/__vortex_staging_folder"
				if [ ! -f "$VGSGMSF" ]; then
					echo "{\"instance\":\"empty\",\"game\":\"NEXUSGAMEID\"}" > "$VGSGMSF"
				fi

				GAMESTAGINGWINFOLDER="$(wineVortexRun "$VORTEXWINE" winepath -w "$VGSGM" | sed "s/\\\/\\\\\\\/g")"
				writelog "INFO" "${FUNCNAME[0]} - setting Staging folder '$GAMESTAGINGWINFOLDER' in Vortex"

				cd "$VORTEXINSTDIR" || return
				wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --set settings.mods.installPath."$NEXUSGAMEID"=true
				wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --set settings.mods.installPath."$NEXUSGAMEID"=\""$GAMESTAGINGWINFOLDER"\"
				cd - || return

			fi

			# search registry install path in NEXUSGAMEFILE
			if grep -E 'instPath.*winapi.RegGetValue' "$NEXUSGAMEFILE" -A1 | grep "HKEY_LOCAL_MACHINE" -q ; then
				writelog "INFO" "${FUNCNAME[0]} - found some instPath registry value in '$NEXUSGAMEFILE' - trying to extract it"
				REGKEY=""
				PATHKEY=""

				# would as well work in a loop for all index.js files, but better just take those which are actually need:
				RAWREG="$(grep -E 'instPath.*winapi.RegGetValue' "$NEXUSGAMEFILE" -A3 | tr -d "\n\r" | awk -F 'RegGetValue' '{print $2}' | cut -d';' -f1  | tr -s " " | sed "s:^(::g" | sed "s:)$::g" | sed  's/, /,/g' | awk '{$1=$1;print}')"
				
				if [ -n "$RAWREG" ]; then
					writelog "INFO" "${FUNCNAME[0]} - analyzing found registry snipplet '$RAWREG'"

					if grep -q "HKEY" <<< "$RAWREG"; then
						writelog "INFO" "${FUNCNAME[0]} - found a HKEY entry: '$RAWREG' - working on it"
						SNIP="','S" # :)
						REGWIP1="${RAWREG//HINE$SNIP/HINE\\S}"
						REGWIP="${REGWIP1//T_USER','S/T_USER\\\\S}"
						
						writelog "INFO" "${FUNCNAME[0]} - REGWIP is '$REGWIP'"

						REGWIPKEY="$(awk -F ',' '{print $1}' <<< "$REGWIP" | sed "s:'::g")"
						PATHKEY="$(awk -F ',' '{print $2}' <<< "$REGWIP" | sed "s:'::g")"

						if grep -q -i "WOW6432Node" <<< "$REGWIPKEY"; then
							writelog "INFO" "${FUNCNAME[0]} - squeezing in a 'WOW6432Node' into the '$REGWIPKEY' string, to make the generic function checkVortexRegs happy"
							REGKEY="${REGWIPKEY/[Ss][Oo][Ff][Tt][Ww][Aa][Rr][Ee]/Software\\\\\\WOW6432Node}"
						else
							REGKEY="$REGWIPKEY"
						fi

						writelog "INFO" "${FUNCNAME[0]} - final REGKEY is '$REGKEY'"

					else
						if grep -q "hive" <<< "$RAWREG"; then
							writelog "INFO" "${FUNCNAME[0]} - found a hive, key, name placeholder - required?"
						else
							writelog "SKIP" "${FUNCNAME[0]} - no valid registry found in cut entry '$RAWREG' - skipping"
						fi
					fi
				else
					writelog "SKIP" "${FUNCNAME[0]} - haven't found any useable registry entries in '$NEXUSGAMEFILE' - skipping registry insert"
				fi

				# insert registry key when found:
				if [ -n "$REGKEY" ] && [ -n "$PATHKEY" ]; then
					writelog "INFO" "${FUNCNAME[0]} - inserting registry key '$REGKEY' '$PATHKEY'"
					checkVortexRegs "$REGKEY" "$PATHKEY"
				else
					writelog "SKIP" "${FUNCNAME[0]} - REGKEY '$REGKEY' or PATHKEY '$PATHKEY' is empty - skipping registry insert"
				fi
			fi

			# create custom paths in "$GPFX" so symlinks can already be created
			customVortexGameSettings

		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - NEXUSGAMEID is empty - skipping automatic adding game '$GN ($AID)' to Vortex"
	fi
}

function precustomVortexGameDirs {
	
	if [ "$AID" == "$1" ]; then

		CDIR="$SteamUserDir/$MyDocsMyGames/$2"
		if [ ! -d "$CDIR" ]; then
			mkdir -p "$CDIR" 2>/dev/null
			writelog "INFO" "${FUNCNAME[0]} - created dir '$CDIR'"
		fi

		CADGDIR="$SteamUserDir/Local Settings/Application Data/$2"
		if [ ! -d "$CADGDIR" ]; then
			mkdir -p "$CADGDIR" 2>/dev/null
			writelog "INFO" "${FUNCNAME[0]} - created dir '$CADGDIR'"
		fi
	fi
}

function customVortexGameSettings {
	precustomVortexGameDirs "377160" "${GN// /}"		# Fallout4
	precustomVortexGameDirs "611660" "${GN// /}"		# Fallout4 VR
	precustomVortexGameDirs "611670" "${GN//VR/ VR}"	# Skyrim VR
	precustomVortexGameDirs "489830" "$GN"				# Skyrim Special Edition
	precustomVortexGameDirs "72850" "$GN"				# Skyrim
	precustomVortexGameDirs "933480" "$GN"				# Enderal
	precustomVortexGameDirs "22300" "${GN// /}"			# Fallout 3
	precustomVortexGameDirs "22370" "${GN// /}"			# Fallout 3 GOTY
	precustomVortexGameDirs "22380" "FalloutNV"			# Fallout New Vegas 
	precustomVortexGameDirs "22330" "$GN"				# Oblivion

	# Fallout3 symlink:
	if [ "$AID" == "22370" ]; then
		FOGDIR="$SteamUserDir/Local Settings/Application Data/Fallout3goty"
		if [ ! -d "$FOGDIR" ]; then
			mkdir -p "$FOGDIR" 2>/dev/null
		fi

		if [ -d "$FOGDIR" ]; then
			ln -s "$FOGDIR" "${FOGDIR//goty/}"
			ln -s "$UserLocalSetAppData/Fallout3goty" "$UserLocalSetAppData/Fallout3"
		fi
	fi
}

function startVortex {
	initVortexStuff

	if [ -f "$VORTEXEXE" ]; then
		writelog "OK" "${FUNCNAME[0]} - starting Vortex now with command '$VORTEXWINE $VORTEXEXE --game $NEXUSGAMEID' in WINEPREFIX '${VORTEXPREFIX//\"/}'"
		if [ "$VORTEXMODE" == "normal" ]; then
			setVortexDLMime
		fi

		if [ -n "$NEXUSGAMEID" ]; then
			cd "$VORTEXINSTDIR" || return
			wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --game "$NEXUSGAMEID"
			cd - || return
		else
			if [ "$1" == "getset" ]; then
				writelog "OK" "${FUNCNAME[0]} - showing settings as requested"
				cd "$VORTEXINSTDIR" || return
				wineVortexRun "$VORTEXWINE" "$VORTEXEXE" --get settings
				cd - || return
			else
				writelog "OK" "${FUNCNAME[0]} - starting Vortex without options"
				cd "$VORTEXINSTDIR" || return
				wineVortexRun "$VORTEXWINE" "$VORTEXEXE"
				cd - || return
			fi
		fi

		cleanVortex
#		checkVortexSELaunch 2

		if [ "$VORTEXMODE" == "quickstart" ]; then
			writelog "OK" "${FUNCNAME[0]} - vortex exited - Vortex is in editor only mode '$VORTEX' so leaving and going back to steam now" "X"
			exit
		else
			writelog "OK" "${FUNCNAME[0]} - vortex exited - starting game now"
		fi
	else
		writelog "ERROR" "${FUNCNAME[0]} - VORTEXEXE $VORTEXEXE not found! - exit"
		exit
	fi
}

function checkVortexRegs {
	# this is a bit of a mess - not 100% sure if we always should use wine64 for adding non-"Wow6432Node" keys, so querying the Wow6432Node key and adding the non-"Wow6432Node" key
	# in very rare cases the non-"Wow6432Node" key is searched in the registry - f.e. witcher 3, so additionally adding every key using wine64  - probably shouldn't be a problem(?)

	REGKEY="$1"
	REG32KEY="${REGKEY//\\Wow6432Node\\/}"

	if [ -n "$2" ]; then
		PATHKEY="$2"
	else
		PATHKEY="Installed Path"
	fi

	if [ -n "$3" ]; then
		INSTP="$3"
	else
		INSTP="C:\\Program Files (x86)\\Steam\\steamapps\\common\\$GN"
	fi

	writelog "OK" "${FUNCNAME[0]} - checking RegKey '$REGKEY' and updating RegKey '$REG32KEY' in registry for game '$GN ($AID)' now"

	# check if registry path exists:
	
	if wineVortexRun "$VORTEXWINE" reg QUERY "$REGKEY" >/dev/null ; then
		writelog "INFO" "${FUNCNAME[0]} - registry path $REGKEY already set"
		# value of the currently set registry path:
		REGPATH="$(wineVortexRun "$VORTEXWINE" reg QUERY "$REGKEY" | grep -i "$PATHKEY" | awk -F 'REG_SZ' '{print $NF}' | awk '{$1=$1};1' | tr -d "\n\r")"
		WSACPATH="$(SteamAppsCommonRelativeW=${SteamAppsCommonRelative//drive_c/C:}; echo "${SteamAppsCommonRelativeW//\//\\}"\\"$GN")"

		if [ "$REGPATH" == "$WSACPATH" ]; then
			writelog "OK" "${FUNCNAME[0]} - the registry entry '$REGPATH' is identical to the gamepath '$WSACPATH'"
		else
			writelog "WARN" "${FUNCNAME[0]} - the registry entry '$REGPATH' is not equal to gamepath '$WSACPATH' - resetting registry to '$WSACPATH'"
			# remove old outdated registry path:
			wineVortexRun "$VORTEXWINE" reg DELETE "$REGKEY" /f >/dev/null
			# add new registry path:
			writelog "NEW" "${FUNCNAME[0]} - registry path '$REGKEY' removed - recreating '$PATHKEY' entry for '$INSTP'"
			wineVortexRun "$VORTEXWINE" reg ADD "$REG32KEY" /f /t "REG_SZ" /v "$PATHKEY" /d "$INSTP" /f
		fi						
	else
		writelog "NEW" "${FUNCNAME[0]} - registry path '$REGKEY' does not exist - creating '$PATHKEY' entry for '$INSTP'"
		# add new registry path:
		wineVortexRun "$VORTEXWINE" reg ADD "$REG32KEY" /f /t "REG_SZ" /v "$PATHKEY" /d "$INSTP"
		VORTEXWINE64="${VORTEXWINE//wine/wine64}"

		if  [ -x "$(command -v "$VORTEXWINE64" 2>/dev/null)" ]; then
			writelog "NEW" "${FUNCNAME[0]} - adding the same entry using wine64"
			wineVortexRun "$VORTEXWINE64" reg ADD "$REG32KEY" /f /t "REG_SZ" /v "$PATHKEY" /d "$INSTP"
		fi
	fi
}

function setVortexSELaunch {

	# Script Extender is currently broken in proton, so checking if a patched proton is used (proton issue #170)

	if [ "$1" == "$AID" ];then
		SEEXE="$EFD/$2"
		if [ ! -f "$SEEXE" ];then
				writelog "SKIP" "${FUNCNAME[0]} - special exe '$2' for '$GN ($AID)' not found in gamedir '$EFD' - starting normal exe"
		else
			writelog "INFO" "${FUNCNAME[0]} - found special exe '$2' for '$GN ($AID)' in gamedir '$EFD'"

			if [ "$USEGUI" == "$ZENITY" ]; then
				writelog "SKIP" "${FUNCNAME[0]} - skipping zenity here - the whole '${FUNCNAME[0]}' is too bloated anyway for its benefit"
			else
				LC_ALL="" "$YAD" --notebook --borders="$YADSETBORD" --window-icon="$STLICON"  --center "$WINDECO" \
				--title="$TITLE" \
				--text="$GUI_SEBINFOUND '$EFD/$2'" \
				--button="${GE^^}":0 \
				--button="$BUT_SAVERUN ${GE^^}":1 \
				--button="${2^^}":2 \
				--button="$BUT_SAVERUN ${2^^}":3 
				case $? in
					0)  {
						writelog "INFO" "${FUNCNAME[0]} - Starting with the regular Game Exe '$GE'"
						RUN_CUSTOMCMD=0
						}
					;;
					1) 	{
						writelog "INFO" "${FUNCNAME[0]} - Starting with the regular Game Exe '$GE' and don't ask again"
						RUN_CUSTOMCMD=0
						updateConfigEntry "SELAUNCH" "0" "$STLGAMECFG"
						}
					;;
					2)  {
						writelog "INFO" "${FUNCNAME[0]} - Starting with the Script Extender Exe '$2'"
						CUSTOMCMD="$SEEXE"
						RUN_CUSTOMCMD=1
						ONLY_CUSTOMCMD=1
						}
					;;
					3)  {
						writelog "INFO" "${FUNCNAME[0]} - Starting with the Script Extender Exe '$2' and saving as default"
						writelog "INFO" "${FUNCNAME[0]} - configuring default start of special exe '$2' by enabling SELAUNCH in '$STLGAMECFG'"
						updateConfigEntry "CUSTOMCMD" "$SEEXE" "$STLGAMECFG"
						updateConfigEntry "RUN_CUSTOMCMD" "1" "$STLGAMECFG"
						updateConfigEntry "ONLY_CUSTOMCMD" "1" "$STLGAMECFG"
						updateConfigEntry "SELAUNCH" "0" "$STLGAMECFG"
						CUSTOMCMD="$SEEXE"
						RUN_CUSTOMCMD=1
						ONLY_CUSTOMCMD=1
						writelog "INFO" "${FUNCNAME[0]} - starting $SEEXE instead of the game exe directly after this Vortex instance"
						}
					;;
				esac
			fi
		fi
	fi
}

function checkVortexSELaunch {
	# (mostly for Vortex)
	# if $1 is 1 check if a preconfigured exe instead of the game is defined/found - f.e. script extender for skyrim, fallout etc
	# if $1 is 2 it is assumed the check already happended before'

	if [ -z "$1" ]; then
		SECHECK="2"
	else
		SECHECK="$1"
	fi

	if [ "$1" -eq 0 ]; then
		writelog "INFO" "${FUNCNAME[0]} - SELAUNCH set to '$SECHECK' - skipping any SE checks and directly starting what is configured in '$STLGAMECFG'"
	else	
		if [ "$SECHECK" -eq 2 ] && [ -n "$SELAUNCH" ] && [ "$SELAUNCH" -eq 1 ]; then
			writelog "SKIP" "${FUNCNAME[0]} - skipping option $SECHECK because SELAUNCH is already enabled"
		else
			setVortexSELaunch "377160" "f4se_loader.exe" "$SECHECK" # Fallout4
			setVortexSELaunch "611660" "f4sevr_loader.exe" "$SECHECK"	# Fallout4 VR
			setVortexSELaunch "611670" "sksevr_loader.exe" "$SECHECK" # Skyrim VR
			setVortexSELaunch "489830" "skse64_loader.exe" "$SECHECK" # Skyrim Special Edition
			setVortexSELaunch "72850" "skse_loader.exe" "$SECHECK"	# Skyrim
			setVortexSELaunch "933480" "skse_loader.exe" "$SECHECK"	# Enderal
			setVortexSELaunch "22300" "fose_loader.exe" "$SECHECK"	# Fallout 3
			setVortexSELaunch "22370" "fose_loader.exe" "$SECHECK"	# Fallout 3 GOTY
			setVortexSELaunch "22380" "nvse_loader.exe" "$SECHECK"	# Fallout New Vegas 
			setVortexSELaunch "22330" "obse_loader.exe" "$SECHECK"	# Oblivion
		fi
	fi
}

function installVortexPack {
	installVortexDeps
	installVortex
	setVortexDLMime
}

function initVortexStuff {
	saveCfg "$STLVORTEXCFG" X
	
	if [ -f "$STLVORTEXCFG" ]; then
		loadCfg "$STLVORTEXCFG"
	fi

	if [ "$VORTEXMODE" == "normal" ] || [ "$VORTEXMODE" == "quickstart" ] || [ "$VORTEXMODE" == "editormode" ]; then

		if [ -z "$VORTEXWINE" ] || [ ! -f "$VORTEXWINE" ]; then
			writelog "OK" "${FUNCNAME[0]} - no wine binary configured in variable VORTEXWINE or file in variable VORTEXWINE '$VORTEXWINE' not found - autodetecting wine"
			if [ -n "$RUNWINE" ]; then
				writelog "OK" "${FUNCNAME[0]} - using RUNWINE '$RUNWINE' as VORTEXWINE"
				VORTEXWINE="${RUNWINE//\"/}"
			else
				if  [ -x "$(command -v "$("$WHICH" wine 2>/dev/null)" 2>/dev/null)" ]; then
					writelog "OK" "${FUNCNAME[0]} - using '$("$WHICH" wine)' as VORTEXWINE"
					VORTEXWINE="$("$WHICH" wine 2>/dev/null)"
				else
					writelog "SKIP" "${FUNCNAME[0]} - can't find a usable wine binary for VORTEXWINE - skipping"
					VORTEXMODE="disabled"
				fi
			fi
		fi

		VORTEXINSTDIR="${VORTEXPREFIX//\"/}/drive_c/Program Files/Black Tree Gaming Ltd/Vortex"
		VORTEXEXE="$VORTEXINSTDIR/Vortex.exe"
	fi
}
	
function installVortexFull {
	AID="vortex-installation"
	LOGLEVEL=2
	mkProjDir "$LOGDIR" 1
	writelog "OK" "${FUNCNAME[0]} - starting full Vortex install"
	VORTEXMODE="normal"

	initVortexStuff

	installVortexPack
	writelog "OK" "${FUNCNAME[0]} - full Vortex installation finished"
	exit
}

function checkVortex {
	if [ "$VORTEXMODE" != "disabled" ]; then
		initVortexStuff
	fi

	if [ "$VORTEXMODE" == "disabled" ]; then
		writelog "SKIP" "${FUNCNAME[0]} -  Vortex is disabled"
	elif [ "$VORTEXMODE" == "normal" ]; then
		writelog "OK" "${FUNCNAME[0]} - default VORTEX mode '$VORTEX' is set"
		writelog "OK" "${FUNCNAME[0]} -VORTEXWINE is $VORTEXWINE"

		# checking WINEPREFIX for Vortex:
		if [ -n "$VORTEXPREFIX" ]; then
			mkdir -p "${VORTEXPREFIX//\"/}" 2>/dev/null
			if [ -d "${VORTEXPREFIX//\"/}" ]; then
				writelog "OK" "${FUNCNAME[0]} - VORTEXPREFIX is defined to '$VORTEXPREFIX' and the directory exists"

				# checking for Vortex.exe:
				if [ -f "$VORTEXEXE" ]; then
					writelog "OK" "${FUNCNAME[0]} - VORTEXEXE '$VORTEXEXE' exists"

					# creating some required directories in VORTEXPREFIX:
					SteamAppsCommonRelative="drive_c/Program Files (x86)/Steam/$SAC"
					VortexSteamAppsCommon="${VORTEXPREFIX//\"/}/$SteamAppsCommonRelative"

					writelog "OK" "${FUNCNAME[0]} - creating subdirectories in '$VORTEXPREFIX' if missing"

					if [ ! -d "$VortexSteamAppsCommon" ]; then
						writelog "OK" "${FUNCNAME[0]} - creating directory $VortexSteamAppsCommon"
						mkdir -p "$VortexSteamAppsCommon"
					fi
					MyDocs="My Documents"
					MyDocsMyGames="$MyDocs/My Games"
					LocalSetAppData="Local Settings/Application Data"
					
					if [ -d "${VORTEXPREFIX//\"/}/drive_c/users/steamuser" ];then
						writelog "OK" "${FUNCNAME[0]} - Vortex is running with Proton wine - configuring for user 'steamuser'"
						VUSER="steamuser"
					else
						writelog "OK" "${FUNCNAME[0]} - Vortex is running with regular wine - configuring for user '$USER'"
						VUSER="$USER"
					fi
					
					UserMyDocs="${VORTEXPREFIX//\"/}/drive_c/users/$VUSER/$MyDocs"
					UserMyDocsMyGames="${VORTEXPREFIX//\"/}/drive_c/users/$VUSER/$MyDocsMyGames"
					UserLocalSetAppData="${VORTEXPREFIX//\"/}/drive_c/users/$VUSER/$LocalSetAppData"
					
					if readlink "$UserMyDocsMyGames" >/dev/null ; then
						writelog "OK" "${FUNCNAME[0]} - removing symlink '$UserMyDocsMyGames' pointing to '$(readlink "$UserMyDocsMyGames")'"
						rm "$UserMyDocsMyGames"
					fi

					if readlink "$UserLocalSetAppData" >/dev/null ; then
						writelog "OK" "${FUNCNAME[0]} - removing symlink '$UserLocalSetAppData' pointing to '$(readlink "$UserLocalSetAppData")'"
						rm "$UserLocalSetAppData"
					fi
					
					mkdir -p "$UserMyDocsMyGames" 2>/dev/null
					mkdir -p "$UserLocalSetAppData" 2>/dev/null

					# game specific part:
					writelog "OK" "${FUNCNAME[0]} - preparing required registry and path settings for '$GFD' and '$GN ($AID)'"

					if [ -d "$GPFX" ] || [ -z "$(ls -A "$GPFX")" ]; then
						writelog "OK" "${FUNCNAME[0]} - original game WINEPREFIX $GPFX is not empty, so assuming it is useable"

						# checking symlinks:
						linkVortex "$GFD" "$VortexSteamAppsCommon/$GN"

						STUSER="steamuser"
						SteamUserDir="$GPFX/drive_c/users/$STUSER"
						
						SteamUserMyDocs="$SteamUserDir/$MyDocs"

						setupGameVortex

						# My Documents:
						while read -r dir; do
							writelog "OK" "${FUNCNAME[0]} - creating symlink from '$dir' to '$UserMyDocs'"
							linkVortex "$dir" "$UserMyDocs/$(basename "$dir")"
						done <<< "$(find "$SteamUserMyDocs" -mindepth 1 -maxdepth 1 -type d | grep -v 'Music$\|Templates$\|Downloads$\|Pictures$\|Games$\|Videos$')"

						# My Games:
						SteamUserMyDocsMyGames="$SteamUserDir/$MyDocsMyGames"
						while read -r dir; do
							writelog "OK" "${FUNCNAME[0]} - creating symlink 'from' $dir to '$UserMyDocsMyGames'"
							linkVortex "$dir" "$UserMyDocsMyGames/$(basename "$dir")"
						done <<< "$(find "$SteamUserMyDocsMyGames" -mindepth 1 -maxdepth 1 -type d)"

						# Application Data:
						SteamUserLocalSetAppData="$SteamUserDir/$LocalSetAppData"
						while read -r dir; do
							writelog "OK" "${FUNCNAME[0]} - creating symlink from '$dir' to '$UserLocalSetAppData'"
							linkVortex "$dir" "$UserLocalSetAppData/$(basename "$dir")"
						done <<< "$(find "$SteamUserLocalSetAppData" -mindepth 1 -maxdepth 1 -type d | grep -v 'Microsoft\|openvr')"			

						# registry:
						checkVortexRegs "HKEY_LOCAL_MACHINE\\Software\\\Wow6432Node\\\Valve\\\Steam\\\Apps\\$AID"

						# symlinks and registry entries should be ready at this point for vortex
						writelog "OK" "${FUNCNAME[0]} - symlinks and registry entries should be ready at this point for Vortex"

						# start Vortex:
						startVortex
					else
						writelog "SKIP" "${FUNCNAME[0]} -  original game $WINEPREFIX $GPFX does not exist or is empty - skipping Vortex and starting the game now once to create it!"
					fi

				# Vortex is not installed
				else
					writelog "WARN" "${FUNCNAME[0]} - VORTEXEXE $VORTEXEXE does not exist"
					if [ "$VORTEXINSTALL" -eq 1 ]; then
						writelog "INFO" "${FUNCNAME[0]} - VORTEXINSTALL is set to 1 so installing it now"
						writelog "INFO" "${FUNCNAME[0]} - running through all setup steps, even if some might be not required at this point:"
						installVortexPack
						writelog "INFO" "${FUNCNAME[0]} - Vortex was hopefully installed correctly - retrying to start it"
						checkVortex
					else
						writelog "SKIP" "${FUNCNAME[0]} - VORTEXINSTALL is set to 0 - skipping Vortex"
					fi
				fi
			else
				writelog "SKIP" "${FUNCNAME[0]} -  VORTEXPREFIX is defined to '$VORTEXPREFIX' but the directory does not exist - skipping"
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - but VORTEXPREFIX is not defined - skipping"
		fi
	elif [ "$VORTEXMODE" == "quickstart" ]; then
			writelog "OK" "${FUNCNAME[0]} - quick VORTEX mode '$VORTEX' is set"
			startVortex
	elif [ "$VORTEXMODE" == "editormode" ]; then
			writelog "OK" "${FUNCNAME[0]} - editor only VORTEX mode '$VORTEX' is set"
			startVortex
	fi
}


function checkDep {
	CATNAM="$1"
	CHECKPROG="$2"

	if [ -n "${!CATNAM##*[!0-9]*}" ]; then
		if [ "${!CATNAM}" -eq 1 ]; then
			if  [ ! -x "$(command -v "$("$WHICH" "$CHECKPROG" 2>/dev/null)" 2>/dev/null)" ]; then
				writelog "WARN" "${FUNCNAME[0]} - disabling '$CATNAM' because '$CHECKPROG' is missing"
				notiShow "$(strFix "$NOTY_PROGRAMMISSING" "$CATNAM" "$CHECKPROG")"
				unset "$CATNAM"
			fi
		fi
	fi
}

function checkExtDeps {
	checkDep "USEGAMEMODERUN" "$GAMEMODERUN"
	checkDep "USEGAMESCOPE" "$GAMESCOPE"
	checkDep "RUN_NYRNA" "$NYRNA"
	checkDep "STRACERUN" "$STRACE"
	checkDep "RUN_WINETRICKS" "$WINETRICKS"
	checkDep "WINETRICKSPAKS" "$WINETRICKS"
	checkDep "RUN_REPLAY" "$REPLAY"
	checkDep "USELUXTORPEDA" "$LUXTORPEDACMD"
	checkDep "USEROBERTA" "$ROBERTACMD"
	checkDep "USEBOXTRON" "$BOXTRONCMD"
	checkDep "RUNSBSVR" "$VRVIDEOPLAYER"
	checkDep "RUN_GAMCON" "$GAMCON"
	checkDep "USENETMON" "$NETMON"
	checkDep "USENOTIFIER" "$NOTY"
	checkDep "RUN_WINECFG" "$WINECFG"
	checkDep "HACKWMP10" "$CABEXTRACT"
	checkDep "CHECKHMD" "$LSUSB"
}

function checkIntDeps {
	DEPSMISSING=0

	while read -r INTDEP; do
		if  [ ! -x "$(command -v "$("$WHICH" "${!INTDEP}" 2>/dev/null)" 2>/dev/null)" ]; then
			echo "${!INTDEP} not found!"
			DEPSMISSING=1
		fi
	done <<< "$(sed -n "/^#STARTINTDEPS/,/^#ENDINTDEPS/p;/^#ENDINTDEPS/q" "$0" | grep -v "^#" | cut -d '=' -f1)"

	if  [ ! -x "$(command -v "$("$WHICH" "$YAD" 2>/dev/null)" 2>/dev/null)" ] && [ ! -x "$(command -v "$("$WHICH" "$ZENITY" 2>/dev/null)" 2>/dev/null)" ]; then
		DEPSMISSING=1
		echo "neither '$YAD' nor '$ZENITY' was found, but at least one of them is required!"
	fi

	MINYAD="7.0"
	YADVER="$("$YAD" --version | cut -d ' ' -f1)"
	
	if [ "$(printf '%s\n' "$MINYAD" "$YADVER" | sort -V | head -n1)" != "$MINYAD" ]; then 
		echo "ERROR yad version '$("$YAD" --version | cut -d ' ' -f1)' is too old. You need to update to at least '$MINYAD'"
		exit
	fi	


	if [ "$DEPSMISSING" -eq 1 ]; then
		echo "Above programs need to be installed to use '$PROGCMD' - exiting now"
		exit
	fi
}

#####################################################
### CORE LAUNCH START ###

function setLinGameVals {
	if [ "$ISGAME" -eq 3 ]; then
		writelog "INFO" "${FUNCNAME[0]} - looks like this is a native linux game - disabling some values which are only useful for win games"
		VORTEXMODE="disabled"
		IGNOREAUTOTWEAKS=1
		WINETRICKSPAKS="none"
		RUN_WINETRICKS="0"
		RUN_WINECFG="0"
		REGEDIT="0"
		VIRTUALDESKTOP="0"
		ATADOPT="0"	
		USERESHADE="0"
		INSTALL_RESHADE="0"
	fi
}

function prepareLaunch {

	mkdir -p "$STLSHM" 2>/dev/null

	if [ -f "$LOGDIR/$AID.log" ]; then
		rm "$LOGDIR/$AID.log"
	fi

	rm "$CLOSETMP" 2>/dev/null

	createProjectDirs

	saveCfg "$STLDEFGLOBALCFG" X
	loadCfg "$STLDEFGLOBALCFG" X
	
	writelog "START" "######### Game Launch: $GN ($AID) #########"

	createDefaultCfgs "${ORGGCMD[@]}"

	checkSTLDLGlobal
 
	getGameData "$AID"

	writelog "INFO" "${FUNCNAME[0]} - game launch args '${ORGGCMD[*]}'"
	writelog "INFO" "${FUNCNAME[0]} - gamedir '$GFD'"
	writelog "INFO" "${FUNCNAME[0]} - wineprefix '$GPFX'"
	writelog "INFO" "${FUNCNAME[0]} -------------------"
	writelog "INFO" "${FUNCNAME[0]} - createGameCfg:"
	createGameCfg
	
	writelog "INFO" "${FUNCNAME[0]} - create Tweak Template:"
	createTweakTemplateCfg

	FIRSTUSEPROTON="$USEPROTON"

	writelog "INFO" "${FUNCNAME[0]} - trayIcon:"
	trayIcon
	writelog "INFO" "${FUNCNAME[0]} - askSettings:"
	askSettings

	#  in case a path changed in between, call createProjectDirs again:
	writelog "INFO" "${FUNCNAME[0]} - createProjectDirs:"
	createProjectDirs

	# auto generate autotweak configs if supported external platform is listed in AUTOTWEAKS
	autoGenTweak

	# load chosen Auto Tweak Config

	if [ -n "$LOADAUTOCFG" ]; then
		writelog "INFO" "${FUNCNAME[0]} - loading Auto Tweak config '$LOADAUTOCFG'"
		loadCfg "$LOADAUTOCFG"
	fi

	# export game specific variables, exports die with this script, so no worries:
	writelog "INFO" "${FUNCNAME[0]} - exporting game specific variables"
	writelog "INFO" "${FUNCNAME[0]} - loadCfg:"
	loadCfg "$STLGAMECFG"

	# (re)initialize Proton dependant variables, when USEPROTON changed in askSettings (SettingsMenu/EditorDialog) above
	if [ "$USEPROTON" != "$FIRSTUSEPROTON" ] && [ "$ISGAME" -eq 2 ]; then
		setNewProtVars "$(PROTPATH "$USEPROTON")"
	fi

	# export DXVK_CONFIG_FILE if STLDXVKCFG was found:
	if [ -f "$STLDXVKCFG" ]; then
		export DXVK_CONFIG_FILE="$STLDXVKCFG"
	fi

	# autoapply configuration settings based on the steam categories the game is in:

	writelog "INFO" "${FUNCNAME[0]} - autoCategorySettings:"
	autoCategorySettings

	# shortcut to enable all required flags for SBSVR with vkbasalt
	if [ -n "$SBSVRVK" ]; then
		if [ "$SBSVRVK" -eq 1 ]; then
			writelog "INFO" " $PROGNAME - SBSVRVK enabled - starting game in SBS-VR using vkbasalt"
			export RUNSBSVR=1
			export ENABLE_VKBASALT=1
			export SBSVRRS=0
			export USERESHADE=0
		fi
	fi
	
	# shortcut to enable all required flags for SBSVR with ReShade
	if [ -n "$SBSVRRS" ]; then
		if [ "$SBSVRRS" -eq 1 ]; then
			writelog "INFO" " $PROGNAME - SBSVRRS enabled - starting game in SBS-VR using ReShade"
			export RUNSBSVR=1
			export INSTALL_RESHADE=1
			export RESHADE_DEPTH3D=1
			export USERESHADE=1
			export SBSVRVK=0
			export ENABLE_VKBASALT=0
		fi
	fi

####

	setLinGameVals

#################

	# override tweak settings
	writelog "INFO" "${FUNCNAME[0]} - checkTweakLaunch:"
	checkTweakLaunch

	# remove GFWL if NOGFWL is 1
	checkXliveless

	# check dependencies - disable functions if dependency programs are missing and/or warn
	checkExtDeps

	# start winetricks gui if RUN_WINETRICKS is 1 or silently if WINETRICKSPAKS is not empty
	writelog "INFO" "${FUNCNAME[0]} - checkWinetricksLaunch:"
	checkWinetricksLaunch

	# start winecfg if RUN_WINECFG is 1
	writelog "INFO" "${FUNCNAME[0]} - checkWineCfgLaunch:"
	checkWineCfgLaunch

	# apply some regs if requested
	writelog "INFO" "${FUNCNAME[0]} - customRegs:"
	customRegs

	# minimize all open windows if TOGGLEWINDOWS is 1
	writelog "INFO" "${FUNCNAME[0]} - toggleWindows:"
	toggleWindows windowminimize

	# install ReShade if INSTALL_RESHADE is 1
	writelog "INFO" "${FUNCNAME[0]} - installReshade:"
	installReshade

	# install Depth3D Shader if RESHADE_DEPTH3D is 1
	writelog "INFO" "${FUNCNAME[0]} - installReshadeDepth3D:"
	installReshadeDepth3D

	# start game wih Reshade if USERESHADE is 1
	writelog "INFO" "${FUNCNAME[0]} - useReshade:"
	useReshade

	# start game wih usevkBasalt ENABLE_VKBASALT is 1
	writelog "INFO" "${FUNCNAME[0]} - usevkBasalt:"
	usevkBasalt

	# open Shader Menu if CHOOSESHADERS  is 1
	writelog "INFO" "${FUNCNAME[0]} - chooseShaders:"
	chooseShaders

	# start $NYRNA if RUN_NYRNA is 1
	writelog "INFO" "${FUNCNAME[0]} - useNyrnaz:"
	useNyrna

	# start $REPLAY if RUN_REPLAY is 1
	writelog "INFO" "${FUNCNAME[0]} - useReplay:"
	useReplay

	# start game with side-by-side VR if RUNSBSVR is not 0 
	writelog "INFO" "${FUNCNAME[0]} - checkSBSVRLaunch:"
	checkSBSVRLaunch

	# start Vortex if VORTEXMODE is not 'disabled'
	writelog "INFO" "${FUNCNAME[0]} - checkVortex:"
	checkVortex

	# (mostly for Vortex) if SELAUNCH is 0 start a preconfigured exe directly
	writelog "INFO" "${FUNCNAME[0]} - checkVortexSELaunch:"
	checkVortexSELaunch "$SELAUNCH"

	# start a custom program if RUN_CUSTOMCMD is ge 1
	writelog "INFO" "${FUNCNAME[0]} - checkCustomLaunch:"
	checkCustomLaunch

	# start strace process in the background if STRACERUN is 1
	writelog "INFO" "${FUNCNAME[0]} - checkStraceLaunch:"
	checkStraceLaunch

	# start network monitor process in the background if USENETMON is enabled and NETMON found
	writelog "INFO" "${FUNCNAME[0]} - checkNetMonLaunch:"
	checkNetMonLaunch

	# start gameconqueror when game starts if is RUN_GAMCON 1
	checkGamConLaunch

	# start custom user script
	customUserScriptStart

	# set pulse latency if CHANGE_PULSE_LATENCY is 1
	checkPulse

	launchSteamGame
}

function switchProton {
	writelog "INFO" "${FUNCNAME[0]} - Switching used Proton and its Variables to version '$1'"

	if [ ! -f "$(PROTPATH "$1")" ]; then
		writelog "INFO" "${FUNCNAME[0]} - Tried to switch to Proton '$1', but it is not available"
		if [ "$AUTOPULLPROTON" -eq 1 ]; then
			writelog "INFO" "${FUNCNAME[0]} - AUTOPULLPROTON is enabled, so trying to download and enable '$1'"
			createDLProtList
			DLURL="$(printf "%s\n" "${ProtonDLList[@]}" | grep -m1 "$1")"
			if [ -n "$DLURL" ];then
				writelog "INFO" "${FUNCNAME[0]} - download for requested '$1' found: '$DLURL'"
				dlCustomProton "${DLURL//|/\"}"
			else
				writelog "SKIP" "${FUNCNAME[0]} - no download URL found for requested '$1' - skipping"
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - AUTOPULLPROTON is disabled, so giving up switching to proton version '$1'"
		fi
	else
		writelog "INFO" "${FUNCNAME[0]} - requested Proton version '$1' found under '$(PROTPATH "$1")'"
	fi

	if [ -f "$(PROTPATH "$1")" ]; then
		USEPROTON="$1"
		setNewProtVars "$(PROTPATH "$USEPROTON")"
	fi
}

function fixProtonVersionMismatch {
	NEWMINORPROT="$(grep "^${WANTPROTON%-*}" <<< "$(printf "%s\n" "${ProtonCSV[@]//\"/}")" | cut -d ';' -f1 | sort -nr | head -n1)"
	NEWMINORRUN="$(PROTPATH "${NEWMINORPROT//\"/}")"
	if [ -f "$NEWMINORRUN" ]; then
		switchProton  "$NEWMINORPROT"
		writelog "INFO" "${FUNCNAME[0]} - minor version mismatch - using '$NEWMINORPROT' instead of requested '$WANTPROTON'"
		notiShow "$(strFix "$NOTY_WANTPROTON2" "$NEWMINORPROT" "$WANTPROTON")"
	elif [ "$AUTOLASTPROTON" -eq 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - automatically selecting newest official one"
		setNOP
	else
		writelog "INFO" "${FUNCNAME[0]} - asking for one"
		needNewProton
	fi

}

function wantProton {
	if [ -n "$WANTPROTON" ]; then
		if [ "$WANTPROTON" != "$USEPROTON" ]; then
			writelog "INFO" "${FUNCNAME[0]} - Proton version '$WANTPROTON' required, but '$USEPROTON' is set"
			notiShow "$(strFix "$NOTY_WANTPROTON" "$WANTPROTON" "$USEPROTON")"

			OVERRIDEPROTON=1
		
			if [ -f "$(PROTPATH "$WANTPROTON")" ]; then
				writelog "INFO" "${FUNCNAME[0]} - Proton version '$WANTPROTON' does exist -switching"
				switchProton "$WANTPROTON"
			else
				fixProtonVersionMismatch
			fi
		fi
	fi	
}

function launchSteamGame {

########################

  # load mangohud libs
  if [ "$MANGOHUD" -eq 1 ]; then
    MANGOHUD_LIB_NAME="libMangoHud.so"

    if [ "$MANGOHUD_DLSYM" = "1" ]; then
      MANGOHUD_LIB_NAME="libMangoHud_dlsym.so:${MANGOHUD_LIB_NAME}"
    fi

    LD_PRELOAD="${LD_PRELOAD}:${MANGOHUD_LIB_NAME}"

    # Define which lib to load with MANGOHUDARCH
    if [[ "$MANGOHUDARCH" =  'x86-64' ]] ; then
      writelog "INFO" "${FUNCNAME[0]} - loading MangoHud libraries for x86-64"
      LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${MANGOHUD_LIB}"
    else
      writelog "INFO" "${FUNCNAME[0]} - loading MangoHud libraries for x86"
      LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${MANGOHUD_LIB32}"
    fi
  fi

	if [ "$USEBOXTRON" -eq 1 ] || [ "$USEROBERTA" -eq 1 ] || [ "$USELUXTORPEDA" -eq 1 ]; then
		ISGAME=3
	fi

	# game start command for both proton and linux native games:
	if [ "$USEBOXTRON" -eq 0 ] && [ "$USEROBERTA" -eq 0 ] && [ "$USELUXTORPEDA" -eq 0 ]; then
		# the actual game launch:
		if [ "$GAMEARGS" != "none" ]; then
			IFS=" " read -r -a RUNGAMEARGS <<< "$GAMEARGS"
		fi

		GAMESTARTCMD=("${ORGGCMD[@]}" "${RUNGAMEARGS[@]}")

		writelog "INFO" "${FUNCNAME[0]} - GAMESTARTCMD is '${GAMESTARTCMD[*]}'"
	fi

	if [ "$USESLR" -eq 1 ] && [ -n "${RUNSLR[0]}" ]; then
		if [ "$USEBOXTRON" -eq 1 ]; then
			writelog "WARN" "${FUNCNAME[0]} - '$SLR' conflicts with BOXTRON"
			notiShow "$(strFix "$NOTY_SLRCONFLICT" "BOXTRON")"
		fi
		if [ "$USEROBERTA" -eq 1 ]; then
			writelog "WARN" "${FUNCNAME[0]} - '$SLR' conflicts with ROBERTA"
			notiShow "$(strFix "$NOTY_SLRCONFLICT" "ROBERTA")"
		fi
		if [ "$USELUXTORPEDA" -eq 1 ]; then
			writelog "WARN" "${FUNCNAME[0]} - '$SLR' conflicts with LUXTORPEDA"
			notiShow "$(strFix "$NOTY_SLRCONFLICT" "LUXTORPEDA")"
		fi
		if [ "$MANGOHUD" -eq 1 ]; then
			writelog "WARN" "${FUNCNAME[0]} - '$SLR' conflicts with MANGOHUD"
			notiShow "$(strFix "$NOTY_SLRCONFLICT" "MANGOHUD")"
		fi
		if [ "$ENABLE_VKBASALT" -eq 1 ] ; then
			writelog "WARN" "${FUNCNAME[0]} - '$SLR' conflicts with VKBASALT"
			notiShow "$(strFix "$NOTY_SLRCONFLICT" "VKBASALT")"
		fi
		if [ "$USEGAMEMODERUN" -eq 1 ]; then
			writelog "WARN" "${FUNCNAME[0]} - '$SLR' conflicts with GAMEMODERUN"
			notiShow "$(strFix "$NOTY_SLRCONFLICT" "GAMEMODERUN")"
		fi
		if [ "$USEGAMESCOPE" -eq 1 ]; then
			writelog "WARN" "${FUNCNAME[0]} - '$SLR' conflicts with GAMESCOPE"
			notiShow "$(strFix "$NOTY_SLRCONFLICT" "GAMESCOPE")"
		fi
	fi

	if [ "$USESLR" -eq 1 ]; then
		if [ -n "${RUNSLR[0]}" ]; then
			writelog "INFO" "${FUNCNAME[0]} - USESLR is enabled, so adding RUNSLR '${RUNSLR[*]}' to the actual start command"
		else
			writelog "SKIP" "${FUNCNAME[0]} - USESLR is enabled, but RUNSLR is empty - skipping"
			USESLR=0
		fi
	else
		if [ -n "${RUNSLR[0]}" ]; then
			writelog "SKIP" "${FUNCNAME[0]} - USESLR is disabled, so skipping '$SLR' found in the commandline: '${RUNSLR[*]}'"
		fi
	fi

	# first start with non-proton games here:
	if [ "$ISGAME" -eq 3 ]; then
		# start with boxtron:
		if [ "$USEBOXTRON" -eq 1 ]; then
			DOSEXE="$GP"
			if  [ -x "$(command -v "$BOXTRONCMD" 2>/dev/null)" ]; then
				notiShow "$(strFix "$NOTY_BOXTRON" "$GN" "$AID")"
				# disable CHANGE_PULSE_LATENCY else audio gets stuck
				CHANGE_PULSE_LATENCY="0"

				writelog "INFO" "${FUNCNAME[0]} - starting game '$GN ($AID)' with boxtron. Full start command is: '$BOXTRONCMD $BOXTRONARGS $DOSEXE'"
				"$BOXTRONCMD" "$BOXTRONARGS" "$DOSEXE"
			else
				writelog "ERROR" "${FUNCNAME[0]} -  boxtron command '$BOXTRONCMD' not found - exit"
				exit
			fi

		# start with roberta:
		elif [ "$USEROBERTA" -eq 1 ]; then
			VMEXE="$GP"
			if  [ -x "$(command -v "$ROBERTACMD" 2>/dev/null)" ]; then
				writelog "INFO" "${FUNCNAME[0]} - starting game '$AID' with roberta: '$ROBERTACMD $ROBERTAARGS $VMEXE'"
				notiShow "$(strFix "$NOTY_ROBERTA" "$GN" "$AID")"
				RUNROBERTACMD=("$ROBERTACMD" "$ROBERTAARGS" "$VMEXE")
				extRun "${RUNROBERTACMD[@]}"
			else
				writelog "ERROR" "${FUNCNAME[0]} -  roberta command '$ROBERTACMD' not found - exit"
				exit
			fi

		# start with luxtorpeda:
		elif [ "$USELUXTORPEDA" -eq 1 ]; then
			LUXEXE="$GP"
			if  [ -x "$(command -v "$LUXTORPEDACMD" 2>/dev/null)" ]; then
				# skip download if engine_choice.txt exists already:
				if [ ! -f "$HOME"/.config/luxtorpeda/"$AID"/engine_choice.txt ]; then
					writelog "INFO" "${FUNCNAME[0]} - downloading native game data for '$AID' with luxtorpeda: '$LUXTORPEDACMD' manual-download $AID"
					notiShow "$(strFix "$NOTY_LUXTORPEDA1" "$GN" "$AID")"
					"$LUXTORPEDACMD" manual-download "$AID"
				fi
				notiShow "$(strFix "$NOTY_LUXTORPEDA2" "$GN" "$AID")"
				writelog "INFO" "${FUNCNAME[0]} - starting game '$AID' with luxtorpeda: '$LUXTORPEDACMD $LUXTORPEDAARGS $LUXEXE'"
				RUNLUXTORPEDACMD=("$LUXTORPEDACMD" "$LUXTORPEDAARGS" "$LUXEXE")
				extRun "${RUNLUXTORPEDACMD[@]}"
			else
				writelog "ERROR" "${FUNCNAME[0]} -  luxtorpeda command '$LUXTORPEDACMD' not found - exit"
				exit
			fi
		# start a linux native game here:
		else
			# start with gamemoderun:
			if [ "$USEGAMEMODERUN" -eq 1 ]; then
				writelog "INFO" "${FUNCNAME[0]} - starting native game '$GN ($AID)' with '$GAMEMODERUN' - ${GAMESTARTCMD[*]}"
				notiShow "$(strFix "$NOTY_STARTNATGAMO" "$GN" "$AID")"
				writelog "INFO" "${FUNCNAME[0]} - full start command is '$GAMEMODERUN ${GAMESTARTCMD[*]}'"
				"$GAMEMODERUN" "${GAMESTARTCMD[@]}"		

			# start with gamescope:
			elif [ "$USEGAMESCOPE" -eq 1 ]; then
				writelog "INFO" "${FUNCNAME[0]} - starting native game '$GN ($AID)' with $GAMESCOPE arguments '$GAMESCOPE_ARGS'"
				notiShow "$(strFix "$NOTY_STARTNATGAMSCO" "$GN" "$AID")"
				IFS=" " read -r -a RUNGAMESCOPE_ARGS <<< "$GAMESCOPE_ARGS"
				writelog "INFO" "${FUNCNAME[0]} - full start command is '$GAMESCOPE ${RUNGAMESCOPE_ARGS[*]} ${GAMESTARTCMD[*]}'"
				"$GAMESCOPE" "${RUNGAMESCOPE_ARGS[@]}" "${GAMESTARTCMD[@]}"

			# regular start:
			else
				writelog "INFO" "${FUNCNAME[0]} - starting native game '$GN ($AID)'"
				notiShow "$(strFix "$NOTY_STARTNAT" "$GN" "$AID")"
				if [ "$USESLR" -eq 1 ]; then
					writelog "INFO" "${FUNCNAME[0]} - full start command is '${RUNSLR[*]} ${GAMESTARTCMD[*]}'"
					"${RUNSLR[@]}" "${GAMESTARTCMD[@]}"
				else
					writelog "INFO" "${FUNCNAME[0]} - full start command is '${GAMESTARTCMD[*]}'"
					"${GAMESTARTCMD[@]}"
				fi
			fi
		fi
	# now games using proton:
	elif [ "$ISGAME" -eq 2 ]; then

		# proton variants start here:
		wantProton
		
		if [ "$(OVPROT)" -eq 0 ]; then
			
			writelog "INFO" "${FUNCNAME[0]} - using ORIGINAL game start command: ${GAMESTARTCMD[*]}"
		else
			if [ "$STARTMODE" -eq 2 ] || [ "$STARTMODE" -eq 3 ]; then
				writelog "INFO" "${FUNCNAME[0]} - Proton Override forced, because STARTMODE='$STARTMODE', so checking if it needs updated"
			else
				writelog "INFO" "${FUNCNAME[0]} - Proton Override allowed, so checking if it needs updated"
			fi

			if [ -z "$USEPROTON" ]; then
				writelog "INFO" "${FUNCNAME[0]} - no current Proton found"
				if [ "$AUTOLASTPROTON" -eq 1 ]; then
					writelog "INFO" "${FUNCNAME[0]} - automatically selecting newest official one"
					setNOP
				else
					writelog "INFO" "${FUNCNAME[0]} - asking for one"
					needNewProton
				fi
			fi


			if [ "$SLOPROT" == "$RUNPROTON" ] && [ -n "$SLOPROT" ]; then
				writelog "INFO" "${FUNCNAME[0]} - command line proton '$SLOPROT' is identical to 'RUNPROTON' (path for '$USEPROTON') - nothing to change"
				writelog "INFO" "${FUNCNAME[0]} - using ORIGINAL game start command: ${GAMESTARTCMD[*]}"
			else
				writelog "INFO" "${FUNCNAME[0]} - ORIGINAL game start command is: ${GAMESTARTCMD[*]}"

				if [ ! -f "${RUNPROTON//\"/}" ]; then
					writelog "WARN" "${FUNCNAME[0]} - '$USEPROTON' seems outdated as the executable ${RUNPROTON//\"/} wasn't found"
					fixProtonVersionMismatch
				fi
				
				if [ -n "$SLOPROT" ]; then
					writelog "INFO" "${FUNCNAME[0]} - overriding '$SLOPROTV' (='$SLOPROT') from command line with '$USEPROTON' (='${RUNPROTON//\"/}')"
				else
					writelog "INFO" "${FUNCNAME[0]} - overriding Proton with '$USEPROTON' (='${RUNPROTON//\"/}')"
				fi

				if [ "$STARTMODE" -eq 1 ]; then
					writelog "INFO" "${FUNCNAME[0]} - game was started with '$PROGCMD' as Launch option, so replacing '${GAMESTARTCMD[0]}' with '${RUNPROTON//\"/}' in '${GAMESTARTCMD[*]}'"
					GAMESTARTCMD[0]="${RUNPROTON//\"/}"
					writelog "INFO" "${FUNCNAME[0]} - new launch command is '${GAMESTARTCMD[*]}'"
				elif [ "$STARTMODE" -eq 2 ]; then
					writelog "INFO" "${FUNCNAME[0]} - game was started with '$PROGCMD' as Steam Compatibility Tool, so inserting '${RUNPROTON//\"/}' before '${GAMESTARTCMD[0]}' in '${GAMESTARTCMD[*]}'"
					GAMESTARTCMD=("${RUNPROTON//\"/}" "${GAMESTARTCMD[@]}")
					writelog "INFO" "${FUNCNAME[0]} - new launch command is '${GAMESTARTCMD[*]}'"
				elif [ "$STARTMODE" -eq 3 ]; then
					writelog "INFO" "${FUNCNAME[0]} - game was started with '$PROGCMD' both as Launch option and as Steam Compatibility Tool"
					writelog "INFO" "${FUNCNAME[0]} - so replacing '${GAMESTARTCMD[0]}' with '${RUNPROTON//\"/}' in '${GAMESTARTCMD[*]}'"
					GAMESTARTCMD[0]="${RUNPROTON//\"/}"
					writelog "INFO" "${FUNCNAME[0]} - new launch command is '${GAMESTARTCMD[*]}'"
				else
					writelog "ERROR" "${FUNCNAME[0]} - something is wrong with the startcommand '${GAMESTARTCMD[*]}' - this shouldn't happen"
				fi
			
				writelog "INFO" "${FUNCNAME[0]} - UPDATED game start command is: ${GAMESTARTCMD[*]}"
			fi
		fi
############

		# set the definitive used versions, which are also stored into writeLastRun
		PROTONVERSION="$(setProtonPathVersion "$RUNPROTON")"

		# start with gamemoderun:
		if [ "$USEGAMEMODERUN" -eq 1 ]; then
			if [ "$USEGAMESCOPE" -eq 1 ]; then
				writelog "SKIP" "${FUNCNAME[0]} - skipping '$GAMESCOPE' as '$GAMEMODERUN' is enabled as well"
			fi
			writelog "INFO" "${FUNCNAME[0]} - starting '$GN ($AID)' with Proton: '$PROTONVERSION' with '$GAMEMODERUN'"
			notiShow "$(strFix "$NOTY_STARTPROTGAMO" "$PROTONVERSION" "$GN" "$AID")"

			writelog "INFO" "${FUNCNAME[0]} - full start command is '$GAMEMODERUN ${GAMESTARTCMD[*]}'"
 			"$GAMEMODERUN" "${GAMESTARTCMD[@]}"		
	
		# start with gamescope:
		elif [ "$USEGAMESCOPE" -eq 1 ]; then
			writelog "INFO" "${FUNCNAME[0]} - starting '$GN ($AID)' with Proton: '$PROTONVERSION' with $GAMESCOPE arguments '$GAMESCOPE_ARGS'"
			notiShow "$(strFix "$NOTY_STARTPROTGAMSCO" "$PROTONVERSION" "$GN" "$AID")"

			IFS=" " read -r -a RUNGAMESCOPE_ARGS <<< "$GAMESCOPE_ARGS"

			writelog "INFO" "${FUNCNAME[0]} - full start command is '$GAMESCOPE ${RUNGAMESCOPE_ARGS[*]} ${GAMESTARTCMD[*]}'"
			"$GAMESCOPE" "${RUNGAMESCOPE_ARGS[@]}" "${GAMESTARTCMD[@]}"		
		# regular start:
		else
			writelog "INFO" "${FUNCNAME[0]} - starting '$GN ($AID)' with Proton: '$PROTONVERSION'"
			notiShow "$(strFix "$NOTY_STARTPROT" "$PROTONVERSION" "$GN" "$AID")"
			if [ "$USESLR" -eq 1 ]; then
				writelog "INFO" "${FUNCNAME[0]} - full start command is '${RUNSLR[*]} ${GAMESTARTCMD[*]}'"
				"${RUNSLR[@]}" "${GAMESTARTCMD[@]}"
			else
				writelog "INFO" "${FUNCNAME[0]} - full start command is '${GAMESTARTCMD[*]}'"
				"${GAMESTARTCMD[@]}"
			fi
		fi
	else
		writelog "SKIP" "${FUNCNAME[0]} - with ISGAME='$ISGAME' the game failed to start"
	fi
	writelog "STOP" "######### $PROGNAME $PROGVERS #########"
}

### CORE LAUNCH END ###

### COMMAND LINE START ###

function CompatTool {
	
	SCTS="$STEAMCOMPATOOLS/$PROGNAME"

	if [ "$1" == "add" ] ; then
		if [ -d "$SROOT" ]; then
			if [ ! -d "$STEAMCOMPATOOLS" ]; then
				writelog "INFO" "${FUNCNAME[0]} - initially creating dir '$STEAMCOMPATOOLS'" "E"
				mkdir -p "$STEAMCOMPATOOLS" 2>/dev/null
			fi

			if [ ! -d "$SCTS" ]; then
				writelog "INFO" "${FUNCNAME[0]} - creating dir '$SCTS'" "E"
				mkdir -p "$SCTS" 2>/dev/null

				CVDF="$SCTS/$CTVDF"
				writelog "INFO" "${FUNCNAME[0]} - creating file '$CVDF'" "E"
				{
				echo "\"compatibilitytools\""
				echo "{"
				echo "  \"compat_tools\""
				echo "  {"
				echo "	\"$PROGCMD\" // Internal name of this tool"
				echo "	{"
				echo "	  \"install_path\" \".\""
				echo "	  \"display_name\" \"$PROGNAME\""
				echo ""
				echo "	  \"from_oslist\"  \"windows\""
				echo "	  \"to_oslist\"    \"linux\""
				echo "	}"
				echo "  }"
				echo "}"
				} >> "$CVDF"

				TVDF="$SCTS/toolmanifest.vdf"
				writelog "INFO" "${FUNCNAME[0]} - creating file '$TVDF'" "E"
				{
				echo "\"manifest\""
				echo "{"
				echo "  \"commandline\" \"/$PROGCMD run\""
				echo "  \"commandline_$WFEAR\" \"/$PROGCMD $WFEAR\""
				echo "}"
				} >> "$TVDF"

				writelog "INFO" "${FUNCNAME[0]} - creating symlink '$SCTS/$PROGCMD' pointing to '$0'" "E"
				ln -s "$0" "$SCTS/$PROGCMD"
			else
				writelog "INFO" "${FUNCNAME[0]} - '$SCTS' already exists - checking if '$PROGCMD' symlink needs to be updated" "E"
				if [ "$(readlink "$SCTS/$PROGCMD")" == "$0" ]; then
					writelog "SKIP" "${FUNCNAME[0]} - nothing to do the '$SCTS/$PROGCMD' symlink still points to '$0'" "E"
				else
					rm  "$SCTS/$PROGCMD"
					ln -s "$0" "$SCTS/$PROGCMD"
					writelog "SKIP" "${FUNCNAME[0]} - updated the '$SCTS/$PROGCMD' symlink to '$0'" "E"
				fi
			fi
		else
			writelog "SKIP" "${FUNCNAME[0]} - Steam Home Dir '$SROOT' not found!" "E"
		fi
	elif [ "$1" == "del" ]; then
		if [ ! -d "$SCTS" ]; then
			writelog "SKIP" "${FUNCNAME[0]} - selected '$1' but '$SCTS' doesn't exist" "E"
		else
			rm "$SCTS/$PROGCMD" 2>/dev/null
			find "$SCTS"  -maxdepth 1 -type f -name "*.vdf" -exec rm {} \;
			rmdir "$SCTS"
			if [ ! -d "$SCTS" ]; then
				writelog "INFO" "${FUNCNAME[0]} - removed '$SCTS' successfully" "E"
			else
				writelog "SKIP" "${FUNCNAME[0]} - tried to carefully remove '$SCTS', but it still exists - any files inside '$SCTS'?" "E"
			fi
		fi
	else
		if [ ! -d "$SCTS" ]; then
			writelog "INFO" "${FUNCNAME[0]} - '$PROGNAME' is not installed as Steam Compatibility Tool in '$STEAMCOMPATOOLS'" "E"
		else
			writelog "INFO" "${FUNCNAME[0]} - '$PROGNAME' is installed as Steam Compatibility Tool in '$STEAMCOMPATOOLS' and points to '$(readlink "$SCTS/$PROGCMD")'" "E"
		fi
	fi
}

function checkStartMode {
	if [ -n "${ORGGCMD[0]}" ]; then
		if [ "$ISGAME" -eq 2 ]; then
			if [ "${ORGGCMD[1]}" == "$WFEAR" ]; then
				writelog "INFO" "${FUNCNAME[0]} - Game was started via Steam Launch Options ('$PROGCMD %command%')"
				if grep -q "$PROGNAME/$PROGCMD" <<< "${ORGGCMD[0]}"; then
					writelog "INFO" "${FUNCNAME[0]} - AND also as Steam Compatibility Tool - using the latter"
					SCTPROT="$(getNOP "p")"
					STARTMODE=3
					RUNPROTON="$SCTPROT"
					FORCEOVERRIDEPROTON=1
				else
					SLOPROT="${ORGGCMD[0]}"
					SLOPROTV="$(setProtonPathVersion "$SLOPROT")"
					STARTMODE=1
					RUNPROTON="$SLOPROT"
				fi
			elif [ "${ORGGCMD[0]}" == "$WFEAR" ]; then
				writelog "INFO" "${FUNCNAME[0]} - Game was started as Steam Compatibility Tool - automatically enabling override Proton, as proton doesn't appear in the command line here"
				SCTPROT="$(getNOP "p")"
				STARTMODE=2
				RUNPROTON="$SCTPROT"
				FORCEOVERRIDEPROTON=1
			else
				writelog "WARN" "${FUNCNAME[0]} - Game was neither started as Steam Launch option nor as Steam Compatibility Tool - this should never be reached"
			fi
			
			if [ -n "$RUNPROTON" ]; then
				CHECKWINE="$(dirname "$RUNPROTON")/$DBW"

				if [ -f "$CHECKWINE" ]; then
					RUNWINE="$CHECKWINE"
					writelog "INFO" "${FUNCNAME[0]} - set the wine binary for proton in path '$RUNPROTON' to '$RUNWINE'"
				else
					writelog "WARN" "${FUNCNAME[0]} - couldn't find the wine binary for the proton in path '$RUNPROTON'"
				fi

				PROTONVERSION="$(setProtonPathVersion "$RUNPROTON")"
			fi
		fi
	fi
}

function getDefaultProton {
	if [ -n "$SLOPROTV" ];then
		echo "$SLOPROTV"
	else
		getNOP "v"
	fi
}

function commandline {
	if [ "$1" == "set" ]; then
		if [ -n "$2" ]; then
				ENTLIST="$(sed -n "/#STARTsaveCfgdefault_template/,/#ENDsaveCfgdefault_template/p;/#ENDsaveCfgdefault_template/q" "$0" | grep "echo"  | grep "=" | cut -d '"' -f2 | cut -d '=' -f1 | sed 's/^#//')"
				if ! grep "$2" <<< "$ENTLIST" >/dev/null; then
					echo "$2 is no valid entry - valid are:"
					echo "-----------------------"
					echo "$ENTLIST"
					echo "-----------------------"
					exit
				fi
			if [ -n "$3" ]; then
				if [ -z "$4" ]; then
					echo "argument 4 is missing - exit"
					exit
				else
					if [ "$3" == "all" ]; then
						echo "arg3 is all - updating all config files in $STLGAMEDIR:"
						while read -r file; do
							echo "updating entry $2 to value $4 in config $file"
							updateConfigEntry "$2" "$4" "$file"
						done <<< "$(find "$STLGAMEDIR" -name "*.conf")"
					else
						if [ -f "$STLGAMEDIR/$3.conf" ]; then
							echo "updating entry $2 to value $4 in config $STLGAMEDIR/$3.conf"
							updateConfigEntry "$2" "$4" "$STLGAMEDIR/$3.conf"
							else
							echo "config file $STLGAMEDIR/$3.conf does not exist - nothing to do - exit"
							exit
						fi
					fi
				fi
			else
				echo "arg3 is missing, you need to provide either the SteamAppId of the game or 'all' to batch update all game configs with the chosen entry!"
				exit	
			fi
		else
			echo "arg2 is missing, you need to provide a valid config entry which should be updated!"
			exit
		fi
	elif  [ "$1" == "vortex" ]; then
		if [ -n "$2" ]; then
			if [ "$2" == "install" ]; then
				installVortexFull				
			elif [ "$2" == "start" ]; then
				VORTEXMODE="quickstart"
				startVortex
			elif [ "$2" == "getset" ]; then
				VORTEXMODE="quickstart"
				startVortex "$2"
			elif [ "$2" == "stage" ]; then
				addVortexStage "$3"
			else	
				echo "arg2 $1 is no valid command"
				createDefaultCfgs
				howto	
			fi
		fi
	elif  [ "$1" == "autotweaks" ] || [ "$1" == "at" ]; then
		if [ -n "$2" ]; then
			if [ "$2" == "$PF" ]; then
				createTweak"$PF" "$3"
			elif [ "$2" == "$LU" ]; then
				createTweak"$LU" "$3"
			elif [ "$2" == "dl" ]; then
				if [ -n "$3" ]; then
					if [ "$3" == "$PF" ]; then
						dlPF
						createTweak"$PF" "$4"
					elif [ "$3" == "$LU" ]; then
						dlLU
						createTweak"$LU" "$4"
					fi
				else
					howto
				fi
			fi
		else
			howto
		fi
	elif  [ "$1" == "update" ]; then
		if [ -n "$2" ]; then
			if [ "$2" == "$GIT" ]; then
				gitPullStl
				date > "$GLDLSTLTXT"
			elif [ "$2" == "gamedata" ]; then
				if [ -z "$3" ]; then
					getGameDataForInstalledGames
				else
					echo getGameData "$3"
					getGameData "$3"
				fi
			elif [ "$2" == "allgamedata" ]; then
				getDataForAllGamesinSharedConfig
			elif [ "$2" == "shaders" ]; then
				dlShaders "$3"
			elif [ "$2" == "gameshaders" ]; then
				if [ -n "$3" ]; then
					if [ -d "$3" ]; then
						GameShaderDialog "$3"
					else
						writelog "SKIP" "${FUNCNAME[0]} - game directory '$3' does not exist - exit" "E"
					fi
				else
					howto
				fi
			elif [ "$2" == "reshade" ]; then
				dlReShade "$3"
			else
				howto
			fi
		else
			howto
		fi
	elif  [ "$1" == "compat" ]; then
		if [ -n "$2" ]; then
			if [ "$2" == "add" ] || [ "$2" == "del" ] || [ "$2" == "get" ]; then
				CompatTool "$2"
			else
				howto
			fi
		else
			CompatTool "get"
		fi
	elif  [ "$1" == "addcustomproton" ] || [ "$1" == "acp" ]; then
		addCustomProton "$2" "$3"
	elif  [ "$1" == "dlcustomproton" ] || [ "$1" == "dcp" ]; then
		dlCustomProtonGate "$2"
	elif  [ "$1" == "settings" ]; then
		createDefaultCfgs
		if [ "$USEGUI" == "$YAD" ]; then
			if [ -n "$2" ]; then
				openSettings "$2"
				cleanYadLeftOvers
			else
				openSettings "$AID"
				cleanYadLeftOvers
			fi
		elif [ "$USEGUI" == "$ZENITY" ]; then
			if [ -n "$2" ]; then
				EditorDialog "$2"
			else
				EditorDialog "$AID"
			fi
		fi
	elif  [ "$1" == "launcher" ]; then
		openGameLauncher "$2" "$3"
	elif  [ "$1" == "help" ] || [ "$1" == "--help" ]; then
		createDefaultCfgs
		howto
	else
		if ! grep -q "lang=\|run" <<< "$@" ; then
			echo "-----------------------"
			echo "arg1 $1 is no valid command"
			createDefaultCfgs
			howto
		fi
		createDefaultCfgs
	fi
}

### COMMAND LINE END ###

### CLOSE STL START ###

function writeLastRun {
	writelog "INFO" "${FUNCNAME[0]} - recreating $LASTRUN"
	{
	echo "RUNPROTON=\"$RUNPROTON\""
	echo "RUNWINE=\"$RUNWINE\""
	echo "PROTONVERSION=\"$PROTONVERSION\""
	echo "PREVAID=\"$AID\""
	echo "PREVGAME=\"$GN\""
	} >	"$LASTRUN"
}

function closeSTL {
	writelog "INFO" "${FUNCNAME[0]} - game $GN ($AID) exited - cleaning up custom processes if necessary"

	# dummy file which could be used to stop possible while loops
	touch "$CLOSETMP"

	# kill $VRVIDEOPLAYER in case it wasn't closed before
	if [ -n "$RUNSBSVR" ]; then
		if [ "$RUNSBSVR" -ge 1 ]; then
			if "$PGREP" -f "$VRVIDEOPLAYER" >/dev/null; then
				"$PKILL" -f "$VRVIDEOPLAYER"
				writelog "INFO" "${FUNCNAME[0]} - $VRVIDEOPLAYER killed"
			fi
		fi
	fi
	
	# kill $NYRNA if running
	if [ -n "$RUN_NYRNA" ]; then
		if [ "$RUN_NYRNA" -eq 1 ]; then
			if "$PGREP" -f "$NYRNA" >/dev/null; then
				"$PKILL" -f "$NYRNA"
				# also remove systray created in /tmp/ ("systray_" with 6 random chars should be save enough)
				find /tmp -maxdepth 1 -type f -regextype posix-extended -regex '^.*systray_[A-Z,a-z,0-9]{6}' -exec rm {} \;
				writelog "INFO" "${FUNCNAME[0]} - $NYRNA killed"
			fi
		fi
	fi

	# kill $REPLAY if running
	if [ -n "$RUN_REPLAY" ]; then
		if [ "$RUN_REPLAY" -eq 1 ]; then
			if "$PGREP" -f "$REPLAY" >/dev/null; then
				"$PKILL" -f "$REPLAY"
				writelog "INFO" "${FUNCNAME[0]} - $REPLAY killed"
			fi
		fi
	fi

	# kill $GAMCON if running
	if [ "$RUN_GAMCON" -eq 1 ]; then
		writelog "INFO" "${FUNCNAME[0]} - game process finished - closing '$GAMCON'"
		"$PKILL" -f "$GAMCON"
		writelog "INFO" "${FUNCNAME[0]} - killed '$GAMCON' script"
	fi
	
	# stop network monitor if running

	if [ "$USENETMON" -eq 1 ]; then
		if "$PGREP" "$NETMON" >/dev/null; then
			"$PKILL" -f "$NETMON"
			writelog "INFO" "${FUNCNAME[0]} - $NETMON killed"
			# remove duplicate lines to make reading easier
			awk -i inplace '!visited[$0]++' "$NETMONDIR/$AID-$NETMON.log"
		fi
	fi

	toggleWindows windowraise

	customUserScriptStop

	cleanYadLeftOvers

	notiShow "$(strFix "$NOTY_STLSTOP" "$GN" "$AID" "$PROGNAME")"
	writelog "STOP" "#########  ${FUNCNAME[0]} $PROGNAME $PROGVERS #########"
	rm "$CLOSETMP"
	rm "$TEMPWINNAME" 2>/dev/null

# only useful for win games:
	if [ "$ISGAME" -eq 2 ]; then
		# ask if used autotweak should be adopted as regular user tweak
		if [ -n "$ATADOPT" ]; then
			if [ "$ATADOPT" -eq 1 ]; then
				if [ -n "$LOADAUTOCFG" ]; then
					writelog "INFO" "${FUNCNAME[0]} - ATADOPT is enabled, asking to adopt '$LOADAUTOCFG'"
					AskAdoptAutoTweak
				else
					writelog "SKIP" "${FUNCNAME[0]} - ATADOPT is enabled, but no AutoTweak was used"
				fi
			fi
		fi

		writeLastRun
	fi
}

### CLOSE STL END ###

function initLaunch {
	prepareLaunch
	closeSTL
	writelog "STOP" "######### $PROGNAME $PROGVERS #########"
}

# main:#################

checkIntDeps

setSteamPaths

if [ -z "$1" ]; then
	writelog "INFO" "${FUNCNAME[0]} - no arguments provided. See '$PROGCMD --help' for possible command line parameters" "E"
	createDefaultCfgs "$@"
else
	if grep -q "$SAC" <<< "$@"; then
		if grep -q "update" <<< "$@"; then
			createDefaultCfgs "$@"
			commandline "$@"
		else
			setGameVars "$@"
			if grep -q "$WFEAR" <<< "${ORGGCMD[@]}"; then
				ISGAME=2
				initLaunch
			elif [ -f "$GP" ]; then
				ISGAME=3
				initLaunch
			else
				writelog "INFO" "${FUNCNAME[0]} - unknown parameter '${ORGGCMD[*]}'" "E"
			fi
		fi
	else
		createDefaultCfgs "$@"
		commandline "$@"
	fi
fi
